<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>石锅鱼的锅</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.StoneAndFish.xyz/"/>
  <updated>2018-09-25T15:21:07.800Z</updated>
  <id>http://blog.StoneAndFish.xyz/</id>
  
  <author>
    <name>StoneDemo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[石头 · 记] 异地日常，深圳吃喝玩乐</title>
    <link href="http://blog.StoneAndFish.xyz/2018/09/25/Daily-SZ-Play/"/>
    <id>http://blog.StoneAndFish.xyz/2018/09/25/Daily-SZ-Play/</id>
    <published>2018-09-25T14:32:03.000Z</published>
    <updated>2018-09-25T15:21:07.800Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Daily_SZ_Play/%E6%B7%B1%E5%9C%B3%E5%90%83%E5%96%9D%E7%8E%A9%E4%B9%90.png" alt=""></p><p>自去年 6 月正式入住深圳，我们的异地恋时期便宣告到来。</p><p>在鱼还未入学中大之前，我们就得常常厦门深圳两头跑。要命的是厦深动车不是高铁，每次都要瘫坐四小时才能到达彼岸，屁股都要废了。当然，见了面以后，这些不适感都会抛之脑后。</p><p>好在，这样的日子只持续了一年。</p><p>前两个月鱼进了实验室，住到了广州大学城。于是我们的异地车程从四个小时，缩短到了半个小时，再也不用担心坐车坐到屁股发麻了。每个月见一次的频率也提高到了两三次。</p><p>每次见面，当然要出去玩一玩，吃一吃，拍一拍。在深圳也找到了一些比较中意的餐厅，遛过了一些觉得挺有意思的地方，相册里也已经堆了不少照片。</p><p>于是我打算翻翻相册，回忆记录一下，有哪些地方值得再去一次，哪些餐厅、排挡、路边摊可以经常去光顾。</p><p>大概是最近思绪比较混乱，在家的时候有些学不下去吧。需要整理一些事物，平静平静。</p><p>OK，那就从近至远，慢慢回忆吧。<br><a id="more"></a></p><hr><h1 id="壹间茶餐厅"><a href="#壹间茶餐厅" class="headerlink" title="壹间茶餐厅"></a>壹间茶餐厅</h1><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Daily_SZ_Play/%E4%B8%80%E9%97%B4%E8%8C%B6%E9%A4%90%E5%8E%85.jpeg" alt="一间茶餐厅"></p><p>早些天，看到「中华小鸣仔」的推送，推荐了几家有好吃的菠萝油的餐厅。其中一家就叫「壹间茶餐厅」，据说这家的港式奶茶也是一绝，和他家的菠萝油更是绝配。好家伙，它提起了我们的兴趣。于是我们趁中秋放假，就去体验了一发。</p><p>这家店在「<strong>海岸城西座三楼</strong>」，直接搜店名的话，在地图上似乎搜索不到的，可以搜索「探鱼海岸城店」，它的正上方就是我们的目的地了。</p><p>店内环境不错，整个店面挺大，位子很多。不过我们去的时候其实已经只剩一个偏僻的小桌了，但是一眼看过去总觉得很空旷，没坐满似的。进门左边墙上贴有漫画，没注意看它讲的是什么鬼……然后上楼的楼梯口对面有个小桌，桌上摆满了「老夫子」，其中几本我老家中可能还存有…</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Daily_SZ_Play/%E4%B8%80%E9%97%B4%E8%8C%B6%E9%A4%90%E5%8E%85-%E7%8E%AF%E5%A2%83%E5%90%88%E8%BE%91.jpg" alt=""></p><p>环境是 OK 了，不知道吃的够不够味。</p><p>翻开菜单，看了一圈，重点还是「菠萝油」和「壹间奶茶」。迅速解决点单问题后，等个几分钟就开始上菜了。</p><p>我们最关注的奶茶，是这样子的：一个形似二锅头的瓶子里，装满了奶茶，旁边配有一个装有冰块的杯子。</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Daily_SZ_Play/%E4%B8%80%E9%97%B4%E8%8C%B6%E9%A4%90%E5%8E%85-%E5%A5%B6%E8%8C%B6.jpg" alt="一间奶茶之奶茶"></p><p>奶茶原本就是常温的，甚至已经是凉的的，其实直接喝也不错。不过不经过这个冰块冷冻一下的话，奶茶苦涩的味道可能会更重一些吧。再者说，把奶茶从冰块的头顶倒入，也是个挺有「仪式感」的体验呢。</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Daily_SZ_Play/%E4%B8%80%E9%97%B4%E8%8C%B6%E9%A4%90%E5%8E%85-%E5%80%92%E5%A5%B6%E8%8C%B6.gif" alt="倒奶茶"></p><p>再来，就是菠萝油。菠萝油呈上来后，服务员还会用喷枪把表皮部分再烤一会…不过感觉似乎没什么巨大的效果的样子。不过不得不说，菠萝油本身还是挺正的，不管从味道还是外观上来说。我是非常喜欢吃「表皮那些很酥的部分」了，虽然会吃的满嘴都是，桌面上也会掉落一堆。</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Daily_SZ_Play/%E4%B8%80%E9%97%B4%E8%8C%B6%E9%A4%90%E5%8E%85-%E8%8F%A0%E8%90%9D%E6%B2%B9.jpg" alt=""></p><p>啃一大口菠萝油，喝一大口奶茶，Great！不愧为绝配。</p><p>吃到此处，我们此餐的目的已经达到了，感觉「物有所值」。</p><p>另外，我们还点了个「金不换田鸡」也值得一提，田鸡肉非常非常嫩，可以说是我吃过的口感最好的田鸡肉了。不过就是这道菜有点辣，有点油，对我这个胃病患者并不友好…</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Daily_SZ_Play/%E4%B8%80%E9%97%B4%E8%8C%B6%E9%A4%90%E5%8E%85-%E9%87%91%E4%B8%8D%E6%8D%A2%E7%82%92%E7%94%B0%E9%B8%A1.jpg" alt="金不换田鸡"></p><p>好了，最后来说说价格吧。</p><p>菠萝油一个<code>￥13</code>，而一份奶茶要<code>￥32</code>…好吧，这个「冠军奶茶」还是值得这个价的。其它的，一份田鸡，一份油麦菜，具体价格都忘记了，不过最后加上茶位费，这餐一共吃了<code>￥128</code>吧。人均<code>￥60+</code>的价格，在海岸城这块地方已经算是挺良心了，更何况还能吃得爽。</p><p>总之，对于喜欢广式、港式风味的朋友，我觉得这家餐厅是值得一去的。</p><hr><h1 id="老表记"><a href="#老表记" class="headerlink" title="老表记"></a>老表记</h1><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Daily_SZ_Play/%E8%80%81%E8%A1%A8%E8%AE%B0.jpeg" alt="老表记"></p><p>老表，老表 —— 一股浓浓的广西味。从它的菜单就足见一二。</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Daily_SZ_Play/%E8%80%81%E8%A1%A8%E8%AE%B0-%E8%8F%9C%E5%8D%95.png" alt="老表记菜单"></p><p>这一道「爽卵跌酸梅汤」的命名，用词巧妙，寥寥三字就能让广西人倍感亲切。</p><p>没错，这间餐厅主打的就是广西美食，绝活「田螺鸭脚煲」。</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Daily_SZ_Play/%E8%80%81%E8%A1%A8%E8%AE%B0-%E9%B8%AD%E8%84%9A%E7%85%B2.jpeg" alt=""></p><p>田螺里的肉似乎已经被挖空，取而代之的是精心准备的肉团。鸭脚应该事先炸过了一遍，表皮变得很薄，咬起来很方便，同时表皮与鸭脚肉之间存在着的空隙充满了这一锅的浓汤，非常入味。螺蛳粉里必备的腐竹，煲中也有，煮的很软，是我熟悉的嚼劲，熟悉的味道。不过锅里的油豆腐我倒不是非常喜欢，也不是不好吃，是因为它的表皮是比较有韧劲的，而我更喜欢吃软的。</p><p>当然这家的烧烤也深得我心，那一份「烤韭菜」和「烤豆腐」仿佛带有远方家乡那「姐妹夜宵摊」的一丝神韵。</p><p>「炒螺蛳粉」？！我还真没吃过，有点落伍了。其实是挺好吃的，但是我明明选了「不辣」，而一下口就被辣到了，于是作为胃病患者我只能搁置一旁了。</p><p>但是似乎这些菜都是又油又辣的啊？赶紧再点个「黄瓜片」和「酸梅汤」以及「蜂蜜柚子茶」缓缓……</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Daily_SZ_Play/%E8%80%81%E8%A1%A8%E8%AE%B0-%E9%A3%9F%E7%89%A9%E5%90%88%E8%BE%91.jpg" alt=""></p><p>嗯…可惜当时没带相机，这些照片都是用我的红米手机拍的，质量堪忧…不过起码内容是充实了~</p><p>「老表记」其实在广西是一家挺有名的连锁店，前一段才开到深圳来。它的位置在「龙华壹方城负一楼」，现在还没法找到具体地址，可能是因为刚营业不久，高德地图的信息还没更新到吧。说实话，位置挺偏远的，对于住在「世界之窗」这里的我来说，过去一趟可能得有「1 个多小时」。不过这地方离「深圳北站」不远，大概花个十几二十分钟就能到了。</p><p>最后说说价格，「招牌田螺鸭脚煲」是<code>￥79</code>，其它的具体价格没太在意，也就「一份韭菜、一份豆腐、一份黄瓜片、一盘炒螺蛳粉、一杯酸梅汤和一杯蜂蜜柚子茶」。似乎还有点茶位费来着？这些加起来原价一共也就<code>￥160+</code>，当时做活动，只花了<code>￥100+</code>就吃到了，爽了爽了~（不过炒螺丝粉点得多余了，因为其它东西吃完就很饱了…再也吃不下…）</p><p>那么这一家店的话，主要推荐给广西老乡吧。「喜欢螺蛳粉、炒田螺、鸭脚煲」的的朋友也该一试，这风味，不会让你失望的。</p><hr><h1 id="九记大排档"><a href="#九记大排档" class="headerlink" title="九记大排档"></a>九记大排档</h1><p>Emmmm…先占个位，有空再慢慢写。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/Daily_SZ_Play/%E6%B7%B1%E5%9C%B3%E5%90%83%E5%96%9D%E7%8E%A9%E4%B9%90.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;自去年 6 月正式入住深圳，我们的异地恋时期便宣告到来。&lt;/p&gt;
&lt;p&gt;在鱼还未入学中大之前，我们就得常常厦门深圳两头跑。要命的是厦深动车不是高铁，每次都要瘫坐四小时才能到达彼岸，屁股都要废了。当然，见了面以后，这些不适感都会抛之脑后。&lt;/p&gt;
&lt;p&gt;好在，这样的日子只持续了一年。&lt;/p&gt;
&lt;p&gt;前两个月鱼进了实验室，住到了广州大学城。于是我们的异地车程从四个小时，缩短到了半个小时，再也不用担心坐车坐到屁股发麻了。每个月见一次的频率也提高到了两三次。&lt;/p&gt;
&lt;p&gt;每次见面，当然要出去玩一玩，吃一吃，拍一拍。在深圳也找到了一些比较中意的餐厅，遛过了一些觉得挺有意思的地方，相册里也已经堆了不少照片。&lt;/p&gt;
&lt;p&gt;于是我打算翻翻相册，回忆记录一下，有哪些地方值得再去一次，哪些餐厅、排挡、路边摊可以经常去光顾。&lt;/p&gt;
&lt;p&gt;大概是最近思绪比较混乱，在家的时候有些学不下去吧。需要整理一些事物，平静平静。&lt;/p&gt;
&lt;p&gt;OK，那就从近至远，慢慢回忆吧。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.StoneAndFish.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="吃喝玩乐" scheme="http://blog.StoneAndFish.xyz/tags/%E5%90%83%E5%96%9D%E7%8E%A9%E4%B9%90/"/>
    
      <category term="深圳" scheme="http://blog.StoneAndFish.xyz/tags/%E6%B7%B1%E5%9C%B3/"/>
    
  </entry>
  
  <entry>
    <title>[剁手] 初体验 —— ipad pro + apple pencil</title>
    <link href="http://blog.StoneAndFish.xyz/2018/09/17/BuyIpadPro/"/>
    <id>http://blog.StoneAndFish.xyz/2018/09/17/BuyIpadPro/</id>
    <published>2018-09-17T13:39:06.000Z</published>
    <updated>2018-09-21T11:59:19.404Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/%E6%B2%A1%E9%92%B1%EF%BC%81.gif" alt="穷啊~"></p><p>前段时间一直都在思考，是时候升级一波手头上的移动电子设备了。<br><a id="more"></a></p><p>去年国庆刚换上了「红米 Note4X」，大概还能再战一两年，等 5G 再换吧。</p><p>于是手机更新计划，Out！</p><p>自从工作以来，很久没有用到笔记本电脑了。刚入大学时候上了船，买了「神舟精盾」，前两年换了个固态硬盘，感觉还能再战几年…不过它真是太重了，对于现在的我来说，根本就不想背着它出门。</p><p>那么考虑换一台轻薄本？找了很久，发现「HP Spectre x360」真不错：颜值、性能都在线，轻薄么…1.2kg 的重量应该海星⑧，可以 360 度翻转很炫嘛，还能完美兼容微软 Surface Pro 的那支笔！可以说非常合意了呢，于是我还去顺电上手体验了几次，完全符合预期。可惜国行顶配没有 16G 内存的版本，只能找美行代购，有点麻烦，打算先观望。</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/HP%E5%B9%BD%E7%81%B5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="HP Spectre X360"></p><p>笔记本更新计划，Pre-start！</p><p>过了一两个月，看到网上放风说苹果秋季发布会可能要发个「ipad pro 全面屏版」。</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/%E5%85%A8%E9%9D%A2%E5%B1%8Fipad%E6%B8%B2%E6%9F%93%E5%9B%BE.png" alt="全面屏ipad？"></p><p>好家伙，提起了我的兴趣。ipad 比起笔记本轻了很多，便于携带，再加上有一只笔，可以很方便做笔记、读书读论文什么的…以及娱乐性 Max…嗯，赶紧去住处附近的苹果官方店先体验现在的 ipad 和 pencil……</p><p>于是被这惊人的交互体验圈粉了。虽然说笔的握持感以及书写的感觉，比起在微软体验店试过的 Surface Pro 的笔差了些，但是已经完全能够满足我的需求，而且响应速度并不弱于 SP。软件生态就不用多说了，以及试用的时候有个制作动画的 APP 真是让我感觉相见恨晚……总之吧，初步体验非常棒，想等秋季发布会出个全面屏版，处理器应该也能升级到 A11 以上，再去香港入一套。</p><p>好的，笔记本更新计划，Close！</p><p>ipad 购置计划，Start！</p><p>哔哔：「说到底还不是因为穷，有钱的话我全都要……」</p><hr><p><strong>[2018.9.13]</strong></p><p>原本满心期待 Apple 秋季发布会能有「全面屏的 ipad pro」。</p><p>早上一醒来赶紧翻新闻找发布会回顾，发现根本没有关于 ipad 的任何消息…</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/apple%E5%AE%98%E7%BD%91%E9%A6%96%E9%A1%B5%E5%9B%BE.png" alt="大新闻？"></p><p>好吧， 发布的三台手机，一个手表，都不是我的菜。话说，这手机「我也买不起啊」！一台 Max 就能买之前想更新的笔记本的美行顶配版，可能还有富余，可以再买个 Switch（？？？我在想啥呢？？？）。</p><p>看来短期内是不会出了，只能先买现在的「ipad pro 10.5 + apple pencil」来用了。本来是打算周末去香港买一套的，毕竟比内地官网便宜了 <code>1k+</code>，为此下午还把通行证续签了，「一年多次往返」续签一次要<code>￥80</code>呢…</p><p>结果晚上回家，看了看京东，嗯？「ipad pro 10.5 深空灰 256GB + apple pencil」套装一共<code>￥6199</code>。Wtf，现在去香港买这一套也得 <code>6k+</code>，算上路费怎么也得 <code>6k1+</code>，这里居然就贵了一百来块？</p><p>我赶紧上逼乎查一下，京东上这个自营 Apple 店的 ipad 是不是真货……</p><p>好像除了一些「运气不好」碰上问题产品和沙比客服的朋友，没有什么其它问题。Well，翻了几十分钟评论，查了各种「京东上 ipad 为甚么比官网便宜」，终于下定决心剁手。</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/ipad%E8%AE%A2%E5%8D%95%E4%BF%A1%E6%81%AF.png" alt="订单信息"></p><p>嗯…白条分期要手续费的，反正手头不紧，就直接打了个不分期的白条（因为白条有 -￥2 优惠hhh）…</p><hr><p><strong>[2018.9.14]</strong></p><p>京东自营的物流还是够快，今晚就到货了。</p><p>还等什么，赶紧拆包装验货啊！</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/ipad%E5%88%B0%E6%89%8B.jpg" alt="验货！"></p><p>不得不说，Apple 的包装看着很舒服，大概我就喜欢这种「黑白 + 简朴」的风格吧…</p><p>于是花了一晚上摆弄…先检查了硬件各方面，没发现什么明显问题，然后配置了 Apple ID，验了序列号，激活时间也没问题…Well，Well，Well~</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/%E6%9F%A5%E8%AF%A2%E6%BF%80%E6%B4%BB%E6%97%B6%E9%97%B4.png" alt="查询激活时间啦"></p><p>然后安装各种常用应用，什么 QQ 啊、微信啊、逼乎啊、PS 啊……当然还有一些游戏啦。今晚的后半段时间都贡献给了「Ultra Sharp」这款游戏，真的有点小毒…</p><p>（此处盗一下<a href="https://sspai.com/post/45316" target="_blank" rel="noopener">少数派</a>的图…）</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/Ultra%20Sharp.gif" alt="有毒游戏 Ultra Sharp"></p><p>当然这些切割动作，我都是用「Apple pencil」来完成的，跟用手乱划完全不是一个等级的体验！刷刷刷的，提起笔仿佛自己是一个「Pencil Man」…</p><p>各种应用都去体验了一番，我越发地感觉，如果脱离了这支笔，pro 版和普通版其实就没多大区别了。</p><p>目前最中意的应用就是自带的「备忘录」和微软家的「OneNote」，这两个应用对手写笔的支持度可以说是最为典范的了。以后就用它们当「草稿和日记」了hhh，不过笔记的话还是整理好后放到「印象笔记」里吧，毕竟开了会员呢…</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/OneNote.jpeg" alt="OneNote"></p><p>先把玩把玩几天吧~</p><hr><p><strong>[2018.9.16]</strong></p><p>今天台风「山竹」驾临，一整天只能待在家里…啃泡面度日。好在昨晚到 Ole 超市去买了点梅花肉，今天的蛋白质摄入量应该够了的…</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/%E6%99%9A%E9%A4%90.jpeg" alt="我可怜的晚餐…"></p><p>深圳各种惨状，网上已经传播了很多了。想起前两年在厦大的时候经历过的台风「莫兰蒂」，现在的状况似乎好了许多，只要老老实实待在家啃屯粮，玩玩电脑玩玩手机就 OK 了。当然那年的台风是以强台风级别直接硬肛厦门，跟现在的擦边过体验当然是不太一样的。</p><p>记得那天晚上台风登陆，第二天醒来舍友突然告诉我宿舍楼下那一排大铁门都被吹烂了…还停水停电。然而今天台风最强的那个时间段，也就是来过几阵强风，吹得我这栋楼摇摇摆摆而已~</p><p>OK，既然待在家里一天，当然只能继续把玩新入手的 ipad 啦。</p><p>中午大概 11 点「正式起床」后，就开始「电脑 + ipad」的模式开始一天的娱乐生活（说好的学习计划呢？？……嗯，往后稍稍吧您~）。于是开启了「梦幻西游手游」（最近和兄弟们开始回忆起了初中时代的娱乐…），刷任务、抓鬼，大概用到晚上 9 点吧，还剩 17% 的电，看来续航上 10+ 个小时是稳稳的，平常带去公司用的话完全 OJBK。而且我发现，就算还有许多应用没有专门针对 pencil 的特殊用途，但是直接用它来完成通常的点击操作，也比用手指舒服很多（当然手势动作还是得用手啦）。</p><p>接下来就等待我的「套套」到货了，不戴个套的话，感觉拉着它出门不太安全呀hh~话说本来今天已经到了的，不过这天气也没办法派件…</p><hr><p><strong>[2018.9.17]</strong></p><p>早上其实不用去上班的，但是公司方面一直没有消息，于是拖拖拉拉到 10 点出了门，想着实在不行用掉一小时调休也 OK 啦。幸运的是，出门前套子就派送到了，于是我便背上 pad 出门上班去……</p><p>一个很简朴的套子。看起来不怎么防摔啦，不过手感还不错，整体也很轻，带上套子的 ipad 几乎感觉不到有增重~总之正合吾意，价格<code>￥65</code>也算是比较合适了。</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/ipad%E4%BF%9D%E6%8A%A4%E5%A5%97.jpg" alt="保护套"></p><p>台风过后的景象很是熟悉了，满地的残枝落叶，时不时看到几颗拦腰折断的大树，一些建筑物附近堆满了砸碎的玻璃……华侨城这一片，走过某些地方就好像在丛林穿越一样hh。好在今天已经没有风雨，甚至还出了太阳，上班的路途并不艰难。</p><p>背着 pad 走了四十来分钟，感觉比起平常并没有增加多少负担，那么整体的「便携性」满意度 95 分吧，剩下的 5 分还是要期待一下它能够再轻一半的体重，像个手机一样就好了hhhhh~</p><hr><p>好吧，到这里为止，娱乐场景和办公场景基本上都已经体验到了。总的来说，「ipad pro + apple pencil」这个组合甚合我意，不论在「便携性」、「续航力」、「交互体验」，以及「娱乐与轻办公能力」都可以给上我主观的高分（&gt;= 95），反正我觉得这钱嘛，花得值了。</p><p>等下一代面世了，考虑更新一波…嗯…看看钱包，希望它还是不要更新得太快吧~</p><p><strong>[2018.9.20]</strong></p><p><a href="https://9to5mac.com/2018/09/18/ios-12-1-new-ipads-coming-this-year/" target="_blank" rel="noopener">Bad News</a>……</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/BadNews.png" alt="BadNews"></p><p>看来尝鲜是尝不到了…等明年看看各方深度测评，去官方店体验一下，再看看需不需要换新吧…</p><p>其实我觉得现在这个屏幕尺寸也挺好的了，如果没有极大性能、体验的提升，估计也不会太快考虑…</p><p>当然如果鱼想要把那台旧的「ipad air2」换掉的话，我全力兹瓷！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/BuyIpadPro/%E6%B2%A1%E9%92%B1%EF%BC%81.gif&quot; alt=&quot;穷啊~&quot;&gt;&lt;/p&gt;
&lt;p&gt;前段时间一直都在思考，是时候升级一波手头上的移动电子设备了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.StoneAndFish.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="电子设备" scheme="http://blog.StoneAndFish.xyz/tags/%E7%94%B5%E5%AD%90%E8%AE%BE%E5%A4%87/"/>
    
      <category term="奢侈败家" scheme="http://blog.StoneAndFish.xyz/tags/%E5%A5%A2%E4%BE%88%E8%B4%A5%E5%AE%B6/"/>
    
  </entry>
  
  <entry>
    <title>[多读好书]《Effective C++》回顾</title>
    <link href="http://blog.StoneAndFish.xyz/2018/09/13/EffectiveC-1st/"/>
    <id>http://blog.StoneAndFish.xyz/2018/09/13/EffectiveC-1st/</id>
    <published>2018-09-13T12:01:49.000Z</published>
    <updated>2018-09-13T13:08:10.405Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Effectivecpp1st/ola-layflat-notebook-Curve-print-Yellow.png" alt=""></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近两月公司项目少，主要精力都放在 HAL1 到 HAL3 的业务迁移学习中。花了蛮多时间看代码，也试着写了 Open Camera 的流程分析文档，发在了<a href="https://blog.csdn.net/qq_16775897" target="_blank" rel="noopener">我的 CSDN 博客</a>里。</p><p>当然整天只能看看看看看代码，是真的很容易觉得枯燥的。即便是对 Google 和 QCom 的这些比较赏心悦目的代码风格来说，连续看两三个小时也是会开始心不在焉的。于是我搬出了大四时候买的《Effective C++》，开始（在看腻了代码的时候）慢慢啃了起来。<br><a id="more"></a></p><p>刚买这本书的时候，我也是啃过一部分的，但是只是很小一部分，大概只是看到了第二章。那时候学习效率不高，自己的代码实践经验也少之又少，难以体会作者所描述的细节，看书的时候感觉无法提炼出核心内容，仿佛每一个字都是重点一般。</p><p>到了现在，工作一年有余，有了一些实践经验，看过、分析了不少出自 Google、QCom 工程师之手的优秀代码，再来看看书中的内容，果然理解起来顺畅了许多！</p><p>目前第一遍的学习已经接近尾声，学习过程中的各种笔记都记在了纸质的本子上，懒得一一搬到电脑中了…现在一直在尝试将笔记做成思维导图这种类型的样子，感觉这样在阅读时更能够驱动自己把握好细节，然后提取出核心思想。慢慢改进了两三个月，感觉自己的读书效率，听培训、课程时的笔记效率都有非常大的提升。</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Effectivecpp1st/EFC++%E7%AC%94%E8%AE%B0%E6%A0%B7%E4%BE%8B.jpg" alt="笔记样例"></p><p>这一趟阅读下来收获颇丰，但这其中我也发现，还有相当一部分内容依旧难以理解，其原因大致如下：</p><ul><li>一是自身的实践经验还是有所欠缺，覆盖面还不够广；</li><li>二是我对 C++ 的理解还不够深刻，对其知识点的掌握程度还不够高（特别是对 C++11、C++14 等的新增特性知之甚少，也不常使用）。</li></ul><p>所以接下来我需要花一些时间回顾这段时间的阅读内容，看看哪些条目我已经有了比较清晰的理解，还有哪些需要继续深入学习。一方面是要进行总结，尽可能吸收知识，另一方面则是要为以后的第二遍更针对性的阅读指出方向。</p><p><strong>NOTE：个人认为，《Effective C++》是一本工具书，它需要与具体工程紧密结合，而如果脱离工程、实践去阅读它，则会非常浪费时间！在实践的过程中进行阅读、应用，或者在具有一定量的实践经验时再来阅读，方能体现其真正的价值，学到精华之所在。</strong></p><h1 id="温故而知新"><a href="#温故而知新" class="headerlink" title="温故而知新"></a>温故而知新</h1><h2 id="第一章-「让自己习惯-C-」"><a href="#第一章-「让自己习惯-C-」" class="headerlink" title="第一章 「让自己习惯 C++」"></a>第一章 「让自己习惯 C++」</h2><p>本章内容为条款 1~4，作者认为这几个条款是「总有那么一些东西比其它的更基础些」的那一部分，先来回顾回顾它们的标题：</p><ol><li><p><strong>视 C++ 为一个语言联邦。</strong></p><blockquote><p>View C++ as a federation of languages.</p></blockquote></li><li><p><strong>尽量以「const / enum / inline」替换「#define」。</strong></p><blockquote><p>Prefer consts, enums, and inlines to #define.</p></blockquote></li><li><p><strong>尽可能使用「const」。</strong></p><blockquote><p>Use const whenever possible.</p></blockquote></li><li><p><strong>确定对象被使用前已被初始化。</strong></p><blockquote><p>Make sure that objects are initialized before they’re used.</p></blockquote></li></ol><p>C++ 是基于 C 语言而扩展出来的，庞大而混杂 —— 它现在已经是一个<strong>「多重泛型编程语言」</strong>，它同时支持「过程形式」、「面向对象形式」、「函数形式」、「泛型形式」，以及「元编程形式」。这些能力与弹性让 C++ 像一个装满了各式各样的工具的箱子一样，任何问题都能通过使用其中的一部分工具来高效地解决，虽然看起来笨重了点。</p><p>而前人从无数的编程实践中总结出了一些编码守则，这些守则或能使我们更高效地编写代码，或能使我们的代码效率提高数个层级，更甚者两者兼具。但这些守则在 C++ 世界中不是放之四海而皆准的，我们需要在适当的部位运用恰当的工具，于是作者认为，我们需要将 C++ 视为一个<strong>「语言联邦」</strong>，这其中包括四大部分：「C」、「面向对象的 C++」、「STL」，以及「C++ 模板」。</p><p>高效守则需要根据不同的联邦而采用不同的方法。</p><p>相比起 C，C++ 中扩展了 <code>const</code>、<code>inline</code> 等等有意思的关键字。在纯 C 中，我们经常能看到大量的宏定义 <code>#define</code> 语句，用它来定义一些常量有时候确实能让代码更清晰，但用来定义一些函数就常常让人看得脑壳疼。更难受的是，使用它的时候需要非常极其小心翼翼，少一组括号可能就会导致代码在某些神秘的情况下出现 Bug，并且难以追踪调试。而在 C++ 中我们可以用 <code>const</code> 来表明常量，它使我们能够在编译期就发现关于常量的误用问题。<code>inline</code> 则可以用来定义函数，这些函数编译时也会进行相应的展开，与宏定义的效果是一样的，而它还能够提供封装性。</p><p><code>const</code> 关键字有很多用途，当我们需要各种意义上的「不可改变的常量」时，它就能发挥作用。值得注意的是，它不仅在定义变量时能派上用场，在定义函数时也有它的身影。</p><p>在日常撸代码时，我就经常忘记给某些变量进行初始化赋值，于是运行程序时它们获得了一个伪随机值，导致程序流程都乱了套。看来这是程序员们共同的经历，而这一历史直到今天也在不断重演…以至于作者要将它作为「最基本的」几个条款之一，不得不说，<strong>确保初始化真的很很很重要！</strong></p><p>第一章的内容中，应该说并没有什么疑难点。如果说需要进一步学习的话，或许应该关注第二条，好好理解一下各个替换宏的关键字的使用时机吧。</p><h2 id="第二章-「构造、析构、赋值运算」"><a href="#第二章-「构造、析构、赋值运算」" class="headerlink" title="第二章 「构造、析构、赋值运算」"></a>第二章 「构造、析构、赋值运算」</h2><p>本章详细解释了条款 5~12，主要关乎一个类的几个重点组成成分，即构造函数、析构函数、拷贝构造函数和赋值运算符。先回顾回顾它们的标题：</p><ol><li><p><strong>了解 C++ 默默编写并调用了哪些函数。</strong></p><blockquote><p>Know what function C++ silently writes and calls.</p></blockquote></li><li><p><strong>若不想使用编译器自动生成的函数，就应该明确拒绝。</strong></p><blockquote><p>Explicitly disallow the use of compiler-generated functions you do not want.</p></blockquote></li><li><p><strong>为多态基类声明「virtual 析构函数」。</strong></p><blockquote><p>Declare destructors virtual in polymorphic base classes.</p></blockquote></li><li><p><strong>别让异常逃离析构函数。</strong></p><blockquote><p>Prevent exceptions from leaving destructors.</p></blockquote></li><li><p><strong>绝不在构造和析构过程中调用「virtual 函数」。</strong></p><blockquote><p>Never call virtual functions during construction or desturction.</p></blockquote></li><li><p><strong>令「operator=」返回一个「<em>reference to \</em>this*」。</strong></p><blockquote><p>Have assignment operators return a reference to *this.</p></blockquote></li><li><p><strong>在「operator=」中处理「自我赋值」。</strong></p><blockquote><p>Handle assignment to self in operator=.</p></blockquote></li><li><p><strong>复制对象时勿忘其每一个成分。</strong></p><blockquote><p>Copy all parts of an object.</p></blockquote></li></ol><p>当我们编写了一个「空类」，C++ 编译器有可能（当我们的代码中存在相应逻辑）会自动地为它创建默认的「构造函数」、「析构函数」、「拷贝构造函数」和「operator=」。这些默认函数都是 <code>public</code> 且 <code>inline</code> 的。</p><p>有时候这些被偷偷创建出来的函数会扰乱我们的代码逻辑，比如说我们设计的类是「独一无二的」，那就不允许它进行拷贝构造，但默认拷贝构造的存在让逻辑变得混乱。编码时我们就需要考虑到这一层，从而判断是否需要明确拒绝生成默认函数。明确拒绝生成的方法可以是将相应函数声明为 <code>private</code> 且不予实现，也可以是利用 <code>Uncopyable</code> 这样的特殊基类。</p><p>在这些默认函数中，有一个需要特殊注意的就是「析构函数」：</p><ul><li>如果我们设计的是一个具有多态性质的类，或者我们的类中有任意一个 <code>virtual</code> 函数，我们都应该将析构函数声明为 <code>virtual</code>，否则可能会在使用指针、引用时出现诡异的「局部销毁」问题。</li><li>析构函数绝不要抛出异常，这样会导致程序异常中断或者产生不明确的行为。我们可以提供一个普通函数来执行那些可能会抛出异常的操作（从而给调用者一个率先处理异常的机会），而析构中也会调用该函数（当调用者忽略了它）来保证逻辑完整，但在析构中出现的异常，我们要将其吞没或者直接结束程序。</li></ul><p>而「构造函数 / 拷贝构造函数」以及「析构函数」都需要注意的一点，就是不要在它们的内部调用 virtual 函数（如果期望调用到子类的实现的话）。这一点其实很好理解，构造时先构造的父类，彼时子类还未生成，怎能调用子类的实现呢？而析构时则是先销毁了子类，当然也就不能再调用子类的实现了。</p><p>「operator=」就是赋值操作符，关于它也有一些需要注意的点：</p><ul><li>让它的返回值是一个对 <code>this</code> 指针的引用，这样才能确保 <code>x = y = z</code> 这样的语句是正确的。同样的道理也适用于「+」，「-」等其它操作符。</li><li>要考虑到「自我赋值」的情况（「别名」的存在导致这种情况并不少见），确保这一行为的安全性（主要保证其「异常安全性」）。相关的处理技术有「证同测试」、「精心设计的语句顺序」以及「Copy-and-Swap」。</li></ul><p>拷贝构造与赋值运算其实非常类似，都是关于「复制」这一逻辑。它们两通常有着高度一致的逻辑，我们可以将逻辑一致的部分转移到一个新的函数中，但不要让它们两之间存在调用关系。同时在「复制」的时候，我们必须要注意别忘了将类中的「每一个」成分都复制过去，在实践时经常会有「往类中添加成员变量」这种情况，这时候我们就需要确保这些成员的更新在「成员初值列」以及「复制操作」中体现出来。</p><p>总的来说，第二章的内容也是相当地基础，在日常的编码实践和代码阅读中就能很好地体会到这些守则的妙处。要说以后还需要继续深入理解的部分，应该是关于析构与异常的处理，这部分的情况可能在数据库、网络会话之类的场景经常出现，不过我目前都没有怎么接触过。</p><h2 id="第三章-「资源管理」"><a href="#第三章-「资源管理」" class="headerlink" title="第三章 「资源管理」"></a>第三章 「资源管理」</h2><p>到了第三章，我感觉就开始进入了一个进阶部分。资源管理在实际工程中非常重要，资源的分配与回收是 C++ 中的一个大问题，因为我们常常会采用「动态分配内存」的方式来获取资源，如果不及时回收资源，则会造成内存泄露之类的问题。作者总结出了条款 13~17 用以最大限度地避免资源相关问题的出现，先来复习一下，它们分别是什么：</p><ol><li><p><strong>以对象管理资源。</strong></p><blockquote><p>Use objects to manage resource.</p></blockquote></li><li><p><strong>在资源管理类中小心「copy 行为」。</strong></p><blockquote><p>Think carefully about copying behavior in resource-managing classes.</p></blockquote></li><li><p><strong>在资源管理类中提供对原始资源的访问。</strong></p><blockquote><p>Provider access to raw resources in resource-managing classes.</p></blockquote></li><li><p><strong>成对使用「new」和「delete」时要采取相同形式。</strong></p><blockquote><p>Use the same form in corresponding uses of new and delete.</p></blockquote></li><li><p><strong>以独立语句将「new 出来的」对象置入只能指针内。</strong></p><blockquote><p>Store newed objects in smart pointers in standalone statements.</p></blockquote></li></ol><p>在开发应用程序时，我们肯定会编写一大堆函数。而在函数中通过 <code>malloc</code> 或者 <code>new</code> 申请出一块内存，这个场景对于 C++ 开发者来说，真是再熟悉不过了。然而，申请出来的内存要在何时何地释放？初学者常常忽略这个问题，甚至一些经验丰富的开发者有时也会被这个问题困扰。我们通常会在函数的末尾对相关内存进行回收，让其保持与函数相应的生命周期，但经常会出现的问题是「在函数内增减分支、逻辑时，出现新的函数结束点，但此处没有进行资源回收」。</p><p>为了防止资源泄露，前人设计了一众「RAII（Resource Acquisition Is Initialization）类」作为资源管理类。这种对象在构造函数中获得资源，并且在析构函数中进行资源释放。而对象的生命周期和函数保持一致，这就使得资源回收得到一定的保证。C++ 中常用的 RAII 对象有 <code>shared_ptr</code> 以及 <code>auto_ptr</code>，前者通常比较好用，因为它的拷贝行为比较直观（后者的拷贝动作会导致被复制物指向 <code>null</code>）。</p><p>说到 RAII 类对象的拷贝问题，作者也提出了一些需要注意的事项：</p><ul><li>拷贝 RAII 对象必须一并拷贝其资源，所以资源的拷贝行为决定了 RAII 对象的拷贝行为。</li><li>常见的复制行为有：「抑制拷贝」、「采用引用计数法」。也有一些其它技术，但未提及。</li></ul><p>理想状况下，API 不应该对原始资源有访问需求。但是现实往往是残酷的，不是每个 API 设计者都奉行这一理念，所以许多 APIs 还是会要求访问原始资源。于是乎每个 RAII 类都需要提供一个「取得其管理的原始资源」的方法，一般是给出一个 <code>get()</code> 函数获取原始资源指针，在 Android 底层使用强指针类 <code>sp</code> 时经常用到这一方法。需要注意的是，访问原始资源可能会经过显示或隐式的转换，一般来说提供显式转换比较安全，但是提供隐式转换对客户来说就比较方便。</p><p>众所周知，<code>new</code> 与 <code>delete</code> 成对使用，而 <code>malloc</code> 与 <code>free</code> 成对使用。但作者提醒我们，还需要注意的是，「<code>new[]</code> 与 <code>delete[]</code> 成对」，「<code>new</code> 与 <code>delete</code> 成对」，如果 <code>[]</code> 这个符号用混了，可能会导致不明确行为或者资源泄露。</p><p>接下来考虑一个情况：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func(share_ptr(<span class="keyword">new</span> A), f());</span><br></pre></td></tr></table></figure><p>在 C++ 中，执行函数 <code>func</code> 时可能出现的一个顺序：</p><ol><li><code>new A</code></li><li><code>f()</code></li><li><code>share_ptr()</code></li></ol><p>注意第 2 步骤，若其内部会抛出异常，就会导致第 3 步不执行，此情况下资源 A 就会泄露。</p><p>所以我们应该用一个独立语句将 <code>new</code> 出来的对象存储到 RAII 类对象中，就像下面这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;A&gt; pa(<span class="keyword">new</span> A);</span><br><span class="line">func(pa, f());</span><br></pre></td></tr></table></figure><p>从而保证避免那些难以察觉的资源泄露情况。</p><p>本章中介绍的诸多内容，在阅读 Android 底层源码时我就已经有所体会，但还没有多少机会亲自设计、实践。一趟回顾下来，发现理解不够深入的是条款 14，在下一轮阅读中需要特别关注。</p><h2 id="第四章-「设计与声明」"><a href="#第四章-「设计与声明」" class="headerlink" title="第四章 「设计与声明」"></a>第四章 「设计与声明」</h2><p>第四章开始进入更复杂的接口设计部分，这一部分中作者总结出了几个关于优良接口设计的关键点，当然在实战中还有更多需要注意的点，但作者提出的这些也能够让我们大大提高编码效率以及正确性。第 18~25 条款标题如下：</p><ol><li><p><strong>让接口容易被正确使用，不易被误用。</strong></p><blockquote><p>Make interfaces easy to use correctly and hard to user incorrectly.</p></blockquote></li><li><p><strong>设计「class」如同设计「type」。</strong></p><blockquote><p>Treat class design as type design.</p></blockquote></li><li><p><strong>宁以「pass-by-reference-to-const」替换「pass-by-value」。</strong></p><blockquote><p>Prefer pass-by-reference-to-const to pass-by-value.</p></blockquote></li><li><p><strong>必须返回对象时，别妄想返回其「reference」。</strong></p><blockquote><p>Don’t try to return a reference when you must return an object.</p></blockquote></li><li><p><strong>将成员变量声明为「private」。</strong></p><blockquote><p>Declare data members private.</p></blockquote></li><li><p><strong>宁以「non-member 且 non-friend 函数」替换「member 函数」。</strong></p><blockquote><p>Prefer non-member non-friend functions to member functions.</p></blockquote></li><li><p><strong>若所有参数皆需要类型转换，请为此采用「non-member 函数」。</strong></p><blockquote><p>Declare non-member functions when type conversions should apply to all parameters.</p></blockquote></li><li><p><strong>考虑写出一个不抛出异常的「swap 函数」。</strong></p><blockquote><p>Consider support for a non-throwing swap.</p></blockquote></li></ol><p>一个好的接口，它很容易能被正确使用，并且不易被误用。这是接口设计的最基本思想，我们的设计接口工作总是要围绕着它展开。这一思想包括两方面：</p><ul><li>「促进正确使用」的方法，包括接口一致性，以及与内置类型的行为进行兼容。</li><li>「阻止错误用法」则包括建立新类型、限制类型上的操作、束缚对象的值，以及消除客户的资源管理责任。</li></ul><p>设计一个 <code>class</code> 要像设计 <code>type</code> 一样，而设计 <code>type</code> 时，我们通常需要进行以下思考：</p><ul><li>新的 <code>type</code> 应该如何被创建？又如何被销毁？</li><li>对象的初始化与赋值之间有何区别？</li><li>被「pass-by-value」时，会发生什么？</li><li>新 <code>type</code> 的「合法值」是什么？</li><li>新 <code>type</code> 需要配合某个「继承图系」吗？</li><li>什么样的标准函数需要被驳回？</li><li>需要哪些转换？</li><li>对于新 <code>type</code> 来说，怎样的操作符以及函数是合理的？</li><li>「谁」应该取用新 <code>type</code> 的成员？</li><li>什么是「未声明接口」？</li><li>这一新 <code>type</code> 有多么一般化？</li><li>注意注意注意！你真的真的需要这么一个新的 <code>type</code> 吗？？</li></ul><p>在函数传参时，我们需要尽量以「pass-by-reference-to-const」替换「pass-by-value」。这是因为前者比较高效，还能够避免「切割问题」（入参为父类，若传入子类，可能只有父类被构造）。注意了，这一条款不是所有情况下都适用的，比如说对于「内置类型」、「STL 迭代器」以及「函数对象」来说，「pass-by-value」才是恰当的选择。</p><p>说到将成员变量声明为 <code>private</code>，这一守则很是熟悉了。这么做可以赋予客户访问数据的一致性，能够细微划分访问控制，允诺约束条件获得保证，并且给 <code>class</code> 实现者提供充分的弹性。这里面需要注意的一点是，C++ 中还有一个 <code>protected</code> 关键字，但它并不比 <code>private</code> 更具封装性.从「封装」的角度来看，只存在两种权限，即 <code>private</code> 及其它。</p><p><code>std::swap()</code> 函数是个神器，我们在使用「Copy-and-Swap 技术」的时候常常用到它。但它对于我们的自定义类型可能效率不高，这时候我们就应该考虑提供一个自定义类型专用的 <code>swap</code> 函数了，并且这个函数不该抛出异常。我们可以通过对 <code>std::swap()</code> 这一模板函数进行「全特化」来实现我们的客制化需求，但是要注意的是不要往 <code>std</code> 命名空间中加入对它而言全新的东西 —— 我们可以在自己的命名空间进行全特化。</p><p>呼，这一章开始有些难度了，涉及到了我未曾接触的知识，或者从未体会过的守则。说明我的实践水平还是太低了。</p><p>个人没有理解好的条款是：</p><ul><li>必须返回对象时，别返回其「reference」。</li><li>若所有参数皆需类型转换，请为此采用「non-member 函数」。</li></ul><p>这两个条款下次要更深入地理解分析。</p><p>除此之外，条款 19、23 以及 25，感觉都还未吃透，需要再结合实际代码研究研究。</p><h2 id="第五章-「实现」"><a href="#第五章-「实现」" class="headerlink" title="第五章 「实现」"></a>第五章 「实现」</h2><p>上一章是关于「设计」的高效守则，而本章则是进一步到了「实现」的部分。具体实现我们所设计的类、函数时，也有不少需要特别关注的事项，作者将其中一些总结为以下的条款 26~31：</p><ol><li><p><strong>尽可能延后变量定义式出现的时间。</strong></p><blockquote><p>Postpone variable definitions as long as possible.</p></blockquote></li><li><p><strong>尽量少做转型动作。</strong></p><blockquote><p>Minimize casting.</p></blockquote></li><li><p><strong>避免返回「指向对象内部成分的 handle」。</strong></p><blockquote><p>Avoid returning “handles” to object internals.</p></blockquote></li><li><p><strong>为「异常安全」而努力是值得的。</strong></p><blockquote><p>Strive for exception-safe code.</p></blockquote></li><li><p><strong>透彻了解「inlining」的里里外外。</strong></p><blockquote><p>Understand the ins and outs of inlining.</p></blockquote></li><li><p><strong>将文件间的编译一寸关系降至最低。</strong></p><blockquote><p>Minimize compilation dependencies between files.</p></blockquote></li></ol><p>尽可能延后变量定义式出现的时间，直到能够给它初值实参为止。从而避免构造出不必要的对象，以及无意义的默认构造。这样做也能增加程序的清晰度并改善效率。这一守则其实一直都在使用，很好理解。不过文中有一个需要稍微注意的情况就是「循环赋值」，定义式的位置决定了会出现「1 次构造 + 1 次析构 + n 次赋值」，还是「n 次构造 + n 次赋值」，这需要根据实际情况分析效率，再选择最佳的位置。</p><p>转型动作在大型工程中几乎是必定会出现的。不过我目前使用的最多的还是 C-style 的转型…就是这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">float</span> b = (<span class="keyword">float</span>) a;</span><br></pre></td></tr></table></figure><p>这已经是「旧式转型」了，而「新式转型」有下面这四种：</p><ol><li><code>const_cast</code>：常量性转除。</li><li><code>dynamic_cast</code>：安全向下转型。</li><li><code>reinterpret_cast</code>：低级转型（与编译器有关）。</li><li><code>static_cast</code>：强迫隐式转换。</li></ol><p>需要注意的是，我们应该尽量避免任何转型的出现，特别是在「注重效率」的代码中尽量避免 <code>dynamic_cast</code>。如果转型动作是必要的，我们可以将其隐于某个函数背后，而客户可以调用这一函数并且不用自己手动转型。</p><p>由于「新式转型」比较容易辨识，所以我们的转型动作应尽量用它完成。</p><p>我们常常通过获取一个「handle（句柄、号码牌）」来保持对某个对象的使用权，或者说是调用途径。一般来说「handle」是一个引用、指针或者迭代器。但使用它时有可能会导致「降低封装性」，因为它可能是「代表对象内部数据」的。并且有这么一种情况，获取「handle」结束时，对象就被析构了（临时对象），此时就会出现「虚吊句柄」的问题。所以我们要尽量避免返回指向对象内部的「handle」，以增强封装性，降低「虚吊句柄」发生的可能性。</p><p>「inline 函数」不论怎么看，都像是个普通的函数。但是调用它们并不需要「调用函数」所产生的开销，这一点使得它远远优于利用宏来定义的函数。不过由于它也向宏一样在编译器展开代码，这导致目标代码可能会出现体积膨胀的情况，如果过于膨胀就有可能导致额外的「换页行为」，并且会降低「Cache 击中率」。所以我们需要在合适的情况、恰当的位置使用它。一般我们仅将其用于小型的、被频繁调用的函数。</p><p>对于诸如 Android 系统这样庞大的工程来说，将文件间的编译依存关系降至最低这一守则极为重要。平常完全重新编译一个模块都要花费二三十分钟，更别说整机编译的两三个小时，如果不把控好编译依存关系，一个小的文件改动要引发整个模块的重新编译，那将会极大地浪费时间。关于该守则，有一个一般化的构想是：相依于声明式，不要相依于定义式。基于此而出现的两个技术手段分别是「Handle class」与「Interface class」。以及对于程序库的头文件来说，它应以「完全且仅有声明式」的形式存在，这一点对于涉及模板的头文件也适用。</p><p>这一章依旧具有一定的难度，特别是：</p><ul><li>为「异常安全」而努力是值得的。这一条我目前还难以理解，因为鲜少接触相关实践案例。</li><li>将文件编译依存关系降至最低。虽然说从书面并且结合日常接触 Android 系统底层编译，让我有了一定的理解，但是我很少能改动或者新增一些头文件或者 <code>makefile</code>，所以理解还是不够深刻，实践时也不知道该从何下手。</li></ul><p>其它的条款基本上没什么问题，就是关于转型的部分，我还很少使用「新式转型」，这个还需要多动手练习练习。</p><h2 id="第六章-「继承与面向对象设计」"><a href="#第六章-「继承与面向对象设计」" class="headerlink" title="第六章 「继承与面向对象设计」"></a>第六章 「继承与面向对象设计」</h2><p>第六章的内容则主要是涉及到了 C++ 的核心，即「面向对象编程（OOP）」部分。作者总结了关于 C++ 的 OOP 中一些常见的疑问，并给出自己的解答，同时也好好地解释了一番 C++ 各种不同特性的真正意义。</p><p>回顾一下条款 32~40 的标题：</p><ol><li><p><strong>确定你的「public 继承」建模出「is-a 关系」。</strong></p><blockquote><p>Make sure public inheritance models “is-a”.</p></blockquote></li><li><p><strong>避免遮掩继承而来的名称。</strong></p><blockquote><p>Avoid hiding inherited names.</p></blockquote></li><li><p><strong>区分接口继承和实现继承。</strong></p><blockquote><p>Differentiate between inheritance of interface and inheritance of implementation.</p></blockquote></li><li><p><strong>考虑「virtual 函数」以外的其它选择。</strong></p><blockquote><p>Consider alternatives to virtual functions.</p></blockquote></li><li><p><strong>绝不重新定义继承而来的「non-virtual 函数」。</strong></p><blockquote><p>Never redefine an inherited non-virtual function.</p></blockquote></li><li><p><strong>绝不重新定义继承而来的缺省参数值。</strong></p><blockquote><p>Never redefine a function’s inherited default parameter value.</p></blockquote></li><li><p><strong>通过「复合」建模出「has-a 关系」或「根据某物实现出」。</strong></p><blockquote><p>Model “has-a” or “is-implemented-in-terms-of” through composition.</p></blockquote></li><li><p><strong>明智而审慎地使用「private 继承」。</strong></p><blockquote><p>Use private inheritance judiciously.</p></blockquote></li><li><p><strong>明智而审慎地使用「多重继承」。</strong></p><blockquote><p>Use multiple inheritance judiciously.</p></blockquote></li></ol><p>「public 继承」代表着什么？没错，是「is-a」关系，B 继承了 A，则「B 是一个 A」就应该成立，而适用于 A 的每一件事也都要适用于 B。<br>我们在设计继承关系时一定要考虑好这一点，因为某些常识性的东西可能会让我们混淆这一概念。比如说对于「鸟类」，我们通常认为「鸟会飞」，如果「鸟类」作为基类，则继承于此的所有类都应该有「飞」这一动作。但是问题来了，现实中「企鹅」也属于鸟类，但它「不会飞」！所以如果需要设计一个「企鹅类」，则它不应该继承于「鸟类」。</p><p>「变量遮掩」问题不止在继承关系中会出现。最早接触到这一问题应该是与「作用域」有关：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x; <span class="comment">// Global var</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x; <span class="comment">// Local var</span></span><br><span class="line">    x = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码很典型，<code>func</code> 函数中定义的局部变量 <code>x</code> 在「函数内部」覆盖住了全局变量 <code>x</code>，如果 <code>x = a</code> 这一语句原本是想对全局的 <code>x</code> 进行操作，那么这段代码就无法达到预期效果了。这说明了一点：我们使用变量时，是从局部开始，往全局方向进行查找的。</p><p>而在类继承关系中，子类的函数、变量名称与父类中相同，则会造成遮掩。此时我们可能就无法调用父类的 <code>public</code> 函数，这与预期不符。所以在设计与实现子类时一定要注意，不要对父类造成遮掩。如果已经造成遮掩，则需要采用「using 声明式」或「转交函数」来让其重见天日。</p><p>作者分析，<code>public</code> 继承概念是由两部分组成：「函数接口继承」与「函数实现继承」，它们是不一样的。</p><p>那么这两种继承是怎么回事？可以通过这几种函数大致了解其含义：</p><ul><li>父类中声明了的「纯虚函数」，仅仅具体指定了接口继承（父类不一定有实现），子类必须独立实现这一接口。</li><li>「虚函数」则指定了接口继承以及缺省的实现继承（父类的实现）。</li><li>「非虚函数」具体指定了接口继承，并且还强制性进行了实现继承。</li></ul><p>说到「非虚函数」的继承，我们应该要注意一点，即绝不能在子类重新定义它。因为有如下的情况：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    mf();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    mf();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    D x;</span><br><span class="line">    B* pB = &amp;x;</span><br><span class="line">    D* pD = &amp;x;</span><br><span class="line">    </span><br><span class="line">    pB-&gt;mf(); <span class="comment">// Call B::mf()</span></span><br><span class="line">    pD-&gt;mf(); <span class="comment">// Call D::mf()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，两个对 <code>mf()</code> 的调用对应到了不同的函数中。这不是我们预期的结果，至少在多态的情况下。</p><p>而对于「虚函数」，我们绝不能在子类重定义继承而来的缺省参数值。因为「虚函数」是「动态绑定」的，而缺省参数却是「静态绑定」的，这会导致什么情况呢？我在父类 A 中这样声明了虚函数 <code>darw(Color c = Color::red);</code>，然后再在子类 B 中声明 <code>darw(Color c = Color::green);</code>，当我们用一个 A 类指针指向一个 B 对象，再调用 <code>darw</code> 函数时，就会出现「调用了 B 类的具体实现，却使用了 A 类的默认参数」这种超出预期的效果。</p><p>「复合关系」与继承是完全不同的概念。「复合」又称为聚合、内嵌、分层、内含等，这是一种「has-a 关系」（在应用域），或者「根据某物实现出」（在实现域）。一个简单的例子可以解释这一关系：考虑需要通过 <code>std::list</code> 来实现一个 <code>Set</code> 类。我们不能通过继承 <code>std::list</code> 来实现，因为 <code>Set</code> 不是一个 <code>List</code>。此时我们就可以在 <code>Set</code> 内部设定一个 <code>std::list</code> 类型的成员，通过它来实现 <code>Set</code> 的种种操作，这就是「has-a 关系」。</p><p>使用「private 继承」时需要小心谨慎。与复合不同，它有着「对象尺寸最小化」的效果。一般来说它的级别比复合低，但是如果子类需要访问父类的 <code>protected</code> 成员，或者需要重定义继承而来的虚函数时，使用它也是合理的。</p><p>同样地，「多重继承」能力在使用时也是需要非常谨慎的。它可能会导致新的歧义，以及对「virtual 继承」的需要，而「virtual 继承」会增加大小、速度、初始化及赋值复杂度等的成本。最适合使用「virtual 继承」的情况则是该基类不带有任何数据时。虽然「多重继承」比较复杂且会带来不少麻烦，但它确实有其正当用途，比如「public 继承某接口类」的同时还要「private 继承某个协助实现的类」的情况。</p><p>这一章看得我脑子有点乱，「继承」是一个非常强大的特性，但是它经常给我带来代码阅读与理解上的困扰。</p><p>觉得比较难以理解消化的条款就是：</p><ul><li>考虑「virtual 函数」以外的选择。</li><li>明智而审慎地使用「private 继承」。</li><li>明智而审慎地使用「多重继承」。</li></ul><p>之后需要继续结合实践，深入研究体会。</p><h2 id="第七章-「模板与泛型编程」"><a href="#第七章-「模板与泛型编程」" class="headerlink" title="第七章 「模板与泛型编程」"></a>第七章 「模板与泛型编程」</h2><p>第七章进入了 C++ 模板的领域。一开始，模板的出现是为了让我们得以建立「类型安全」的容器，比如 <code>vector</code>、<code>list</code> 以及 <code>map</code>。后来人们渐渐发现模板具有非常强大的能力，甚至它本身就是一部完整的「图灵机」（可以被用来计算任何可计算的值）。模板的应用非常宽广，但作者总结出了一组支撑起所有模板编程的核心观念：</p><ol><li><p><strong>了解隐式接口和编译期多态。</strong></p><blockquote><p>Understand implicit interfaces and compile-time polymorphism.</p></blockquote></li><li><p><strong>了解「typename」的双重意义。</strong></p><blockquote><p>Understand the two meanings of typename.</p></blockquote></li><li><p><strong>学习处理「模板化基类」内的名称。</strong></p><blockquote><p>Know how to access names in templatized base classes.</p></blockquote></li><li><p><strong>将与参数无关的代码从模板中抽离。</strong></p><blockquote><p>Factor parameter-independent code out of templates.</p></blockquote></li><li><p><strong>运用成员函数模板接受所有兼容类型。</strong></p><blockquote><p>Use member function templates to accept “all compatible types”.</p></blockquote></li><li><p><strong>需要类型转换时请为模板定义非成员函数。</strong></p><blockquote><p>Define non-member functions inside templates when type conversion are desired.</p></blockquote></li><li><p><strong>请使用「traits classes」表现类型信息。</strong></p><blockquote><p>Use traits classes for information about types.</p></blockquote></li><li><p><strong>认识「template 元编程」。</strong></p><blockquote><p>Be aware of template metaprogramming.</p></blockquote></li></ol><p>关于隐式接口与编译期多态，可以通过对比「模板」与「类」来大致地理解：</p><ul><li>对于「模板」参数而言，接口是隐式的，它奠基于有效表达式。而多态则是通过「模板具现化」与「函数重载解析」发生于编译期。</li><li>对于「类」来说，接口是显式的，它以函数签名为中心。其多态是通过「虚函数」发生于运行期。</li></ul><p><code>typename</code> 具有双重意义。首先要知道的是，模板参数声明中的 <code>class</code> 与 <code>typename</code> 是一样的，可以随意互换。其次，对于嵌套从属类型名称，比如有这么个语句 <code>Base&lt;T&gt;::Nested temp;</code>，编译器并不知道这是一个类，所以我们需要修改语句为 <code>typename Base&lt;T&gt;Nested temp;</code>，这样才能通过编译。不过注意，在「成员初值列」与「基类列」中不能使用 <code>typename</code>。</p><p>将与模板参数无关的代码从模板中抽离，否则可能会产生我们所不愿看到的代码膨胀问题：</p><ul><li>对于「非类型模板参数」造成的膨胀往往可以消除。其方法是以函数参数或者类成员变量来替换这一模板参数。</li><li>对于「类型模板参数」造成的代码膨胀通常可以降低其影响。其方法是让带有完全相同二进制表述的具现类型来共享实现码。</li></ul><p>运用成员函数模板接受所有兼容的类型，一个关键示例是「泛化拷贝构造函数」：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;U&gt;</span><br><span class="line">    SmartPtr(<span class="keyword">const</span> SmartPtr&lt;U&gt;&amp; other);</span><br><span class="line">    SmartPtr(<span class="keyword">const</span> SmartPtr&amp; other); <span class="comment">// Note</span></span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样就能实现对各种类型的兼容，但需要注意的是，我们声明这样的泛化成员函数时，我们还需要同时声明一个正常的相应函数。</p><p>「Traits」允许你在编译期间取得某些「类型相关信息」。它是一种技术，也是一个 C++ 程序员共同遵守的协议。将其与「重载技术」进行整合后，「Traits class」就有可能在编译期对类型执行 <code>if.else.</code> 测试。</p><p>最后作者提到了「模板元编程」技术，说实话，没怎么看懂……</p><p>阅读这一章搞得我脑壳疼，因为本身就太少实践模板技术，平常看代码时也没有深入分析模板的妙处，因为它简单的地方太容易理解，而难的地方又实在是很难……总之我是觉得，模板技术固然强大，但它大大降低了代码的可读性……</p><p>难以理解的条款太多了：</p><ul><li>学习处理「模板化基类」的名称。</li><li>需要类型转换时请为模板定义非成员函数。</li><li>请使用「Traits class」表现类型信息。</li><li>认识「模板元编程」。</li></ul><p>看来下一阶段要好好攻克模板技术了。</p><h2 id="第八章-「定制-new-和-delete」"><a href="#第八章-「定制-new-和-delete」" class="headerlink" title="第八章 「定制 new 和 delete」"></a>第八章 「定制 new 和 delete」</h2><p>第八章就不用说了，并没有看，因为目前完全没碰到过这些情况……</p><ol><li><p><strong>了解「new-handler」的行为。</strong></p><blockquote><p>Understand the behavior of the new-handler.</p></blockquote></li><li><p><strong>了解「new 与 delete」的合理替换时机。</strong></p><blockquote><p>Understand when it makes sense to replace new and delete.</p></blockquote></li><li><p><strong>编写「new 和 delete」时需固守常规。</strong></p><blockquote><p>Adhere to convention when writing new and delete.</p></blockquote></li><li><p><strong>写了「placement new」也要写「placement delete」。</strong></p><blockquote><p>Write placement delete if you write placement new.</p></blockquote></li></ol><h2 id="第九章-「杂项讨论」"><a href="#第九章-「杂项讨论」" class="headerlink" title="第九章 「杂项讨论」"></a>第九章 「杂项讨论」</h2><p>第九章也没有详细看，TR1 和 Boost 基本上没有接触，虽然作者表示用起来会很高效。毕竟现在都只是在做 Android 系统底层的开发，这两个东西也没法用啊…</p><ol><li><p><strong>不要轻忽编译器的警告。</strong></p><blockquote><p>Pay attention to compiler warnings.</p></blockquote></li><li><p><strong>让自己熟悉包括「TR1」在内的标准程序库。</strong></p><blockquote><p>Familiarize yourself with the standard library, including TR1.</p></blockquote></li><li><p><strong>让自己熟悉「Boost」。</strong></p><blockquote><p>Familiarize yourself with Boost.</p></blockquote></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过回顾这些内容，我发现我对这本书的了解可能还不到六成。</p><p>抛开暂时不管的最后两章。其它章节中，只有前三章做到了每一条目都能好好理解掌握，之后的几章就开始逐渐遇到困难。特别是到了模板的部分，啃起来就像是在啃石头一样。</p><p>功力尚浅，功力尚浅啊！</p><p>果然工作这一年来，我写的代码还是太少了。虽说业务上都是在改 Android 底层的源码，或者在这上面加些代码，能亲自实践的面太窄，根本没有体会过一整套软件系统的构建过程。但是这些业务不触及的部分，我在业余时间也没有好好钻研，我个人的懒惰问题也是不容忽视的啊。</p><p>接下来一定要好好针对弱项补课，希望在下一次阅读这本书的时候，现在难理解的这些项都能被攻克。</p><h2 id="最后叨比几句"><a href="#最后叨比几句" class="headerlink" title="最后叨比几句"></a>最后叨比几句</h2><p>最近一直在想，为什么当时签约时发现到公司规定本届应届生一年半内不给涨工资，而且开价也不高，但我还是来了。</p><p>因为我 TM 没得选啊！能力太差，菜是原罪！</p><p>「当你抱怨你的待遇和环境不好时，先想想你为什么会在这里。」</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/Effectivecpp1st/ola-layflat-notebook-Curve-print-Yellow.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;近两月公司项目少，主要精力都放在 HAL1 到 HAL3 的业务迁移学习中。花了蛮多时间看代码，也试着写了 Open Camera 的流程分析文档，发在了&lt;a href=&quot;https://blog.csdn.net/qq_16775897&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的 CSDN 博客&lt;/a&gt;里。&lt;/p&gt;
&lt;p&gt;当然整天只能看看看看看代码，是真的很容易觉得枯燥的。即便是对 Google 和 QCom 的这些比较赏心悦目的代码风格来说，连续看两三个小时也是会开始心不在焉的。于是我搬出了大四时候买的《Effective C++》，开始（在看腻了代码的时候）慢慢啃了起来。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://blog.StoneAndFish.xyz/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="编程技术" scheme="http://blog.StoneAndFish.xyz/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
      <category term="温故知新" scheme="http://blog.StoneAndFish.xyz/tags/%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>[翻译社第七期] 网络安全的技术应用</title>
    <link href="http://blog.StoneAndFish.xyz/2018/09/02/Translation7th/"/>
    <id>http://blog.StoneAndFish.xyz/2018/09/02/Translation7th/</id>
    <published>2018-09-02T08:19:00.000Z</published>
    <updated>2018-09-02T08:20:04.757Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_1.png" alt=""></p><h1 id="本期成果"><a href="#本期成果" class="headerlink" title="本期成果"></a>本期成果</h1><ul><li><a href="https://cloud.tencent.com/developer/article/1161345" target="_blank" rel="noopener">给数据科学家的十条数据安全建议</a>（专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1161341" target="_blank" rel="noopener">SSH 尝试攻击是什么样子的</a>（专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1165213" target="_blank" rel="noopener">量子跃迁：量子计算对加密技术来说意味着什么？</a>（专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1180081" target="_blank" rel="noopener">做这 12 件简单的小事，能让你更安全地上网</a>（个人专栏）<a id="more"></a></li></ul><h1 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h1><p>（本期划水…）</p><h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><ul><li><strong>Authenticator app：</strong>身份验证器应用。</li><li><strong>Two-factor authentication：</strong>双因子身份验证。</li><li><strong>PII（Personally-identifiable information）：</strong>个人身份信息。</li><li><strong>De-identified：</strong>去识别化。</li><li><strong>Honeypot：</strong>蜜罐。</li><li><strong>SSH Hacking Attempt：</strong>SSH 攻击。</li><li><strong>Worm：</strong>蠕虫病毒。</li><li><strong>Malware：</strong>恶意软件。</li><li><strong>Quantum leap：</strong>量子跃迁。</li><li><strong>Quantum superposition：</strong>量子叠加。</li><li><strong>Qubit：</strong>量子位。</li><li><strong>Entangled states：</strong>纠缠态。</li><li><strong>Asymmetric key：</strong>非对称密钥。</li><li><strong>Public key：</strong>公钥。</li><li><strong>Supercomputer：</strong>超级计算机。</li><li><strong>Post-quantum cryptography：</strong>后量子密码技术。</li><li><strong>Ransomware：</strong>勒索软件。</li><li><strong>Antivirus：</strong>杀毒软件。</li><li><strong>Trojan horse：</strong>特洛伊木马。</li><li><strong>Denial of service attack：</strong>DOS，拒绝服务攻击。</li><li><strong>Potentially Unwanted Applications：</strong>潜在不需要的应用程序。</li><li><strong>Alphanumeric Code：</strong>字母数字码。</li></ul><h2 id="短语翻译"><a href="#短语翻译" class="headerlink" title="短语翻译"></a>短语翻译</h2><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>a handful of</td><td>一小撮；极少数</td></tr><tr><td>keep track of</td><td>记录；与…保持联系</td></tr><tr><td>mess around with</td><td>胡乱使用</td></tr><tr><td>do your research</td><td>做好调查</td></tr><tr><td>need to know basis</td><td>“需要知道” 的基础上</td></tr><tr><td>plenty of</td><td>大量，许多</td></tr><tr><td>Along the same lines</td><td>同时；沿着相同路线</td></tr><tr><td>over-matched</td><td>劲敌，高手</td></tr><tr><td>Ironically</td><td>具有讽刺意味的是</td></tr><tr><td>fend off</td><td>挡住，避开</td></tr><tr><td>flip through</td><td>草草翻阅；浏览</td></tr></tbody></table><h2 id="长句翻译"><a href="#长句翻译" class="headerlink" title="长句翻译"></a>长句翻译</h2><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>Queue the honeypot concept. A “honeypot” is an intentionally vulnerable “thing” that can be used to study malicious traffic and activity on a network. This “thing” can be anything, a single port on a server, an HTML element on a webpage, or even a network with multiple servers. Once it’s set up, any malicious traffic towards the server can be studied and turned into actionable intel.</td><td>先来梳理一下蜜罐（Honeypot）的概念。“蜜罐” 是一种故意置于易受攻击状态的 “东西”，它可用于研究网络上的恶意流量与活动。这个 “东西” 可以是任何事物 —— 服务器上的单个端口，网页上的某个 HTML 元素，甚至是具有多个服务器的网络。一旦设置完成，任何针对服务器的恶意流量都可以被研究分析，并转变为有用的信息。</td></tr><tr><td>This Raspberry Pi Botnet malware did quite quite a few other things and I plan to get around to an entire post dedicated to dissecting that.</td><td>这个 Raspberry Pi Botnet 恶意软件做了很多其他的事情，我打算在一个完整的帖子里把它剖析出来。</td></tr><tr><td>What do IBM, Google, Lockheed Martin, the National Security Agency, Microsoft, AT&amp;T, Airbus, and Fujitsu have in common? They all want a piece of the quantum cake.</td><td>IBM，谷歌，洛克希德马丁（美国航空航天公司），美国国家安全局，微软，AT＆T，空客和富士通，它们之间有什么共同之处？他们都想从量子领域中分得一块蛋糕。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;本期成果&quot;&gt;&lt;a href=&quot;#本期成果&quot; class=&quot;headerlink&quot; title=&quot;本期成果&quot;&gt;&lt;/a&gt;本期成果&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1161345&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;给数据科学家的十条数据安全建议&lt;/a&gt;（专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1161341&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SSH 尝试攻击是什么样子的&lt;/a&gt;（专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1165213&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;量子跃迁：量子计算对加密技术来说意味着什么？&lt;/a&gt;（专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1180081&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;做这 12 件简单的小事，能让你更安全地上网&lt;/a&gt;（个人专栏）&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://blog.StoneAndFish.xyz/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Translation" scheme="http://blog.StoneAndFish.xyz/tags/Translation/"/>
    
      <category term="技术文档翻译" scheme="http://blog.StoneAndFish.xyz/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    
      <category term="腾讯云+翻译社" scheme="http://blog.StoneAndFish.xyz/tags/%E8%85%BE%E8%AE%AF%E4%BA%91-%E7%BF%BB%E8%AF%91%E7%A4%BE/"/>
    
  </entry>
  
  <entry>
    <title>[翻译社第六期] 深入了解微服务技术</title>
    <link href="http://blog.StoneAndFish.xyz/2018/07/19/Translation6th/"/>
    <id>http://blog.StoneAndFish.xyz/2018/07/19/Translation6th/</id>
    <published>2018-07-19T15:15:37.000Z</published>
    <updated>2018-07-19T15:20:19.159Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_1.png" alt=""></p><h1 id="本期成果"><a href="#本期成果" class="headerlink" title="本期成果"></a>本期成果</h1><ol><li><a href="https://cloud.tencent.com/developer/article/1149129" target="_blank" rel="noopener">服务集成时需避免的两个错误</a>（专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1151932" target="_blank" rel="noopener">微服务 —— 你需要付出什么？又能有何收获？</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1153413" target="_blank" rel="noopener">使用 Micro 构建弹性与容错的应用程序</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1156563" target="_blank" rel="noopener">微服务编排</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1156567" target="_blank" rel="noopener">微服务原则：去中心化数据管理</a>（专栏采纳）<a id="more"></a></li></ol><h1 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h1><ul><li>这一期的内容，说实话吧，不是很感兴趣，而且对这方面也不熟悉，所以翻译的时候挺容易分心的。最终只有两篇专栏采纳，不过这次长篇翻译的权重提高了，不像之前那样无论多长的文章都只能得到同样的积分…于是这次拿到的积分和之前几期基本一致…</li><li>由于对内容没什么兴趣，这次主要就是练一练翻译的熟练度而已，也没记下太多笔记。收获挺少的，希望下一期能来个我比较熟悉或者感兴趣的主题……</li><li>以及，之前每一期的礼物，已经堆满衣柜顶了…要想办法处理出去了hh。</li></ul><h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><ul><li><strong>Store and forward design pattern：</strong>存储转发设计模式。</li><li><strong>Synchronous messaging：</strong>同步消息传递。</li><li><strong>Linked services pattern：</strong>链接服务模式。</li><li><strong>Acknowledgement pattern：</strong>应答模式。</li><li><strong>Service Oriented Architecture（SOA）：</strong>面向服务架构。</li><li><strong>Monolithic application design：</strong>整体应用程序设计。</li><li><strong>Heterogeneous design：</strong>异构设计。</li><li><strong>Service chaining：</strong>服务链。</li><li><strong>Enterprise Service Bus（ESB）：</strong>企业服务总线。</li><li><strong>Order Processing Service（OPS）：</strong>订单处理服务。</li><li><strong>Order Delivery Service（ODS）：</strong>订单交付服务。</li><li><strong>User Authorization Service（USA）：</strong>用户授权服务。</li><li><strong>Transactions Per Second（TPS）：</strong>每秒事务数。</li><li><strong>Message Broker（MB）：</strong>消息代理。</li><li><strong>fire-and-forget pattern：</strong>即发即弃模式。</li><li><strong>Bounded context：</strong>有界上下文。</li><li><strong>Autonomous unit：</strong>自治单元。</li><li><strong>Cohesion：</strong>内聚性。</li><li><strong>Technology agnostic：</strong>技术无关的。</li><li><strong>Organizational Culture：</strong>企业文化。</li><li><strong>Resilience：</strong>弹性。</li><li><strong>Eventual Consistency：</strong>最终一致性。</li><li><strong>Two-phase commit：</strong>两阶段提交。</li><li><strong>Polyglot Persistence：</strong>混合持久化。</li></ul><h2 id="短语翻译"><a href="#短语翻译" class="headerlink" title="短语翻译"></a>短语翻译</h2><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>Most often</td><td>很多时候</td></tr><tr><td>Let’s say</td><td>假设</td></tr><tr><td>As discussed earlier</td><td>如前所述</td></tr><tr><td>As a matter of fact</td><td>事实上</td></tr><tr><td>dozens of</td><td>许多；几十个</td></tr><tr><td>so-called</td><td>所谓的；号称的</td></tr><tr><td>read up on</td><td>仔细研究；熟读</td></tr><tr><td>It’s no secret that</td><td>大家都懂</td></tr><tr><td>if not more</td><td>不亚于</td></tr></tbody></table><h2 id="长句翻译"><a href="#长句翻译" class="headerlink" title="长句翻译"></a>长句翻译</h2><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>With the emergence of Service Oriented Architecture (SOA), businesses rapidly started transcending from their monolithic application designs into heterogeneous designs by decomposing their business functionality into multiple services .</td><td>随着面向服务架构（SOA，Service Oriented Architecture）的出现，企业通过将业务功能分解为多重服务，它们迅速地从整体应用程序设计（Monolithic application design）过渡到了异构设计（Heterogeneous design）。</td></tr><tr><td>If the ESB routes the requests to OPS or ODS at the same TPS rate it receives the requests and if the services cannot withstand that rate these service would be overloaded and would fail to deliver the responses.</td><td>如果 ESB 以相同的 TPS 速率将请求路由到 OPS 或 ODS，此时若服务不能承受该速率，那么这些服务将超载，并且无法交付响应。</td></tr><tr><td>MB will send a publisher acknowledgment to the callers when it successfully accepts a message to the queue and will delete a message from the queue when an acknowledgement is being sent by the consumer who receives it.</td><td>当 MB 成功地接收消息到队列时，它会向调用者发送一个发布者确认消息，当接收到该消息的消费者发送一个确认消息时，MB 将从队列中删除一条消息。</td></tr><tr><td>However, creating this logical distinction sets the platform up for easy physical scaling in the future. If this platform gains massive adoption the database administrator can split the three logical databases into three databases served by three different physical servers.</td><td>但是，创建这种逻辑区别将为后续的物理扩展奠定基础。如果此平台得到大量采用，数据库管理员可以将三个逻辑数据库分割为由三个不同物理服务器进行服务的数据库。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;本期成果&quot;&gt;&lt;a href=&quot;#本期成果&quot; class=&quot;headerlink&quot; title=&quot;本期成果&quot;&gt;&lt;/a&gt;本期成果&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1149129&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;服务集成时需避免的两个错误&lt;/a&gt;（专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1151932&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微服务 —— 你需要付出什么？又能有何收获？&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1153413&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用 Micro 构建弹性与容错的应用程序&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1156563&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微服务编排&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1156567&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微服务原则：去中心化数据管理&lt;/a&gt;（专栏采纳）&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://blog.StoneAndFish.xyz/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Translation" scheme="http://blog.StoneAndFish.xyz/tags/Translation/"/>
    
      <category term="技术文档翻译" scheme="http://blog.StoneAndFish.xyz/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    
      <category term="腾讯云+翻译社" scheme="http://blog.StoneAndFish.xyz/tags/%E8%85%BE%E8%AE%AF%E4%BA%91-%E7%BF%BB%E8%AF%91%E7%A4%BE/"/>
    
  </entry>
  
  <entry>
    <title>[翻译社第五期] 大数据的发展前景及行业应用</title>
    <link href="http://blog.StoneAndFish.xyz/2018/06/07/Translation5th/"/>
    <id>http://blog.StoneAndFish.xyz/2018/06/07/Translation5th/</id>
    <published>2018-06-07T15:09:10.000Z</published>
    <updated>2018-06-07T15:11:37.277Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_1.png" alt=""></p><h1 id="本期成果"><a href="#本期成果" class="headerlink" title="本期成果"></a>本期成果</h1><ol><li><a href="https://cloud.tencent.com/developer/article/1131358" target="_blank" rel="noopener">大数据对你来说意味着什么？</a>（大数据专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1131771" target="_blank" rel="noopener">数据可视化的艺术</a>（大数据专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1133374" target="_blank" rel="noopener">快速数据管道设计：通过交换表更新各个事件决策</a>（大数据专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1136585" target="_blank" rel="noopener">概率数据结构简介</a>（大数据专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1140857" target="_blank" rel="noopener">用于物联网的大数据参考架构</a>（个人专栏）<a id="more"></a></li></ol><h1 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h1><ul><li>五月六月，陷入了无尽的 Bug 循环中。没办法，项目一来，Bug 就堆积成山，组里人又少，大家都忙不过来。所幸我跟的那些问题，有很多是同一原因导致，还有一些是正常逻辑下的情况，被误认为是 Bug。业余时间还算是挺充足的，于是这一期的翻译按照计划，完成了五篇，其中四篇得到官方采纳。</li><li>这一期收获颇丰。这主要体现在其中两篇采纳的文章中，这两篇文章正中我之下怀：<ul><li>一篇是数据可视化艺术，基于网页性能分析案例来简介了各种常用图表的应用范围，正好最近要把业务上算法相关的性能分析以可视化形式展示出来，正要寻找一些资料的时候，这篇文章适时出现在了我的眼前；</li><li>另一篇就是概率数据结构简介，我看到 Bloom Filter 这个名称就倍感亲切，回想当年第一次给老师打工的时候，写了个爬虫（因为拿到了 1k RMB 所以记忆犹新…），就是用 Bloom Filter 去重的，于是趁此机会复习复习，顺便了解一些其它结构。</li></ul></li><li>翻译这两篇文的时候我格外认真，并且花了最多的时间，因为还要记下比较详尽的笔记。我也因此有了很大的收获，首先就是确定了在业务算法性能分析时使用到的图表类型，其次就是更深入了解了 Bloom Filter，还学到了 HyperLogLog 和 Count-Min Sketch 这两种大数据中常用的算法。不过关于 HyperLogLog 的介绍实在是太简略，看得我一头雾水，查了一些资料后才有了个大概的理解，想要完全理解的话还是去研究一下原论文吧。</li><li>最后啰嗦一下：上期活动奖励是个背包…..有点重，估计短期内我是用不上的了，要不弄回家里去算了。希望这期如果上榜了，能发个小一点、轻一点的礼品……如果是技术类书籍就再好不过了，最好是关于数据可视化的hh~（要求真tm多）</li></ul><h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><ul><li><strong>Big Data：</strong>大数据。</li><li><strong>Page content metrics：</strong>页面内容指标。</li><li><strong>qualitative data：</strong>定性数据。</li><li><strong>Chart：</strong><ul><li>图表。</li><li><strong>Bar chart</strong>，条形图。</li><li><strong>Line chart</strong>，折线图。</li><li><strong>Scatterplot chart</strong>，散点图。</li><li><strong>Histogram</strong>，直方图。</li><li><strong>Cumulative distribution chart</strong>，累积分布图。</li><li><strong>Geo chart</strong>，地理图。</li><li><strong>Bubble chart</strong>，气泡图。</li></ul></li><li><strong>Error filtering：</strong>误差过滤、错误过滤。</li><li><strong>Waterfall data：</strong>瀑布式数据。</li><li><strong>Range bucket：</strong>范围桶。</li><li><strong>Fast data pipeline：</strong>快速数据管道。</li><li><strong>Streaming Analytics：</strong>流式分析。</li><li><strong>Statistical correlations：</strong>统计相关性。</li><li><strong>Predictive analytics：</strong>预测分析。</li><li><strong>Data at rest：</strong>静态数据。</li><li><strong>financial fraud detection：</strong>金融欺诈检测。</li><li><strong>Demographic segmentation：</strong>人口细分。</li><li><strong>Application-specific：</strong>面向具体应用。</li><li><strong>materialized view：</strong>实体化视图。</li><li><strong>Probabilistic Data Structures：</strong>概率数据结构。</li><li><strong>Bloom filter：</strong>布隆过滤器。</li><li><strong>HyperLogLog：</strong>基数估计法。</li><li><strong>Count-Min sketch：</strong>最小略图。</li><li><strong>Union：</strong>并集。</li><li><strong>Intersection：</strong>交集。</li><li><strong>Streaming application：</strong>流媒体应用。</li><li><strong>False positive rate：</strong>误报率（假阳性概率）。</li><li><strong>Bit array：</strong>位阵列。</li><li><strong>False negative：</strong>错误否定（假阴性）。</li><li><strong>probabilistic sub-linear space streaming algorithm：</strong>概率子线性空间流算法。</li><li><strong>Synopsis data structure：</strong>概要数据结构。</li><li><strong>Domain representation：</strong>域表示。</li><li><strong>Metadata：</strong>元数据。</li><li><strong>Canonical model：</strong>规范模型。</li><li><strong>Message-oriented middleware：</strong>消息中间件。</li><li><strong>Time series data：</strong>时间序列数据。</li><li><strong>Telemetry data：</strong>遥测数据。</li><li><strong>Sentiment analysis：</strong>情感分析；文本倾向性分析。</li><li><strong>Business automation：</strong>业务自动化，即 BPM。</li></ul><h2 id="短语翻译"><a href="#短语翻译" class="headerlink" title="短语翻译"></a>短语翻译</h2><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>Strategic business decision-making</td><td>战略商务决策</td></tr><tr><td>revolutionary times</td><td>革命时代</td></tr><tr><td>Price reductions</td><td>物价回降</td></tr><tr><td>get trapped in</td><td>陷入…</td></tr><tr><td>Out-of-the-box</td><td>开箱即用</td></tr><tr><td>A bulk of</td><td>若干</td></tr><tr><td>get the most out of</td><td>充分利用；发挥…的最大功效</td></tr><tr><td>Seamlessly integrate</td><td>无缝集成</td></tr><tr><td>a contrived example</td><td>一个特定的例子；一个人为的例子</td></tr><tr><td>facilitate bidirectional communication</td><td>促进双向通讯</td></tr><tr><td>consist of</td><td>由…组成</td></tr><tr><td>Individual measurements</td><td>个体测量值</td></tr><tr><td>ties into</td><td>关系到</td></tr><tr><td>interact with</td><td>与…相互作用</td></tr></tbody></table><h2 id="长句翻译"><a href="#长句翻译" class="headerlink" title="长句翻译"></a>长句翻译</h2><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>This article aims to discuss a vendor - and product - agnostic reference architecture that covers an end-to-end IIOT implementation, covering various layers of such an architecture.The end goal is to enable the creation of enterprise business applications that are data-driven.</td><td>本文旨在讨论供应商（以及产品）不可知的参考架构，这其中涵盖了端到端的 IIOT 实现，以及此类结构的各个层次。我们的终极目标就是能够创建数据驱动（Data-driven）的企业业务应用。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;本期成果&quot;&gt;&lt;a href=&quot;#本期成果&quot; class=&quot;headerlink&quot; title=&quot;本期成果&quot;&gt;&lt;/a&gt;本期成果&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1131358&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;大数据对你来说意味着什么？&lt;/a&gt;（大数据专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1131771&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据可视化的艺术&lt;/a&gt;（大数据专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1133374&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;快速数据管道设计：通过交换表更新各个事件决策&lt;/a&gt;（大数据专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1136585&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;概率数据结构简介&lt;/a&gt;（大数据专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1140857&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用于物联网的大数据参考架构&lt;/a&gt;（个人专栏）&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://blog.StoneAndFish.xyz/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Translation" scheme="http://blog.StoneAndFish.xyz/tags/Translation/"/>
    
      <category term="技术文档翻译" scheme="http://blog.StoneAndFish.xyz/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    
      <category term="腾讯云+翻译社" scheme="http://blog.StoneAndFish.xyz/tags/%E8%85%BE%E8%AE%AF%E4%BA%91-%E7%BF%BB%E8%AF%91%E7%A4%BE/"/>
    
  </entry>
  
  <entry>
    <title>[翻译社第四期] 聚焦物联网技术核心应用</title>
    <link href="http://blog.StoneAndFish.xyz/2018/05/08/Translation4th/"/>
    <id>http://blog.StoneAndFish.xyz/2018/05/08/Translation4th/</id>
    <published>2018-05-08T13:42:23.000Z</published>
    <updated>2018-06-10T15:38:43.487Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_1.png" alt=""></p><h1 id="本期成果"><a href="#本期成果" class="headerlink" title="本期成果"></a>本期成果</h1><ol><li><a href="https://cloud.tencent.com/developer/article/1101583" target="_blank" rel="noopener">2018年物联网六大趋势</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1109166" target="_blank" rel="noopener">十大业务步骤确保物联网生态系统的安全</a>（物联网专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1107141" target="_blank" rel="noopener">物联网中的认知科学与网络监督</a>（物联网专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1110622" target="_blank" rel="noopener">剖析物联网解决方案</a>（物联网专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1115668" target="_blank" rel="noopener">在物联网中应用机器学习：使用 Android Things 与 TensorFlow</a> （物联网专栏采纳）</li></ol><a id="more"></a><h1 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h1><ul><li>得益于人工智能的快速发展，以及硬件设备性能的大幅度提高，近几年物联网越来越火，许多大型科技企业都入局其中，不少高校也开设了相关的专业。不过我一直都不怎么了解这个领域具体在研究些什么，最早对物联网的感受就是，通过一个手机 APP 去控制各种联网（或者蓝牙）的设备，比如说用手机关灯、预约电饭煲煮饭之类的……当然这些应该是最简单粗暴的物联网范例了吧。</li><li>当然现在的物联网落地应用没那么简单了，各种智能家居层出不穷，虽然实用起来效果还没有非常好，但能看得出来技术进步的速度是非常快的。如果仔细去感受，你应该能够发现，这些应用正在慢慢改变人们的生活方式，我们的生活将会越来越便利。希望能在十年内看到物联网应用全面普及，让智能设备包揽平常琐碎的杂事，让我们有更多时间去享受生活……</li><li>不过话说回来，现在物联网应用的安全性问题还是挺严峻的，很少听到有物联网安全技术的发展近况，倒是时不时看到有设备被破解，或者隐私数据被获取这样的新闻……听着还是挺怕怕的，像智能监控、智能门锁这样的设备，在这种发展阶段还是不要轻易尝试的好。</li><li>物联网内容有一大部分是偏向硬件的，所以我一直都没怎么去深入研究，对其中的很多概念、技术都没什么了解，比如边缘计算、低功耗广域物联网…….完全没有头绪。于是这期也只能找一些篇幅比较短，介绍性的文章来翻译了。不过也因此有更多时间反复推敲、优化译文，于是得到采纳的文章增长到了 4 篇，有点小开心。</li><li>不过最近工作上开始忙起来了。上个月导师溜去了 VIVO（也可能是 OPPO，忘了），留下一堆未填的坑给我们框架组，这段时间趁项目 BUG 还没有填满工作时间，赶紧去优化一下架构和具体代码（之前的人都是用纯 C 思维写的 C++ 代码，这放在高通的 HAL 层中来看，简直就是煎熬）。翻译这事儿吧，估计能保持每期 5 篇就谢天谢地了，争取保持下去吧！</li></ul><h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><ul><li><strong>IoT：</strong><ul><li>Internet of Things，<strong>物联网</strong>。</li><li>相似的有 <strong>WoT</strong>，Web of Things。表面上是一样的，都是物联网，不过它们之间还是有一些具体的区别的。</li><li>Consumer IoT，消费者物联网。</li><li>Industrial IoT</li></ul></li><li><strong>IT，OT，LOB：</strong><ul><li>Information Technology，信息技术。</li><li>Operational Technology，操作技术。</li><li>Line of Business，业务线。</li></ul></li><li><strong>Industrial Internet Consortium：</strong>工业互联网联盟。</li><li><strong>Open Fog Consortium：</strong>开放雾联盟。</li><li><strong>Edge Computing Consortium：</strong>边缘计算联盟。</li><li><strong>LPWAN：</strong>Low Power Wide Area Network，低功耗广域物联网。</li><li><strong>unlicensed spectrum：</strong>未授权频谱。</li><li><strong>cyberattack：</strong><ul><li>表示<strong>网络攻击</strong>。</li><li>相似的词有 <strong>cyberheist</strong>，它表示<strong>针对金融机构或交易所的网络攻击</strong>。</li></ul></li><li><strong>cognitive science：</strong>认知科学。</li><li><strong>web proctoring：</strong>网络监督。</li><li><strong>Online proctor：</strong>在线监考。</li><li><strong>EEG：</strong>Electroencephalo-graph，脑电图。</li><li><strong>ECG：</strong>Electrocardio-graph，心电图。</li><li><strong>skin resistance：</strong>皮肤电阻。</li><li><strong>iris contraction：</strong>虹膜收缩。</li><li><strong>digital twin：</strong><ul><li>英文解释：A digital twin is a virtual representation of a product. It can be used in product design, simulation, monitoring, optimization and servicing and is an important concept in the industrial Internet of Things.</li><li>暂时翻译成 “<strong>数字双胞胎</strong>”。</li></ul></li><li><strong>data aggregation：</strong>数据聚合。</li><li><strong>Design-time environment：</strong>设计期环境。</li><li><strong>Integrated development environment：</strong>IDE，集成开发环境。</li><li><strong>Explicitly programmed：</strong>显式编程。</li><li><strong>Robot car：</strong>机器人小车。</li><li><strong>Predictive maintenance：</strong>预测维护。</li><li><strong>Peripheral：</strong>外围设备。</li></ul><h2 id="短语翻译"><a href="#短语翻译" class="headerlink" title="短语翻译"></a>短语翻译</h2><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>the Holy Grail</td><td>圣杯（在亚瑟王传说中，这是一个具有特殊力量的“杯子”，它能给人带来幸福、永恒的青春和无尽的资源）</td></tr><tr><td>table stakes</td><td>筹码</td></tr><tr><td>it takes a village</td><td>举全村之力（大家同心协力）</td></tr><tr><td>risk versus reward equation</td><td>风险回报方程（或者风险与回报的关系）</td></tr><tr><td>vice versa</td><td>反之亦然</td></tr><tr><td>M&amp;A activity</td><td>并购活动</td></tr><tr><td>It’s like herding cats</td><td>表达控制那些不可控事情的不可能性</td></tr><tr><td>start to emerge</td><td>开始崭露头角</td></tr><tr><td>augmented reality</td><td>增强现实</td></tr><tr><td>Lower-power envelopes</td><td>低功耗包络</td></tr><tr><td>Net-net</td><td>言归正传；直截了当地说；最主要的</td></tr><tr><td>All said</td><td>所有人都认为</td></tr><tr><td>soup-to-nuts</td><td>一应俱全，应有尽有</td></tr><tr><td>an integral part</td><td>不可分割（必不可少）的一部分</td></tr><tr><td>every piece of</td><td>全部</td></tr><tr><td>cooperation and collaboration</td><td>协调合作</td></tr><tr><td>from the C-suite down to the IT department</td><td>上至最高管理层，下到 IT 部门</td></tr><tr><td>buzz word</td><td>术语，行话；流行词语</td></tr><tr><td>there is a widely held perception</td><td>人们普遍持有这种看法</td></tr><tr><td>incremental IoT</td><td>由于；因为；在于</td></tr><tr><td>an array of</td><td>一排；一批；大量</td></tr></tbody></table><h2 id="长句翻译"><a href="#长句翻译" class="headerlink" title="长句翻译"></a>长句翻译</h2><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>I led with this last year, and the trend is definitely snowballing based on the widespread motivation to partner, rapid adoption of open source tools like EdgeX Foundry for interoperability, and increasing collaboration between key consortia efforts like the Industrial Internet Consortium, Open Fog Consortium and Edge Computing Consortium.</td><td>去年我领导了这一趋势，而且这种趋势绝对是如同滚雪球一般增大的：基于广泛的合作动机，快速采用诸如 EdgeX Foundry 这样的开源工具来实现互操作性，并且加强一些重要联盟的合作（如工业互联网联盟，开放雾联盟以及边缘计算联盟）。</td></tr><tr><td>The EdgeX community is seeing end customers quote the framework into projects for this reason alone.</td><td>EdgeX 社区正看到终端客户将此框架引入他们的项目中，仅此而已。</td></tr><tr><td>Hardly a day goes by without another new major cyberattack or other security-related issue making the news.</td><td>几乎每天都有新的重大网络攻击或者其它与安全相关的新闻出现。</td></tr><tr><td>This may seem obvious, but its importance cannot be overstated.</td><td>这似乎是显而易见的，但其重要性如何强调都不为过。</td></tr><tr><td>This could be as simple as a 1:1 mapping of the physical things to logical identifiers in the IoT Platform, or as sophisticated as mapping an engineering view of an asset with a hierarchical structure of components/systems to the physical devices representing that asset on an instance and class level.</td><td>这可能与物联网平台中，从物理事物到逻辑标识符的一一映射那样简单，或者像将具有组件/系统分层结构的资产工程视图映射到一个实例以及类级别（Class level）的，代表该资产的物理设备一样复杂。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;本期成果&quot;&gt;&lt;a href=&quot;#本期成果&quot; class=&quot;headerlink&quot; title=&quot;本期成果&quot;&gt;&lt;/a&gt;本期成果&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1101583&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2018年物联网六大趋势&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1109166&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;十大业务步骤确保物联网生态系统的安全&lt;/a&gt;（物联网专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1107141&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;物联网中的认知科学与网络监督&lt;/a&gt;（物联网专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1110622&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;剖析物联网解决方案&lt;/a&gt;（物联网专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1115668&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在物联网中应用机器学习：使用 Android Things 与 TensorFlow&lt;/a&gt; （物联网专栏采纳）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://blog.StoneAndFish.xyz/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Translation" scheme="http://blog.StoneAndFish.xyz/tags/Translation/"/>
    
      <category term="技术文档翻译" scheme="http://blog.StoneAndFish.xyz/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    
      <category term="腾讯云+翻译社" scheme="http://blog.StoneAndFish.xyz/tags/%E8%85%BE%E8%AE%AF%E4%BA%91-%E7%BF%BB%E8%AF%91%E7%A4%BE/"/>
    
  </entry>
  
  <entry>
    <title>[翻译社第三期] 区块链技术在国外的应用与发展</title>
    <link href="http://blog.StoneAndFish.xyz/2018/03/29/Translation3rd/"/>
    <id>http://blog.StoneAndFish.xyz/2018/03/29/Translation3rd/</id>
    <published>2018-03-29T11:29:54.000Z</published>
    <updated>2018-06-10T15:39:06.075Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_1.png" alt=""></p><h2 id="本期成果"><a href="#本期成果" class="headerlink" title="本期成果"></a>本期成果</h2><ol><li><a href="https://cloud.tencent.com/developer/article/1054750" target="_blank" rel="noopener">成为加密货币矿工容易吗？我该如何入门？</a>（区块链专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1057760" target="_blank" rel="noopener">自主权身份简介</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1059034" target="_blank" rel="noopener">投资加密货币前需要细想的六个问题</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1063014" target="_blank" rel="noopener">首次币发行（ICO）简介</a>（区块链专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1068654" target="_blank" rel="noopener">劫持比特币：对加密货币进行路由攻击</a>（区块链专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1073032" target="_blank" rel="noopener">在崩溃的加密货币市场中出奇制胜</a>（个人专栏）</li></ol><a id="more"></a><h2 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h2><ul><li>上期活动继续榜上有名，鹅厂又送来了他们的特产……一个哈士企，一个哈士企暖手抱枕……家里快没地方放了都。</li><li>区块链是近期热门话题，抱着了解一些基本知识的心态开始了本期的活动。</li><li>大多数都是偏向概念介绍的文章，我感觉这些文章都比较面向更广泛一些的人群，所以其中没有太多非常专业化的术语，而且还用了很多生活化的描述方式。这对我来说可就比较难了，专业术语一般都有术语表能查，实在不行可以看看相关文献，然而生活化的语句就难以找到很贴切的中文描述了，有些句子可能还和某些歪果仁比较懂的梗有关……</li><li>关于挖矿，其实区块链刚刚起步那几年我就有听说过，当时就经常听到那些搞技术的说用电脑 “挖矿”，可惜我只知道用电脑来娱乐，没有想过深挖一些技术知识…..错过了一个发财的机会hh。现在看来，挖矿也用不上多少技术，实际上还是自己对市场的敏锐程度太低了。不过说到底，这种泡沫类型的发展终究只有很少一部分人能洞悉先机，然后在邻近破灭之前及时离场，赚得个盆满钵满。如果现在要去挖矿，成本已经太高了 —— 不断涨价的显卡，以及没日没夜挖矿所花费的大量电力，同时存量越少越难挖掘的规则。算起来，个人挖矿的话已经很难赚到钱了。</li><li>区块链在几个月内突然成为人民群众茶余饭后的谈资，主要还是因为比特币被炒翻天了。记得一个比较关键的事件就是比特币勒索病毒爆发，我是感觉自那以后区块链概念越来越深入大众，同时各种加密货币也开始爆发出来。就像前几年 “闭着眼赚钱” 的股市一样，人们又开始疯狂投资加密货币……</li><li>为什么我没有跟风去投资呢？当然是因为没有钱啦……于是作为一个穷逼技术人员，我也只能默默去了解一些技术方面的东西了，其实我也没打算很深入去看，对转型区块链确实不是很感兴趣。不过，区块链技术确实变革世界的能力，说不定十几二十年后它就称为人类生活的又一大技术基础了，所以了解一些相关的基本应用的原理也是不错的。</li><li>比特币仅是区块链技术中微不足道的一部分，希望这波比特币狂潮之后人们能冷静下来，更专注于区块链的实际应用吧……</li></ul><h2 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h2><h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h3><ul><li><strong>Bitcoin</strong>：<ul><li><strong>比特币</strong>，BTC。</li><li>其最初概念由<strong>中本聪（Satoshi Nakamoto）</strong>在 2009 年提出。它是一种点对点（P2P） 形式的数字货币，这意味着一个<strong>去中心化的（Decentralised）</strong>支付系统。</li><li><a href="https://baike.baidu.com/item/%E6%AF%94%E7%89%B9%E5%B8%81/4143690?fr=aladdin" target="_blank" rel="noopener">百度百科 —— 比特币介绍</a></li><li>相关的一些数字货币：莱特币（Litecoin），狗狗币（Dogecoin）。</li></ul></li><li><strong>Ethereum</strong>：<ul><li><strong>以太坊</strong>，ETH。</li><li>这是一个开源的，有智能合约功能的公共区块链平台。通过其专用加密货币以太币（Ether，又称“以太币”）提供去中心化的虚拟机（称为“以太虚拟机”，Ethereum Virtual Machine）来处理点对点合约。</li><li><a href="https://baike.baidu.com/item/%E4%BB%A5%E5%A4%AA%E5%9D%8A/20865117?fr=aladdin" target="_blank" rel="noopener">百度百科 —— 以太坊介绍</a></li></ul></li><li><strong>Ripple</strong>：<ul><li><strong>瑞波</strong>，XRP。</li><li>Ripple 是一种互联网交易协议，它允许人们用任意一种货币进行支付。例如，甲方可以利用Ripple 以美元支付，而乙方则可以通过Ripple 直接收取欧元。</li><li>瑞波币则是 Ripple 网络中的唯一通用货币。</li><li><a href="https://baike.baidu.com/item/%E7%91%9E%E6%B3%A2%E5%B8%81/4956309" target="_blank" rel="noopener">百度百科 —— 瑞波币介绍</a></li></ul></li><li><strong>Marketplace</strong>：<ul><li>（比特币、石油、黄金等的）交易所。</li><li>区别于 <strong>Exchanges</strong>：（兑换货币的）交易所。 </li></ul></li><li><strong>Financial Institution</strong>：金融机构。</li><li><strong>Eletronic Cash</strong>：电子现金。</li><li><strong>Crytocurrency</strong>：加密货币。</li><li><strong>Blockchain</strong>：<ul><li><strong>区块链</strong>。</li><li>其本质上是一个去中心化的数据库，同时作为比特币的底层技术。</li><li>区块链是一串使用密码学方法相关联产生的数据块，每一个数据块中包含了一次比特币网络交易的信息，用于验证其信息的有效性（防伪）和生成下一个区块。</li></ul></li><li><strong>Application-specific integrated circuits</strong>：专用集成电路，ASIC。</li><li><strong>Self-sovereign identity</strong>：自主权身份。</li><li><strong>Financial inclusion</strong>：<ul><li><strong>金融包容性，普惠金融</strong>。</li><li>向没有银行账户的人群提供能满足他们需要的金融产品，并让他们有能力有效使用这些产品。</li></ul></li><li><strong>Toxic data</strong>：<ul><li><strong>毒性数据</strong>。</li><li>比如身份数据，它由某一个运营商来负责存储时，就如同一把双刃剑。一方面运营商可以收取一些相关的费用来赚钱，另一方面他们也会受到网络安全问题的困扰（如果身份信息泄露，那责任可就大发了）。</li></ul></li><li><strong>distributed ledgers</strong>：<ul><li>分布式账簿。</li><li>其运作方式是由多人共同管理同一账簿，这使它区别于传统模式下的中心化账簿。</li></ul></li><li><strong>ICO</strong>：<ul><li><strong>首次币发行</strong>，Initial Coin Offering。</li><li><a href="https://baike.baidu.com/item/ICO/21498451" target="_blank" rel="noopener">百度百科 —— ICO 介绍</a></li></ul></li><li><strong>Crowdfunding</strong>：众筹融资。</li><li><strong>Series A</strong>：<ul><li><strong>A 轮融资</strong>。</li><li>与之相关的还有 seed round，种子轮。</li></ul></li><li><strong>Smart contract</strong>：智能合约。</li><li><strong>Flooding</strong>：泛洪路由。</li><li><strong>Peer-to-peer network</strong>：对等网络。</li><li><strong>Routing Attacks</strong>：路由攻击。</li><li><strong>Partitioning attacks</strong>：分割法攻击。</li><li><strong>BGP</strong>：<ul><li>Border Gateway Protocol，<strong>边界网关协议</strong>。</li><li>它可以从网络中传送的数据分组中收集相邻节点的可达性信息。还增加了费用、安全等路由属性。BGP 降低了路由信息交换所需的带宽，因为信息的交换是递增方式进行的而不是通过传送整个数据库。</li><li>BGP hijacks，BGP 劫持。</li></ul></li><li><strong>AS</strong>：<ul><li>Autonomous system，<strong>自治系统</strong>。</li><li>IP 网络的一个集合。</li></ul></li></ul><h3 id="短语翻译"><a href="#短语翻译" class="headerlink" title="短语翻译"></a>短语翻译</h3><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>Bitcoin mining</td><td>比特币挖矿</td></tr><tr><td>A gentle introduction to …</td><td>… 的简单介绍</td></tr><tr><td>Not to mention</td><td>且不说，更不用说</td></tr><tr><td>initial investment</td><td>初期投资</td></tr><tr><td>track records</td><td>追踪（追溯）记录</td></tr><tr><td>take a while</td><td>需要一段时间</td></tr><tr><td>Just be careful</td><td>只是要小心</td></tr><tr><td>business clients</td><td>商业客户</td></tr><tr><td>be in charge of</td><td>负责，主管，掌管</td></tr><tr><td>fall foul of</td><td>与…冲突</td></tr><tr><td>wild west-style</td><td>狂野西部式</td></tr><tr><td>break into a cold sweat</td><td>捏一把冷汗</td></tr><tr><td>jaw-dropping</td><td>令人瞠目结舌</td></tr><tr><td>Raising money</td><td>融资</td></tr><tr><td>crowd funding of to-be-made item</td><td>众筹项目</td></tr><tr><td>but can be gamed</td><td>但其中可能有猫腻</td></tr><tr><td>Price discovery</td><td>市场定价</td></tr><tr><td>Fear of missing out</td><td>“错失恐惧症”</td></tr><tr><td>Due diligence</td><td>尽职审查、严格评估</td></tr><tr><td>Listing requirements</td><td>上市要求、上市条件</td></tr><tr><td>Pump-and-dump</td><td>拉高出货（低买高卖）</td></tr><tr><td>double spending</td><td>重复支付</td></tr><tr><td>dug into historical data</td><td>挖掘历史数据</td></tr></tbody></table><h3 id="长句翻译"><a href="#长句翻译" class="headerlink" title="长句翻译"></a>长句翻译</h3><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>It’s absolutely inescapable at this point — the cryptocurrency revolution is upon us.</td><td>此时此刻，有件事已经是绝对无法避免的了 —— 加密货币革命，正发生在我们身边。</td></tr><tr><td>Banks need to understand their new customers and business clients to check eligibility, and to prove to regulators that they (the banks) are not banking baddies.</td><td>银行需要对他们的新顾客与商业客户进行一番了解，检查他们是否符合资格，从而规避处于黑名单中的那些用户。</td></tr><tr><td>It wouldn’t be the first technology to quietly slink away with its tail between its legs. While blockchain has come too far to see this as a likely possibility, it is still a threat that any informed investor should be aware of.</td><td>它不会是第一个夹着尾巴逃跑的技术。尽管区块链已经走得比较远，这种情况发生的可能性已经不高，但它仍是各位知情投资者都应该充分意识到的一个威胁。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;本期成果&quot;&gt;&lt;a href=&quot;#本期成果&quot; class=&quot;headerlink&quot; title=&quot;本期成果&quot;&gt;&lt;/a&gt;本期成果&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1054750&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;成为加密货币矿工容易吗？我该如何入门？&lt;/a&gt;（区块链专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1057760&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自主权身份简介&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1059034&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;投资加密货币前需要细想的六个问题&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1063014&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;首次币发行（ICO）简介&lt;/a&gt;（区块链专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1068654&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;劫持比特币：对加密货币进行路由攻击&lt;/a&gt;（区块链专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1073032&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在崩溃的加密货币市场中出奇制胜&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://blog.StoneAndFish.xyz/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Translation" scheme="http://blog.StoneAndFish.xyz/tags/Translation/"/>
    
      <category term="技术文档翻译" scheme="http://blog.StoneAndFish.xyz/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    
      <category term="腾讯云+翻译社" scheme="http://blog.StoneAndFish.xyz/tags/%E8%85%BE%E8%AE%AF%E4%BA%91-%E7%BF%BB%E8%AF%91%E7%A4%BE/"/>
    
  </entry>
  
  <entry>
    <title>[石头 · 记] 一小段人生总结</title>
    <link href="http://blog.StoneAndFish.xyz/2018/03/01/Stone-2017-Summarize/"/>
    <id>http://blog.StoneAndFish.xyz/2018/03/01/Stone-2017-Summarize/</id>
    <published>2018-02-28T16:37:39.000Z</published>
    <updated>2018-06-10T15:38:38.799Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Stone_Summarize_2017/Stone_Summarize_2017.png" alt=""></p><p>2017 年对我来说，确是非凡的一年。<br>在这一年中，我既是学生，又是职场人。但说实话，我没有太多关于这种身份转变的感悟。<br>最值得一说的，大概就是我开始经济独立，不需要再向父母讨要生活费，而且上个月还给家里添置了一个洗烘一体机。<br>还有一件值得高兴的事，就是鱼保研了中大，异地恋的路程因此缩短了三个小时。<br>现在是 2018 年了。总觉得好久没有写总结了，所以这一次要写，我就想干脆写个大的。</p><a id="more"></a><h1 id="终结的学生时代"><a href="#终结的学生时代" class="headerlink" title="终结的学生时代"></a>终结的学生时代</h1><h2 id="早已逝去的小学生"><a href="#早已逝去的小学生" class="headerlink" title="早已逝去的小学生"></a>早已逝去的小学生</h2><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;“我的梦想”，这个题目是不是很熟悉？第一次遇见它，是在小学时期。当时的我，与许多同学一样，写下了 “成为一名科学家” 这样的模板化的梦想。当时的我，并不知道究竟何样的念想，才能称得上是一个人的梦想。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;无知，大概是能贯穿我整个小学时代的词语。那时被高年级的朋友带去黑网吧上网，被哄骗拿压岁钱出来请客，还以为自己好吊的。有时候半夜偷偷起床，到父母的裤兜里摸钱，然后还把钱都投到了玩具里，被发现被教训了好几次都改不掉……<br>现在想想，那样的我，竟没在这混乱的世道中被砍死，已是足够幸运的了。但他也确实消失了，那个坏掉的小学生，他早已逝去。</p><h2 id="奄奄一息的中学生"><a href="#奄奄一息的中学生" class="headerlink" title="奄奄一息的中学生"></a>奄奄一息的中学生</h2><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;初恋，似乎是在初一的时候。青涩懵懂，少男少女从未牵过手，也没有过独处的时光，只靠着朋友每天为他们传递着一封封的情书。我也曾知道很多种情书的折法啊，但她的名字早已不在记忆之中了。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;但终究不是一个世界的人，难以再靠近一步。分开是正确的结局。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;要说初中时代的最大收获，我定会毫不犹豫地说，是兄弟。我们 “大化十一少” 集结至今，想想也已经有了七八个年头了吧。其实也不太记得，为什么是我们十一个人聚集在了一起，为什么没有多几个人，又为什么没有少几个人。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;我第一次提起学习干劲，是在高中。那时的我，遇见了物理学。我为这诠释世界运转规律的学科所着迷，我第一次对我的梦想有所描绘，我想成为解开这神秘自然的秘密的贡献者之一，就像爱因斯坦描绘了空间的运作规律，麦克斯韦构造了电磁学的基础方程组。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;曾以为物理竞赛是一个很好的切入点，因此我为它贡献了整个高二的时光，学校里没有教竞赛的老师，我只能照着竞赛贴吧里各位前辈的推荐学习路线慢慢摸索，学了高等数学、大学物理，甚至专门学习了力学，而高中的功课再也没去做……我曾以为能看懂这些东西，就能称得上是 “厉害” 的人了。<br>其实，我终究不过是茫茫人海中那普通的一员。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;在最终的考试中，我被虐得体无完肤。我曾想将失败的主要原因归咎于没有好的竞赛环境，只靠自学和少量题目训练无法得到有效提升。其实不尽然，因为我根本不够努力，根本就太普通。没有天赋，也没有百倍于常人的努力，所谓的梦想，大概是一生也无法触及的幻想。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;这样一个普普通通的中学生，终究被现实击溃，奄奄一息。所幸的是身上的中二烙印让他没有就此散为云烟，而是化作一丝中二之魂一直伴我左右。</p><h2 id="重获新生的大学生"><a href="#重获新生的大学生" class="headerlink" title="重获新生的大学生"></a>重获新生的大学生</h2><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;考上厦大，于我来说，这其中的运气和实力之比约摸是一比一。当年加上了神秘的民族分（或者说是贫困县特有的加分？），我那尴尬的成绩才勉勉强强越过了厦大计算机类的分数线。恰逢当年厦大还没那么火爆，而信科学院也并不出名，于是我最终拿下了这个第一志愿。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;或许是这世界偷偷开了后门，诸多巧合的重叠，融合成了我走向新生活的契机。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;在进入大学校园之前，我就已决心作出改变。抛去了那些无谓的一步登天的幻想，也摒弃那些自甘堕落的思绪，从此 “均衡” 成了我秉持的信念 —— 我希望能作为一个快乐的普通人，恰到好处地生活下去。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;从入学开始就勤奋努力，学习到毕业，甚至继续研究生、博士生 —— 当然，这不是我所向往的大学生活。我认定我的第一年，就是要娱乐多过学习，所以我就这样度过了大一：逃课，打游戏，疯狂抄作业，在海韵三的宿舍里睡上两天两夜；面基，组小团体，补梗，疯狂 KTV，在厦门的海边畅谈人生直至天明。仗着早已学过的高数大物，这一学年的成绩还算在预期之中，只不过没料到的是，近代史挂了。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;第一年最大的收获，就是称为 “梗” 的小团体。能在大学这样的开放式环境里交到这十来个知心朋友，我读这大学已经值得了。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;然而接下来的际遇，很可能改变了我原有的人生轨迹 —— 第二年伊始，遇见了我的小学妹，我的鱼。一改以往的内向被动，这次我主动出击，经过多方打探，以及找准时机创造足够多的相处时间，终于在 2014 年的尾期捕获芳心，摆脱了单身狗的头衔。从此我仿佛改邪归正了一般，开始对课内的学习上心了。虽然在我的预期中，大学后三年确实要逐渐把重心转移到学习上，但没想到会转移得如此迅速。很快，我的成绩开始赶上来了 —— 虽然本来由于专业的关系，我那 70+ 分的平均分还能排到第三名，不过距离第二名我还差了十几分……第二学年，我的平均分超越了第二名，拿到了一些奖学金。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;这一年我开始和鱼一起出去旅游，还买了一台微单，打开了业余摄影的爱好。或许因为遇见鱼，我的内心开始逐渐充满阳光 —— 我是何等的幸运啊。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;第三年，在我的计划中，开始要为以后的工作进行一些准备了。于是开始混迹一些学术竞赛，联系老师给我分配一些实战任务（其实也就是外包任务）。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;其实大二下学期的时候我就已经开始准备以后的谋生技能了：我尝试过给影楼剪辑一些婚礼视频，赚到了两千多，但是好累好累；由院里的老师牵线搭桥，做了一个关于高性能 UDP 消息中转站的外包任务，赚了四千块，于是就买了我一直在用的 Sony a5100……当然这些都只是一些尝试，实践的经验还是有所欠缺，所以大三时我继续找老师做一些任务，不管是能拿钱的外包，还是只是帮忙在科研项目上做一些微小贡献。同时也参加了一些企业开展的软件设计竞赛，还有智能设计竞赛，虽然状况百出，最终都没什么很好的成绩，但做过的这些努力最终还是让我具有了一定的硬实力。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;大三结束，学年平均成绩终于突破 90+，成为了第一名。这一年的评奖评优，我和鱼同时拿到了五千奖学金，于是浪了好一阵子。可以说达到了我的学业巅峰了。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;最后一年，不出意料，我没有保研资格 —— 因为六级没过啦。虽然毕设导师一直极力帮助我，想给我争取到破格的资格，但这一届只有竞赛破格，像我这样没有拿到国家级一等奖的也就没办法了。很感谢张老师。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;拖延症发作，十月份才开始为投简历找工作做准备，而这时候互联网大厂的校招都已经处于尾声。匆忙赶上了网易和 YY 的最后一场，然而准备不充分而导致面试失败了。接下来就是厦门软件园的一些游戏公司，准备不足的劣势还是让我在各种二面三面中败下阵来。其实当时我内心还是很失落的，但只要和鱼待在一起，我就会感觉这些失落一扫而空。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;后来我开始总结失败经验，开始到 CSDN 写博客，把失败的题目总结出来，反省思考，没想到过了不久，在十一月的开头我收到了天珑的 offer。从此我便和保研的同学一样，过上了养猪般的生活。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;当然，我也是有为未来的工作做一些准备的 —— Effective C++，设计模式其实都在慢慢看慢慢学；毕业设计也有用心去搞，读了不少论文，作了许多总结，为最终的算法展示搭建一个对当时的我来说，已经足够完善的实验平台。最终我顺利毕业，背起行囊到深圳开始了打工生涯。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;这一年，和鱼的感情也越来越深，我常常觉得，我们的热恋期会一直延续到肉身逝去方止。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;回顾整个大学生涯，我感觉不到有何遗憾 —— 有鱼，有 “梗”，足矣。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;现在，我的梦想就是 “和鱼在一起，愉悦地生活（当然还要有几只喵）”。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;重获新生，区区四字，已足够描述我的这段人生。</p><h1 id="打工生涯的起点"><a href="#打工生涯的起点" class="headerlink" title="打工生涯的起点"></a>打工生涯的起点</h1><h2 id="菜鸟软件工程师"><a href="#菜鸟软件工程师" class="headerlink" title="菜鸟软件工程师"></a>菜鸟软件工程师</h2><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;入职快八个月了。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;刚开始的两个月都是无尽的培训，甚至还到工厂去当了半个月的包装工。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;后来分配到了影像框架组，专门维护 Android Camera 中的 Framework 和 Hal 部分，以及对接一些第三方算法，诸如美颜、人像虚化之类。说实话，在此之前，我从没去了解过关于 Android 内部架构的内容，于是买了老罗的 Android 源码分析的书，狂啃一个月恶补知识，同时也接一些小任务熟悉熟悉业务。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;公司重点发展 Camera，于是影像组升级，成了影像部，不过我还是在框架组里。组里只有五个人，实际上完全不够，由于框架部分的范围很广，而且不同平台（高通，MTK）区别又非常大，所以每个人关注的部分都不一样，现在大家都在做着不同的部分，而我则是各个部分的小任务都去蹭蹭……<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;也得益于人手不足，有许多新业务的开发任务就落在了我头上。虽然有些赶鸭子上架的感觉，但自从做了几个比较大的新业务逻辑后，我不仅提升了撸代码的能力，还在架构设计上有了一定的经验积累。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;但现在我渐渐觉得，现在很多时间都花在了解决 Bug 上面，每天的生活就是等测试报告 Bug，然后我们查 Log，解 Bug……说实话，很多时候 Bug 只是某些人或者自己以往编码时的笔误导致的，而这些失误往往会让我们花费大量的时间去寻找原因。效率极低，也学不到多少东西。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;我觉得必须要转型了，往 AI 方面去学习，而且要偏向算法一些。趁着现在年轻。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;于是我开始学习一些新东西，渐渐捡回数学功力，开始熟悉英语（也为此加入了腾讯云社区的翻译社）。一切都在为转型进行准备，而今年的业余时间，我会更专注于转型，争取能在明年年初有跳槽的能力，至少要在后年劳动合同到期之前具备找到更好下家的实力。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;这八个月也是异地恋的八个月。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;虽然黏在一起的时间少了很多，但我觉得现在这一时期保持一定的距离也不坏。整天在一起太久了，我发现我们的进步越来越缓慢，有时候太过沉溺于享受二人世界，可能会限制成长的脚步。我希望这两年的异地生活，能让我们快速成长，为迎接往后更细碎日常的生活作出充足的准备。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;不多说了，努力！奋斗！</p><h1 id="新年愿景"><a href="#新年愿景" class="headerlink" title="新年愿景"></a>新年愿景</h1><ul><li>保持和鱼去旅游的优良传统。</li><li>好好理财，保持一定存款。</li><li>有待遇翻倍的能力。</li></ul><hr><p>拜个晚年。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/Stone_Summarize_2017/Stone_Summarize_2017.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2017 年对我来说，确是非凡的一年。&lt;br&gt;在这一年中，我既是学生，又是职场人。但说实话，我没有太多关于这种身份转变的感悟。&lt;br&gt;最值得一说的，大概就是我开始经济独立，不需要再向父母讨要生活费，而且上个月还给家里添置了一个洗烘一体机。&lt;br&gt;还有一件值得高兴的事，就是鱼保研了中大，异地恋的路程因此缩短了三个小时。&lt;br&gt;现在是 2018 年了。总觉得好久没有写总结了，所以这一次要写，我就想干脆写个大的。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.StoneAndFish.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="http://blog.StoneAndFish.xyz/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="小矫情" scheme="http://blog.StoneAndFish.xyz/tags/%E5%B0%8F%E7%9F%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>[鱼 · 记] 2017</title>
    <link href="http://blog.StoneAndFish.xyz/2018/02/27/Fish-2017-Summarize/"/>
    <id>http://blog.StoneAndFish.xyz/2018/02/27/Fish-2017-Summarize/</id>
    <published>2018-02-27T15:35:42.000Z</published>
    <updated>2018-06-10T15:38:30.471Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/Fish_Summarize_2017/Fish_Summarize_2017.png" alt=""></p><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;就改改以往的按月份记录流水账的格式吧。感觉这一年可以算是我开始逐渐成人的一年，对，不是刚上大学那年，也不是十八岁那年。真晚熟。这一年的变与不变，这一年的各种见闻。</p><a id="more"></a><h2 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h2><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;身边的人发生了变化。从以往一直绑定在一起的两个人，开始面临异地。异地之后，突然多出了许多属于自己的时间，最开始时是很不知所措的，整日待在宿舍不活动，到后来逐渐才意识到需要振作与改变。开始自己锻炼和学习，自己重新掌控生活，依赖得太久需要慢慢站直。异地短暂的别离让人很期待每一次的相聚，我也正在渐渐熟悉着你的城市，或许也是我们未来的城市，但每次回到学校，路过我们一起走过的大街小巷时还是十分想念你的陪伴啊。</p><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;身份发生了变化。自从你开始工作，我也得以窥探到工作后的世界，反而觉得并没有之前想得那么令人恐慌，经济独立、能够过上自己的生活，还蛮好的嘛。每次我在家里做饭等你下班，或是我们一起外出买菜归来，各种生活化的情节，事无巨细都由我俩讨论分担，突然从校园恋爱进入现实，最开始时我竟还因掺和进柴米油盐而失落，矫情的人呀，然而人间烟火的温暖与真实让我意识到从前的愚笨无知：虽然事务繁杂，但都是自己有权去掌控去选择的，自由多迷人。或许是这之后吧，我开始留意起许多过去不屑在意关心的东西，从中发现不少美与丑恶，鞭挞着我成为一个更<strong>完整</strong>的人。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;然后，我变成了大四生。大三下的那场保研，每天忙着准备资料和应对课内，匆匆忙忙之中又为转折点作了重要决定。暑假的夏令营，很是开拓眼界了，对于我这个待在舒适圈太久已经安逸惯了的人，还是带来许多落差的，也是，直到那时候，我才开始懂得，什么叫”要对自己负责”，直至目前还在逐步践行中，逐步改变过去的习惯想法。有一点可惜，直到大四了才开始发现问题的症结。只能选择相信自己还有救。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;开始养生。被感冒鼻炎折磨多了，终于向多喝热水妥协，还买了个保温杯。也开始锻炼，但是keep之类似乎耗时长见效还小，新一年打算结合跑步。开始关注身体的各项变化，身体状态好一定是情绪良好、做事有效率的基础。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;技能点。掌握了一些新的技能点哈哈。比如上半年终于学会并爱上游泳，游泳时的内心平静和举重若轻，比跑步的上气不接下气优雅多了哈哈。比如做饭，本身就喜欢吃东西，所以想尝试自己做出好吃的，说起来我的爱吃和会吃属性还是被你激发的。比如开始戴隐形，摆脱了框架，虽然偶尔还会习惯性地托眼镜。</p><h2 id="见闻"><a href="#见闻" class="headerlink" title="见闻"></a>见闻</h2><p>&#160;&#160;&#160;&#160;&#160;&#160;夏令营。另一所学校，那几天在校园里骑车，空旷少人，抬头是夏季烂大街的蓝天，安安静静，心旷神怡，那一瞬觉得偏居一隅的求学也很令我向往了。除此之外，感觉大牛导师也很多。从零开始。以后还会经历很多从头开始，重新适应新一波人。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;开始研究墙外的世界。了解到很多不同的、被习以为常忽略的观点，都说在20岁左右的时候，就需要对世界有清晰的认识，既然人出不去，只好退而求其次，通过网络来了解了。看了越来越多讨论，除了体会到个人的渺小，也越发觉得事情无分对错，只有适不适合。新一年打算继续多读书，多认知这个世界。</p><h2 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h2><p>&#160;&#160;&#160;&#160;&#160;&#160;和你去汕头。感觉那儿吃的虽然不错，但似乎没能让我俩太惊艳，难道是期望值太高。不过潮汕牛肉火锅是确实很好吃哒~其它比较惊艳的是四处可见的猫猫~好像是我们去旅游那么多次，见得比较多猫猫的地方，在街上随意逛逛就看到店里有咪。总结来说，虽然都是在广东，但我俩都更偏爱广府的风味~</p><p>&#160;&#160;&#160;&#160;&#160;&#160;和你去深圳。初到深圳的一段时间，我总是觉得这里的食物比不上广州，总感觉深圳非常不走心，比起广州常常可见的老店，而深圳比较多的是全国各地吃的都有，于是我偏爱的广府就这样占比被冲淡了。就是到目前，我还是觉得深圳的食物比不上广州，只不过是深圳繁华的大型MALL更多，稍微平衡了一下而已。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;和你去香港。把我所爱，介绍于你。去了知名的喜剧之王打卡点，去坐了叮叮车和天星小轮，还有好多可打卡之处~以后我在广州啦，把户口迁过来之后就可以每周去一次~我是那么地偏爱那一门语言、偏爱它所衍生出的文化。可我再怎么偏爱，我也是局外人，在随着慢慢独立思考而不是一昧认可之后，许多事情我也无法苟同。或许因为没有真真切切体会过。不过爱的心不变，应该说只是变得更理性看待了。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;和舍友去台湾。小时候台湾偶像剧、台湾歌手纵横童年的时候，还是对台湾很有好感的，后来迷上粤语文化之后就逐渐淡忘了它。踏上这片土地，感受所有的不一样，城市规划、基础设施、随处可见的7-11，软软糯糯的台湾腔，然而台湾最美的风景还是人，这话是真的没毛病。虽然一路上，也有一些莫名其妙的经历，但总的来说民众素质还是较高的。去了潜水，体验很棒！如果天气再热点，如果自己呼吸能好好掌控，就更好辣~虽然在水底的时候，呼吸困难、冰冷发抖到期待着赶紧上去，但是现在想来可能是不愿意承认这次潜水不够成功吧哈哈。回来之后突然对台湾的政治起了兴趣，立flag找找资料来看。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;旅行真好，一路上见识不同的人不同的生活，虽然有时也喜欢那份旅程结束回到家时的安心。看了个YouTube的up主，正好说的台湾旅行，不同于一般的7天/9天环岛路线，他们选择7天都待在花莲，认为这样能有更深度的体验。嗯，下次可以试试~~</p><h2 id="不变"><a href="#不变" class="headerlink" title="不变"></a>不变</h2><p>爱好依然不变。猫猫和广东歌。<br>今年失去了最亲近的猫猫，虽然迟早会发生，不是我走就是它走，本来还幻想过以后能把它接走的。<br>今年看了两场演唱会。泉州，和你去看张学友；广州，和家人去看林子祥。都是超级尽兴！不过，还是好想去红馆，好想和同道中人去！</p><h2 id="希望"><a href="#希望" class="headerlink" title="希望"></a>希望</h2><p>说好的今年不立flag呢。。还是不立了，在心里默默改。</p><p>那说一下愿景吧。</p><p>希望能成为更好的人。</p><p>20岁的年纪不要过养老退休的生活。</p><p>希望感情能永葆青春。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/Fish_Summarize_2017/Fish_Summarize_2017.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;nbsp;&amp;nbsp;就改改以往的按月份记录流水账的格式吧。感觉这一年可以算是我开始逐渐成人的一年，对，不是刚上大学那年，也不是十八岁那年。真晚熟。这一年的变与不变，这一年的各种见闻。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.StoneAndFish.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="http://blog.StoneAndFish.xyz/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="小矫情" scheme="http://blog.StoneAndFish.xyz/tags/%E5%B0%8F%E7%9F%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>[翻译社第二期] 探索AI技术，科技引领未来</title>
    <link href="http://blog.StoneAndFish.xyz/2018/02/27/Translation2nd/"/>
    <id>http://blog.StoneAndFish.xyz/2018/02/27/Translation2nd/</id>
    <published>2018-02-27T13:02:33.000Z</published>
    <updated>2018-06-10T15:38:59.737Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_temp.png?imageMogr2/thumbnail/1080x720" alt="@图. 临时题图"><br>（上期活动奖品，狗年大吉哈士企）</p><h2 id="本期成果"><a href="#本期成果" class="headerlink" title="本期成果"></a>本期成果</h2><ol><li><a href="https://cloud.tencent.com/developer/article/1031086" target="_blank" rel="noopener">用粒子群优化算法求解旅行商问题</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1031116" target="_blank" rel="noopener">应用潜在语义分析技术将文档进行3D可视化</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1033691" target="_blank" rel="noopener">基于神经网络的图像压缩技术</a>（人工智能专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1034870" target="_blank" rel="noopener">测试数据集与验证数据集之间有什么区别呢？</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1036794" target="_blank" rel="noopener">自然语言处理的神经网络模型初探</a>（人工智能专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1036693" target="_blank" rel="noopener">多层感知器神经网络速成课</a>（人工智能专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1039576" target="_blank" rel="noopener">深度学习解决文本分类问题的最佳实践</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1041795" target="_blank" rel="noopener">文本的词嵌入是什么？</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1041786" target="_blank" rel="noopener">机器学习中分类与回归的差异</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1043107" target="_blank" rel="noopener">如何为神经机器翻译配置一个编码器 - 解码器模型</a>（个人专栏）</li></ol><a id="more"></a><h2 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h2><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><ul><li>本期的活动正对我的胃口，于是不知不觉多领了几个任务。但是任务量多了，完成质量却不如上期了 —— 十篇文章，三篇采纳，七篇通过。</li><li>反省原因，不外乎两大方面，即自身原因与外界因素：<ul><li>自身水平问题应是最主要的了 —— 或许上期五篇三采纳，还排行在前十，得了个小礼物，我就膨胀了，实际上还是六级没过的弱鸡一枚……好吧，还是需要清楚自己的定位，稳扎稳打地提高能力。</li><li>外界因素也有一些 —— 这一期的源文章，其实有挺多比较水的，特别是那些比较简短的文章，而我主要翻译的也是短文……确实翻译的时候，也觉得有些文章其实内容比较一般，也不足以放到专栏中。另外，还有一些文章实际上机器之心之类的公众号已经翻译过了，以后遇到这样的任务，除非自己对内容很感兴趣，否则就不作重复的工作了……</li></ul></li><li>上一期活动总结时，有提到要及时记录翻译过程中的一些知识点，这次稍微做好了一些，但还是有挺多没记下来的，有时候是时间比较紧，仓促之中遗漏了，有时候就是翻译得太专注，一不小心就翻译完提交了……今后还要继续改善。往后就按照这次的模式，分成专业名词、短语和长句三大部分做记录。</li><li>我觉得有必要把每期领取的任务数量控制在一定范围之内。按照目前我的水平，往后每期任务完成五篇左右应是比较合适的，量少而求精。</li></ul><h3 id="小吐槽"><a href="#小吐槽" class="headerlink" title="小吐槽"></a>小吐槽</h3><ul><li>注意翻译的时候，编辑器如果切换到 Markdown 模式，那就要一直用 Markdown。因为切换回富文本模式，文章提交后所有格式会按照 Markdown 的来，排版会非常混乱，各种代码块、内联代码之类的都乱了……</li><li>以及我发现切换到 Markdown 后，更容易出现提交时提示非法链接存在，导致一直无法提交。</li><li>一般会提示非法链接的情况：<ul><li>localhost 与 127.0.0.1</li><li>ftp </li><li>email</li><li>google 相关（一些被墙了的地址都有可能，但不全是）</li></ul></li></ul><hr><h2 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h2><h3 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h3><ul><li><strong>TSP</strong>：<ul><li>Travelling Salesman Problem，<strong>旅行商问题</strong>。</li><li><a href="https://baike.baidu.com/item/%E6%97%85%E8%A1%8C%E5%95%86%E9%97%AE%E9%A2%98/7737042?fr=aladdin" target="_blank" rel="noopener">旅行商问题——百度百科</a></li></ul></li><li><strong>PSO</strong>：<ul><li>Particle Swarm Optimizers，<strong>粒子群优化算法</strong>（或鸟群觅食算法），这是一种进化算法（Evolutionary Algorithm ）。</li><li><a href="https://baike.baidu.com/item/%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95/1733544" target="_blank" rel="noopener">粒子群算法——百度百科</a></li></ul></li><li><strong>CNN</strong>：<ul><li>Convolutional Neural Network，<strong>卷积神经网络</strong>。</li><li>有时有简写成 ConvNet，这个也是一个卷积神经网络开源项目的名称。</li></ul></li><li><strong>RNN</strong>：<ul><li>Recurrent Neural Network，<strong>循环神经网络</strong>。</li><li>Recursive Neural Network，<strong>递归神经网络</strong>。</li></ul></li><li><strong>Token</strong>：<ul><li>词法分析中译作<strong>标记</strong>：对代码 <code>int a;</code> 进行词法分析后，得到诸如 <keyword, int=""> 这样的结果就是 token。</keyword,></li><li>自然语言处理中译作<strong>“词”</strong>：对句子进行分词后，得到分开的各个”词”即是 token。</li></ul></li><li><strong>ReLU</strong>：<ul><li>Rectified Linear Units，<strong>线性整流单元</strong>。</li><li>在神经网络中，对应线性整流激活函数。</li></ul></li><li><strong>corpus</strong>：<strong>语料库</strong>。</li><li><strong>NMT</strong>：Neural Machine Translation，<strong>神经机器翻译</strong>。</li><li><strong>WMT</strong>：Workshop on Machine Translation，业界公认的顶级<strong>机器翻译大赛（大会）</strong>之一。</li><li><strong>GRU</strong>：<ul><li>Gated Recurrent Unit，<strong>门控循环单元</strong>。</li><li>相关的有 <strong>RGRU</strong>，Residual GRU，<strong>残差门控循环单元</strong>。</li></ul></li><li><strong>BLEU</strong>：<ul><li>Bilingual Evaluation Understudy，<strong>双语互译质量评估辅助工具</strong>。</li><li>设计思想：机器翻译结果越接近专业人工翻译的结果，则越好。（通过判断两个句子的相似程度即可）</li></ul></li></ul><h3 id="短语翻译"><a href="#短语翻译" class="headerlink" title="短语翻译"></a>短语翻译</h3><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>implicit prologue</td><td>隐式载入，隐式前言</td></tr><tr><td>some rights reserved</td><td>保留部分版权</td></tr><tr><td>one-hot encoded</td><td>一位有效编码，独热编码</td></tr><tr><td>hierarchical structure</td><td>分层结构，层级结构</td></tr><tr><td>state-of-the-art</td><td>最先进的，达到高水准的，顶尖的</td></tr><tr><td>Teacher Forcing for Recurrent Neural Networks</td><td>循环神经网络中的 “强制教导（教师强迫）”</td></tr><tr><td>key breakthroughs</td><td>关键突破，重大突破</td></tr><tr><td>word embedding representation</td><td>词嵌入表示</td></tr><tr><td>generalization power</td><td>泛化能力</td></tr><tr><td>fixed sized vocabulary</td><td>固定大小的词汇表</td></tr><tr><td>the front end</td><td>前端</td></tr><tr><td>symbolic categorical features</td><td>符号分类特征</td></tr><tr><td>de facto standard</td><td>事实标准，约定俗成的标准</td></tr><tr><td>rule of thumb</td><td>经验法则</td></tr><tr><td>a set of heuristics</td><td>一套启发式算法</td></tr><tr><td>for a small lift in skill</td><td>在能力上的小小提升</td></tr><tr><td>Beam-search</td><td>波束搜索</td></tr><tr><td>Bridging the Gap between …</td><td>缩小差距</td></tr></tbody></table><h3 id="长句翻译"><a href="#长句翻译" class="headerlink" title="长句翻译"></a>长句翻译</h3><table><thead><tr><th>原文</th><th>译文</th></tr></thead><tbody><tr><td>We find that these representations are surprisingly good at capturing syntactic and semantic regularities in language, and that each relationship is characterized by a relation-specific vector offset.</td><td>我们发现，这些表示法非常善于捕捉语言中的句法和语义规律性。</td></tr><tr><td>This has the effect of model training taking days or weeks and requiring computational resources that are generally very expensive.</td><td>这导致训练模型需要花费几日乃至数周的时间，而且通常还需要成本高昂的计算资源。</td></tr><tr><td>While we did expect the attention-based models to significantly outperform those without an attention mechanism, we were surprised by just how poorly the [no attention] models fared.</td><td>虽然我们能预料到基于注意机制的模型会有显著的能力提升，但无注意机制的模型表现之差，是我们始料未及的。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_temp.png?imageMogr2/thumbnail/1080x720&quot; alt=&quot;@图. 临时题图&quot;&gt;&lt;br&gt;（上期活动奖品，狗年大吉哈士企）&lt;/p&gt;
&lt;h2 id=&quot;本期成果&quot;&gt;&lt;a href=&quot;#本期成果&quot; class=&quot;headerlink&quot; title=&quot;本期成果&quot;&gt;&lt;/a&gt;本期成果&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1031086&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用粒子群优化算法求解旅行商问题&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1031116&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;应用潜在语义分析技术将文档进行3D可视化&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1033691&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;基于神经网络的图像压缩技术&lt;/a&gt;（人工智能专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1034870&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;测试数据集与验证数据集之间有什么区别呢？&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1036794&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自然语言处理的神经网络模型初探&lt;/a&gt;（人工智能专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1036693&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;多层感知器神经网络速成课&lt;/a&gt;（人工智能专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1039576&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深度学习解决文本分类问题的最佳实践&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1041795&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文本的词嵌入是什么？&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1041786&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;机器学习中分类与回归的差异&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1043107&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何为神经机器翻译配置一个编码器 - 解码器模型&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://blog.StoneAndFish.xyz/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Translation" scheme="http://blog.StoneAndFish.xyz/tags/Translation/"/>
    
      <category term="技术文档翻译" scheme="http://blog.StoneAndFish.xyz/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    
      <category term="腾讯云+翻译社" scheme="http://blog.StoneAndFish.xyz/tags/%E8%85%BE%E8%AE%AF%E4%BA%91-%E7%BF%BB%E8%AF%91%E7%A4%BE/"/>
    
  </entry>
  
  <entry>
    <title>[到此一游] 日式和风之御温泉</title>
    <link href="http://blog.StoneAndFish.xyz/2018/01/23/YuWenQuan2018/"/>
    <id>http://blog.StoneAndFish.xyz/2018/01/23/YuWenQuan2018/</id>
    <published>2018-01-22T16:13:52.000Z</published>
    <updated>2018-06-10T15:39:12.450Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/TitleImg_v1_3.png?imageMogr2/thumbnail/1280x720" alt="@图. 题图"></p><p>时间：2018.01.13 ~ 2018.01.14<br>地点：深圳 —— 珠海御温泉<br>人物：石 &amp; 鱼<br>花费：人均 1200+ RMB<br>（多图预警）</p><a id="more"></a><h1 id="鱼-·-记"><a href="#鱼-·-记" class="headerlink" title="鱼 · 记"></a>鱼 · 记</h1><p>&#160; &#160; &#160; &#160;之前就一直听石说御温泉的体验很好，后来在微博上搜了相关的信息，感觉风评很不错~日式的风格看起来也很是吸引，当即讨论预定行程，然后就满心欢喜地期待着……<br>&#160; &#160; &#160; &#160;第一次从深圳坐船出发，还算平稳没有晕船，到珠海的九州港之后打算在周围消磨一下时间，再去坐御温泉的接驳车，结果就正好发现了一只黄白喵~更幸运的是它还很亲人~撸猫撸了个爽！<br>&#160; &#160; &#160; &#160;上车之后会有工作人员跟我们提前交代好一切，我们当时去得还是稍微早了点，酒店三点入住，一点退房，虽然大约两点左右就可办理入住，但是我们当时是十一点的车，十二点半左右就到达度假村了，所以还是要等待一会儿，不过其实也顺带消解了舟车劳顿的疲惫，可以早点开始泡温泉。<br><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_13.png?imageMogr2/thumbnail/980x720" alt="@图. 住房"></p><h2 id="温泉"><a href="#温泉" class="headerlink" title="温泉"></a>温泉</h2><p>&#160; &#160; &#160; &#160;入住后换上浴衣就去泡汤了，前几个池子体验都很好~在泡汤的时候还会有服务员提供茶水，可以边泡边喝；场所里还到处都摆放着消毒过的新浴巾可供更换，这一点简直深得我心。泡过的几个池子里，印象比较深刻的一个是药池，刚开始坐进去的时候一股好大的药味，感觉自己下一秒都要被煮成中药喝下肚了。。后来泡着泡着肚子饿了，跑去休息区吃了点东西，又继续下池子了。但是之后不知道为何都是泡不了多久就受不了，觉得好烫，还有点晕晕的。。还好有游泳池，水温也算暖和，赶紧下去冷静一下，在水里活动开了之后，发现自己还是比较青睐游泳池。<br>&#160; &#160; &#160; &#160;玩了好一阵之后，又回到主池泡了一会回回温，就离开了，在房间稍作清洗整顿，又奔向晚上的大餐庙会了。</p><h2 id="晚餐"><a href="#晚餐" class="headerlink" title="晚餐"></a>晚餐</h2><p>&#160; &#160; &#160; &#160;由于我们去的比较晚，没有位子了，也懒得等位了，直接进去端着盘子边走边吃。<br>&#160; &#160; &#160; &#160;庙会里面的美食实在太丰富了，日式的天妇罗寿司刺身、粤式的糖水老火靓汤萝卜牛杂、西餐里的牛排鹰嘴豆炸薯条鱿鱼圈、东南亚的柠檬草鸡翅咖喱、各色西点还可以自己淋上果酱DIY图案、果汁咖啡冰沙花茶……数不尽~真遗憾自己只有一个胃。而且食物放置的地方看起来都保持得挺干净，路上偶尔会有一块区域摆放着几个桌台，可以停在那站着吃，用过的餐具可以摆放在那待工作人员收拾，可以说是很贴心了。<br><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_14.png?imageMogr2/thumbnail/1280x720" alt="@图. 萝卜牛杂"><br><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_15.png?imageMogr2/thumbnail/1080x1080" alt="@图. 虾趣"><br><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_16.png?imageMogr2/thumbnail/1280x720" alt="@图. 炸物"></p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><p>&#160; &#160; &#160; &#160;我们吃饱了就跑去四处逛逛，凑上了一台赌桌，赌大小赌点数，筹码是进场的时候发的”衙票”，在那玩了好一会~然后到处拍拍照什么的，想回去继续吃东西的时候才发现快结束了，最遗憾的是没有喝到汤和没有吃到棉花糖！<br><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_17.png?imageMogr2/thumbnail/1280x720" alt="@图. 衙票"><br><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_18.png?imageMogr2/thumbnail/1000x700" alt="@图. 游戏"><br><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_19.png?imageMogr2/thumbnail/1080x1080" alt="@图. 虎头铡"></p><p>&#160; &#160; &#160; &#160;回房间收拾收拾就躺尸了，一整天玩下来累得一闭眼就睡着了，胃很充实身子也泡得暖暖的一天！<br><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_20.png?imageMogr2/thumbnail/1080x1080" alt="@图. 各种吃的样子"><br>&#160; &#160; &#160; &#160;第二天的自助早餐，味道不错~但还是很好奇西式的种类，以后一定要尝试一次！【来度假村的路上，工作人员说西式的早餐场地是露天的，可能会有点冷，我们就没选】<br>&#160; &#160; &#160; &#160;中午随便吃了些干粮，就踏上返程了。又是一番舟车劳顿，回到了熟悉的家，感觉真好。</p><hr><h1 id="石头-·-记"><a href="#石头-·-记" class="headerlink" title="石头 · 记"></a>石头 · 记</h1><h2 id="前篇"><a href="#前篇" class="headerlink" title="前篇"></a>前篇</h2><p>&#160; &#160; &#160; &#160;去年十一月份，部门旅游时跟着大佬们去了一趟御温泉，感到各方面的体验都是极佳的。那天晚上，我走在热闹的庙会小街上，用我那台老掉牙的大法微单记录着身旁发生的一切，那时候我就觉得，如果鱼在这里，肯定会很喜欢。<br><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_01.png?imageMogr2/thumbnail/1153x720" alt="@图. 庙会街一瞥"></p><p>&#160; &#160; &#160; &#160;于是十二月中旬，看了看腰包，嚯嚯~还有点闲钱。立马就在官方微信上定下了一个月后的大床房。其实我们本想定的是“双人入格”的房间，能便宜 <code>400</code> 左右，但是这个房型实在是太难预订了，最近的有房的周末已经快到三月份了……</p><p>&#160; &#160; &#160; &#160;满怀期待了一个月，终于等到了出游的那一天。早上早早地起了床，蒸了几个饺子当早餐，然后就出发往蛇口港了。</p><p>&#160; &#160; &#160; &#160;坐船一个小时左右，就到了珠海九州港，下船后感觉有点晕晕的。出港后往旁边的停车场走去，老远就能看到御温泉的大巴车。由于离发车还有点时间，我们到马路对面去溜达了一下。随后我们就遇到了“警局喵”，很亲人，大概附近经常有人喂它吧。</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_02.png?imageMogr2/thumbnail/1280x720" alt="@图. 警局喵"></p><p>&#160; &#160; &#160; &#160;大巴发车后，大概有 80 分钟才到度假区。在车上大家交了身份证（办理入住），选了第二天的早餐，以及回程的大巴时间。</p><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>&#160; &#160; &#160; &#160;一点左右的时候，我们终于到达了目的地。不过这时候按照规定还没法入住，我们就先等在大厅休息区，吃我们准备好的午餐。然后还发现有一些小孩子的玩意儿能玩，于是我们就抢占了小盆友的宝地，开始消磨时间……</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_12.png" alt="@图. 小玩意儿"></p><p>&#160; &#160; &#160; &#160;到了两点多，我们就去前台问是否能入住，果然房间已经清扫完毕，可以入住了，于是我们拿上房卡，就去房里休息休息了。稍作休息后，我们便换上酒店配有的日式浴衣往温泉进发了。</p><p>&#160; &#160; &#160; &#160;三点多的时候进了温泉，这时候人还不算很多。首先到第一层的大池“华兴池”去适应适应温度，刚开始感觉有点烫，但是过一会适应了以后，就会感到全身舒爽，大半天的舟车劳顿一扫而光。</p><p>&#160; &#160; &#160; &#160;随后我们还到一楼的各种名药池、名木池，以及二楼的各种奇怪的池去试了试（有蜜汤、姜汤、醋汤等等……）。但是有些池真是好烫，完全享受不来，于是泡了一会就溜了。中间休息的时候，我们到休息区去吃了不少自助水果、包点和饮料……要肥死了。</p><p>&#160; &#160; &#160; &#160;温泉区里还有个游泳池，泡热汤泡得有些头脑发涨，于是我们转移到游泳池去玩一玩。水温还算 OK，会放热水到池里，但是大部分池水还是比较凉的，在里面玩了可能有三四十分钟吧，然后就上岸了。上岸后感到贼冷，赶紧披上浴巾，冲向温泉……</p><p>&#160; &#160; &#160; &#160;从温泉出来，回房间修整了一会，我们就披着浴衣往庙会赶去了（已经快七点了……）。没有座位了，于是只能端着盘子，边走边吃，无法好好拍照……</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_03.png?imageMogr2/thumbnail/1280x720" alt="@图. 贴纸纹身"></p><p>&#160; &#160; &#160; &#160;首先，拿一碟天妇罗炸虾当作前菜，外皮酥脆，咸淡适宜，一口闷下，体验极佳。我比较喜欢的是靠近玩乐街处的去骨牛肉和猪红牛杂，牛肉是比较西式的风味，搭配黑椒或者 BBQ 酱让人简直想一口十片！！牛杂则是比较经典的两广风味，让我想起在家时和兄弟们出去上网完毕后，一起去夜宵街食一碗牛杂粉的场景。想吃青菜就去港式菜品附近，有各种清炒蔬菜，这边还有美味的生滚及第粥、墨鱼咀和港式点心……</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_04.png?imageMogr2/thumbnail/1280x720" alt="@图. 去骨牛肉"></p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_06.png?imageMogr2/thumbnail/1280x720" alt="@图. 煲"></p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_07.png?imageMogr2/thumbnail/1280x720" alt="@图. 田螺"></p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_08.png?imageMogr2/thumbnail/1280x720" alt="@图. 茶"></p><p>&#160; &#160; &#160; &#160;实话说，庙会里的食物真是丰富多彩，我们从七点吃到了十点，但大概都还没吃到四分之一。由于没有座位，只能随随便便拍几张吃的了事……下次再来要好好摆盘拍一拍！！</p><p>&#160; &#160; &#160; &#160;吃到九分饱，我们就开始逛玩乐街，以消化消化肚子里的几斤食物。其实玩乐街里就是一些平常在广场上能看到的一些娱乐项目的变种，类似打气球、套娃娃、钓鱼……最好玩的还是押大小，小赌怡情，大赌发家！赌场附近混迹了二十来分钟，手上的票多出了十几张……</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_09.png?imageMogr2/thumbnail/1280x720" alt="@图. 大赌发家"></p><p>&#160; &#160; &#160; &#160;逛吃逛吃，然后到了十点，打锣收摊了，庙会街里的人也变得很少，于是我们开始疯狂装比拍照~</p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_10.png?imageMogr2/thumbnail/1280x720" alt="@图. 鱼"></p><p><img src="http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/picture_11.png?imageMogr2/thumbnail/1280x720" alt="@图. 石"></p><p>&#160; &#160; &#160; &#160;原本还有一张烟花券，可以去烟花场地领一盒烟花（就是一根一根拿在手上噼里啪啦的那种……），不过太累了，我们也就懒得去放了。回到房里洗洗漱漱，然后立马就摊死在床。</p><h2 id="后篇"><a href="#后篇" class="headerlink" title="后篇"></a>后篇</h2><p>&#160; &#160; &#160; &#160;第二天早上，吃了自助早餐，然后在附近随便逛逛，磨磨蹭蹭到中午。退房后，要到御瀛庄的门口去坐返程大巴。容易晕车的人，千万别坐红色的大巴，炒鸡臭，一上车我就晕了。晕了一路，好不容易到了港口，坐上船又是一阵摇摆，肚子里的东西疯狂翻滚！糟糕的返程体验，都怪红色大巴！！</p><p>&#160; &#160; &#160; &#160;不过总的来说吧，这次游玩的体验依旧很好，不管从硬件设施、服务质量，以及饮食方面来看，都能对得起人均 <code>1k2</code> 的价格，以后我们打算每年来一次！嚯嚯~</p><hr><h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><h2 id="关于订房"><a href="#关于订房" class="headerlink" title="关于订房"></a>关于订房</h2><ul><li>云来客栈大床套餐（包含无限次温泉，庙会自助晚餐，以及中/西式自助早餐），周末价格 <code>1850</code>，平日价 <code>1800</code>。</li><li>同样的附加配置，<strong>双人入格</strong>的房间比大床便宜 <code>400</code>，但是很难预订到周末的房（一般需要提前一两个月吧）。</li></ul><h2 id="关于交通"><a href="#关于交通" class="headerlink" title="关于交通"></a>关于交通</h2><ul><li>从深圳出发，可以<strong>从蛇口港坐船到九州港</strong>：<ul><li>可以到官网去预订船票，票价 <code>120</code>。</li><li>二号线坐到蛇口港站，出站后坐接驳车，大概 <code>3~4</code> 分钟就到港口。</li><li>蛇口港二楼也有很多取票机，憋挤在一楼排队取。</li><li>大概一小时就能到达九州港，然后度假村会有专门的大巴车接人。</li></ul></li><li>回程也坐船：<ul><li>度假村大巴送到九州港（注意，最好憋做<strong>红色的那个大巴</strong>，超级臭！）。</li><li>近期目的地是蛇口港的，需要到原大厅附近的一个像仓库一样的建筑去取票登船，可别走错了，注意看看入口附近的提示。</li></ul></li></ul><h2 id="自带物品"><a href="#自带物品" class="headerlink" title="自带物品"></a>自带物品</h2><ul><li><strong>套餐里面不包午餐的</strong>，所以需要自己带好两天的午餐，弄点干粮和饮料就好了（当然，钱多的可以直接吃那的餐厅，有点贵就是）。</li><li>温泉是<strong>男女共浴</strong>的，所以需要穿<strong>泳衣泳裤</strong>进入，可以自带，也可以用温泉那提供的免费的。</li><li>温泉区里有一个游泳池，喜欢游泳的还可以带上<strong>泳镜</strong>，不过泳池相对来说就冷了点。</li></ul><h2 id="关于住宿"><a href="#关于住宿" class="headerlink" title="关于住宿"></a>关于住宿</h2><ul><li>注意，云来客栈这<strong>规定是下午 3 点后入住，下午 1 点前退房</strong>，来早了得等。</li><li>我们是下午 1 点左右到的，服务员说可以先寄存包裹然后去泡温泉，但是我们还是想先入住再去泡，于是在大厅找了个位子吃午餐。</li><li>在摆放钢琴的附近，有一些小孩子的玩意儿，可以拿来消磨时间，我们俩呆在那玩到了 2 点多……</li><li>到了 <strong>2 点左右就可以去问问前台是不是已经能入住了</strong>，正常情况下应该是可以的。</li></ul><h2 id="关于温泉"><a href="#关于温泉" class="headerlink" title="关于温泉"></a>关于温泉</h2><ul><li>第一次去温泉区，需要录入指纹，之后就可以刷指纹进去了，在<strong>退房前可以随意进出</strong>。</li><li>建议不要待在池里太久，十多二十分钟就该起来休息休息了。</li><li>温泉区内有一个挺大的休息区，泡得累了可以去那吃点东西休息休息，有一些自助水果、面包果酱，还有无限饮料（汽水，以及雀巢咖啡机的各种）。</li><li>区内有两层（露天的），需要注意一下，住店客人存包有一个集中的区域，然后男的是在一楼，女的有一楼和二楼，所以<strong>情侣去的时候要注意一下，男生会从一楼进入温泉区，而女生可能会从二楼进入</strong>。</li><li>可以带手机进入，但是<strong>建议大家不要在里面拍照，很不文明</strong>（你在拍照的时候很容易拍到别人，特别是周末人多的时候）。考虑到这点，我们就没带手机。</li></ul><h2 id="关于饮食"><a href="#关于饮食" class="headerlink" title="关于饮食"></a>关于饮食</h2><ul><li>晚餐，庙会自助餐：<ul><li><strong>建议早点排队，6 点开始入场，去晚了就没位子，只能端着盘子边走边吃</strong>。</li><li>第一次入场，会有人在你手上贴一个<strong>贴纸</strong>，之后在庙会开发期间就可以凭此随意进出了。</li><li>进场后，服务员会给我们安排一个桌位，并在桌上放上一个<strong>占座牌</strong>，然后我们就可以毫无顾虑地逛庙会，搜刮美食了。</li><li>游戏区 8 点以后会开放，用<strong>入场时发的衙票</strong>可以加入游戏。</li></ul></li><li>早餐：<ul><li>入住时，会让你选择是<strong>中式早餐</strong>还是<strong>西式早餐</strong>。</li><li>我们选择了中式，刚进入时会看到三个窗口，都是现做的食物（<strong>肠粉，煎蛋，有机蔬菜</strong>），建议都去拿一份。</li><li>建议 8 点前去吃，接近 9 点时会人多。</li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/travel_YuWenQuan/TitleImg_v1_3.png?imageMogr2/thumbnail/1280x720&quot; alt=&quot;@图. 题图&quot;&gt;&lt;/p&gt;
&lt;p&gt;时间：2018.01.13 ~ 2018.01.14&lt;br&gt;地点：深圳 —— 珠海御温泉&lt;br&gt;人物：石 &amp;amp; 鱼&lt;br&gt;花费：人均 1200+ RMB&lt;br&gt;（多图预警）&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://blog.StoneAndFish.xyz/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="度假" scheme="http://blog.StoneAndFish.xyz/tags/%E5%BA%A6%E5%81%87/"/>
    
      <category term="游记" scheme="http://blog.StoneAndFish.xyz/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>[翻译社第一期] 云计算相关技术前瞻性研究</title>
    <link href="http://blog.StoneAndFish.xyz/2018/01/19/Translation1st/"/>
    <id>http://blog.StoneAndFish.xyz/2018/01/19/Translation1st/</id>
    <published>2018-01-19T11:18:56.000Z</published>
    <updated>2018-06-10T15:38:52.682Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_1.png" alt=""></p><h1 id="本期成果"><a href="#本期成果" class="headerlink" title="本期成果"></a>本期成果</h1><ol><li><a href="https://cloud.tencent.com/developer/article/1014429" target="_blank" rel="noopener">20分钟搞定——通过Docker部署Spring Boot应用程序到Bluemix云计算平台</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1015707" target="_blank" rel="noopener">利用IBM云功能构建无服务器应用程序</a>（云计算专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1016118" target="_blank" rel="noopener">容器技术，还处在起点阶段</a>（个人专栏）</li><li><a href="https://cloud.tencent.com/developer/article/1018632" target="_blank" rel="noopener">用于增强数据治理能力与法规遵从性的容器</a>（云计算专栏采纳）</li><li><a href="https://cloud.tencent.com/developer/article/1019334" target="_blank" rel="noopener">在 Docker 平台和 Moby 项目中加入对 Kubernetes 的支持</a>（云计算专栏采纳）</li></ol><a id="more"></a><h1 id="心得体会"><a href="#心得体会" class="headerlink" title="心得体会"></a>心得体会</h1><h2 id="入社契机"><a href="#入社契机" class="headerlink" title="入社契机"></a>入社契机</h2><ul><li>这是我第一次主动加入网络社群，并且在里面做了一些实际的事情。</li><li>说起我加入<a href="https://cloud.tencent.com/developer/translation" target="_blank" rel="noopener">云+翻译社</a>的契机，大概就是某天下午上班时，在编译项目时，忙里偷闲玩了玩手机，忽然收到了一条短信：<br><img src="http://p2qnogvkv.bkt.clouddn.com/blogImage/translation1st/picture_01.png" alt="@图. 腾讯云短信"></li><li>这满满的广告感，居然没有被拦截……刚开始我还想的是，这是不是陷阱短信？点了链接后怕是要出事哦。</li><li>但是翻译社这个词终究还是吸引到我了——因为最近我也打算持续做一些技术文档的翻译，了解了解新技术，其中很感兴趣的还可以自己尝试尝试。</li><li>但是短信里的链接我还是不想点的，于是我上 <a href="https://cn.bing.com/" target="_blank" rel="noopener">Bing</a> 去搜了一下，发现还真有个腾讯云的翻译社，近期正在招人。<strong>看起来会有很多技术文档资源，而且是以领取任务的形式来完成翻译，并且有一定的竞争机制（一篇文章最多有 3 个人各自翻译，最后官方会从交付的版本中选出比较好的一篇采纳），这提起了我的兴趣。</strong></li><li>想想前两个月<a href="http://blog.csdn.net/qq_16775897/article/details/78307276" target="_blank" rel="noopener">翻译了大半的 Android HIDL 官方文档</a>，由于官方后来出了<a href="https://source.android.com/devices/architecture/hidl/" target="_blank" rel="noopener">标准的中文版</a>（似乎需要科学上网），我就没有继续往下翻译了，翻译节奏也就断了。于是我就想，这也许是一个机会，让我能有动力去持续地完成翻译这件事。</li><li>于是我就直接申请加入了，加入的条件很简单，就是填一些基本信息，然后翻译一段话，随后就等着审核通过了。提交申请后，不久我就成为了翻译社的一员。如果有人看了我的描述，想要加入翻译社，<strong>可以点击<a href="https://cloud.tencent.com/developer/translation/apply?code=e51a166be0" target="_blank" rel="noopener">友情邀请链接</a>去申请加入（这样算是我邀请的，邀请成功我就会有一点成长值奖励~）。</strong></li></ul><h2 id="活动体会"><a href="#活动体会" class="headerlink" title="活动体会"></a>活动体会</h2><ul><li>加入社区后，就开始接第一期活动里的任务了。这一期的主题是<strong>云计算相关技术前瞻性研究</strong>，其实我对这块技术完全是生疏的，翻译相关的技术文档对我来说还是有挺大挑战的，不过好在我发现有不少比较简短的文章（类似于新特性介绍、软件或云服务操作简介），这些挺适合我这样的翻译菜鸟锻炼翻译技能的，于是我就领了一些开始翻译。</li><li>进入网站的翻译页面时，<strong>官方已经用翻译机器给出了机译版本，我们可以根据原文语境，在这基础上做修改、润色。</strong>这样就能提高大家的翻译效率了（其实有时候机译很坑，会误导新手。不过大部分时候还是能有所提高的）。</li><li>除了默认的机译版，我还需要用到有道云翻译去查一些词、句，毕竟词汇量贫乏……希望之后能慢慢改善吧。</li><li>有时候，一些<strong>专业名词、领域相关的动作（操作）</strong>，翻译软件无法给出正确信息。这时候我就得去百度、Bing，还有 Google（不存在的…）上去查，有时候百科、Wiki 能查到解释，有时候还得研读别人写的相关技术文章，先把这个名词或者操作背后的真实含义理解了，才能翻译出来。<strong>在这些求解的过程中，我感觉真的能学到许多东西。</strong></li><li>还有一些地方，我是想破脑袋，看了好多文档，还是不知道如何翻译是好，于是就到社区 QQ 群里请教大佬，经过诸多大佬的一番教育后，我也就找到了比较合适的解释。比如在文章 3 中，有一段 <code>Kubernetes orchestration compliment Docker and work together very well</code>，这个 <code>Kubernetes orchestration compliment Docker</code>，按照字面意思翻译会很奇怪——<code>Kubernetes 的编排称赞 Docker</code>，我觉得它主要的意思是 Kubernetes 和 Docker 相互促进，可以很好地协同工作，但是总感觉这样翻译，前半段与原文有比较大出入。请教大佬后，发现我的思路算是正确的，但是在翻译过来的措辞还是需要做些修整，于是我最终翻译成 <code>Kubernetes 对于 Docker 的支持很好，搭配使用效果更佳。</code>，虽然解释得还是不完美，但是读起来通顺许多，并且意义上应该也不会有太大出入。</li></ul><h2 id="还需改进"><a href="#还需改进" class="headerlink" title="还需改进"></a>还需改进</h2><ul><li><strong>翻译时其实碰到了很多专业术语，但是忘了一一记录下来，这点需要改进。不只是记录一些常见的专业名词，那些比较罕见的名词更应该记录下来，还有那些神秘的专业操作也应该及时记录……</strong></li><li><strong>要及时总结，把个人觉得翻译得比较好的、或者觉得很难翻译句子记下来，有机会时可以与大佬们讨论讨论。</strong></li><li><strong>时间比较多时也可以看看别人翻译的文章，取其精华，并融入到自己的翻译中。</strong></li></ul><hr><h1 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h1><ul><li><strong>IaaS</strong>：<ul><li>Infrastructure as a Service，基础设施服务。</li><li>云服务最底层，仅提供一些基础资源。</li><li>用户需要自己控制底层，实现基础设施的逻辑。</li></ul></li><li><strong>PaaS</strong>：<ul><li>Platform as a Service，平台服务。</li><li>提供软件部署平台，抽象掉硬件与系统细节，可无缝扩展。</li><li>开发者只需关注自身业务逻辑，而不需考虑底层细节。</li></ul></li><li><strong>SaaS</strong>：<ul><li>Software as a Service，软件服务。</li><li>软件的开发、管理、部署都交给第三方，不需要关心技术问题，拿来即用。</li></ul></li><li><p><strong>FaaS</strong>：</p><ul><li>Function as a Service，功能服务。</li><li>与 Serverless Architecture （无服务架构）密切相关。</li></ul></li><li><p><strong>Public Cloud</strong>：</p><ul><li>公共云。</li><li>基于标准云计算的一个模式，服务供应商创造诸如应用与存储之类的资源，而公众可以通过网络获取这些资源。</li><li>简易、便宜，满足需求的扩展性，没有资源浪费。</li><li>带宽问题、安全性问题。成本难以预测，失去对兼容性的直接控制。</li></ul></li><li><p><strong>Hybrid Cloud</strong>：</p><ul><li>混合云。</li><li>公共云与私有云的混合体，是近年云计算的主要模式与发展方向。</li><li>兼顾私有云的安全性与公共云的计算资源。</li></ul></li><li><p><strong>Blue-Green Deployment</strong>：</p><ul><li>蓝绿部署。</li><li>意义：整个发布过程，用户没有感受到任何宕机或者服务重启。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p2qnogvkv.bkt.clouddn.com/image/translation/TransClub_v1_1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;本期成果&quot;&gt;&lt;a href=&quot;#本期成果&quot; class=&quot;headerlink&quot; title=&quot;本期成果&quot;&gt;&lt;/a&gt;本期成果&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1014429&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;20分钟搞定——通过Docker部署Spring Boot应用程序到Bluemix云计算平台&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1015707&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;利用IBM云功能构建无服务器应用程序&lt;/a&gt;（云计算专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1016118&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;容器技术，还处在起点阶段&lt;/a&gt;（个人专栏）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1018632&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;用于增强数据治理能力与法规遵从性的容器&lt;/a&gt;（云计算专栏采纳）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1019334&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在 Docker 平台和 Moby 项目中加入对 Kubernetes 的支持&lt;/a&gt;（云计算专栏采纳）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://blog.StoneAndFish.xyz/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Translation" scheme="http://blog.StoneAndFish.xyz/tags/Translation/"/>
    
      <category term="技术文档翻译" scheme="http://blog.StoneAndFish.xyz/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    
      <category term="腾讯云+翻译社" scheme="http://blog.StoneAndFish.xyz/tags/%E8%85%BE%E8%AE%AF%E4%BA%91-%E7%BF%BB%E8%AF%91%E7%A4%BE/"/>
    
  </entry>
  
</feed>
