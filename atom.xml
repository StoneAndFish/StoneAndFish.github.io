<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>石锅鱼的锅</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://StoneAndFish.cn/"/>
  <updated>2020-02-03T13:53:15.636Z</updated>
  <id>http://StoneAndFish.cn/</id>
  
  <author>
    <name>StoneDemo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[石头 · 记] 化国纪2020</title>
    <link href="http://StoneAndFish.cn/2020/02/03/Thinking20200203/"/>
    <id>http://StoneAndFish.cn/2020/02/03/Thinking20200203/</id>
    <published>2020-02-03T13:51:20.000Z</published>
    <updated>2020-02-03T13:53:15.636Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/02/03/PzwZpHVcSvfIQ4u.jpg" alt="化国纪实-1.jpg"></p><p>其实没什么内容，只是在家时间多了以后，想尝试一下不同的排版风格。<br><a id="more"></a></p><h2 id="偏纪实？"><a href="#偏纪实？" class="headerlink" title="偏纪实？"></a>偏纪实？</h2><p>比较纪实风格的，就是直接原图里融入文字，感觉这种风格比较适合我吧。</p><p><img src="https://i.loli.net/2020/02/03/UznBWfh9kEKGLRa.jpg" alt="化国纪实.jpg"></p><p>来来来，吃个美味小蛋糕，一份 5 元。</p><p><img src="https://i.loli.net/2020/02/03/eqPGghWZTXmfEda.jpg" alt="美味小蛋糕.jpg"></p><h2 id="夸张点？"><a href="#夸张点？" class="headerlink" title="夸张点？"></a>夸张点？</h2><p>偶尔也想换换风格，来几个色彩夸张点的吧。</p><p><img src="https://i.loli.net/2020/02/03/DG46zQvkXJuyoaN.jpg" alt="化国春日-粉.jpg"></p><p><img src="https://i.loli.net/2020/02/03/yCVbwdKQPtgUAiI.png" alt="化国春日-蓝.png"></p><p><img src="https://i.loli.net/2020/02/03/p3kWwe1ZuINOK9a.jpg" alt="化国春日-橙.jpg"></p><p>亥呀，色彩搭配还是得多学习学习。</p><p>另外原图的意境似乎也不够搭调啦，自己感觉就粉色那张合适一些。</p><p><img src="https://i.loli.net/2020/02/03/Dm9ps1RgUhjHwle.png" alt="化国春日-灰.png"></p><p>最终还是黑白灰系列的颜色适合我啊…</p><h2 id="玩玩视频"><a href="#玩玩视频" class="headerlink" title="玩玩视频"></a>玩玩视频</h2><p>开始玩抖音了，尝试一下新鲜的事物（抖音号：stonedemo</p><p>先尝试一些食物和宠物系列的剪辑，纪实短视频系列…</p><p>想继续当 up 主了（其实也就发过一个视频</p><p>AMD 还是打算走单一素材的风格，多素材混剪太耗费精力了。</p><p>跟风玩玩 VLog 嗷，打算找时间再借下黑卡6/7或者A系列的 Vlog 神器来试试（其实年中要出的下一代手机应该也阔以</p><p>收音感觉会是比较难搞的问题，试试以前买的那个录音笔？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/03/PzwZpHVcSvfIQ4u.jpg&quot; alt=&quot;化国纪实-1.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实没什么内容，只是在家时间多了以后，想尝试一下不同的排版风格。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="度假" scheme="http://StoneAndFish.cn/tags/%E5%BA%A6%E5%81%87/"/>
    
      <category term="光影" scheme="http://StoneAndFish.cn/tags/%E5%85%89%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>[石头 · 记] 新年快乐</title>
    <link href="http://StoneAndFish.cn/2020/02/02/Thinking20200202/"/>
    <id>http://StoneAndFish.cn/2020/02/02/Thinking20200202/</id>
    <published>2020-02-01T16:54:57.000Z</published>
    <updated>2020-02-01T16:57:24.727Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/02/02/QoJzkgOcKwYaBS3.jpg" alt="一月合集-15_upload.jpg"></p><p>2020 年的开头，太多想不到。</p><p>这个年，过得很慢，很迷糊。<br><a id="more"></a></p><h2 id="蔓延的病毒"><a href="#蔓延的病毒" class="headerlink" title="蔓延的病毒"></a>蔓延的病毒</h2><p>春节提前了两天回家，彼时武汉新病毒刚开始爆炸。</p><p>那天下班回家拿行李，看到楼下药店里排起了长队，我也跟风去买了一包口罩。</p><p>去机场的路上，许多人已经戴上了口罩，一只只口罩之下，是难掩的恐惧。</p><p>回到南宁，那天去航洋西贝吃了一餐，一路上人都很少，但也许是因为过年人们都回老家了吧。</p><p>当时并没想到会演变成今天这样。</p><p>过了两天，事态越发严重，各个省陆续拉响了最高级的警报，药店里再也没法买到口罩。</p><p>城市开始严查流动人口，从武汉出来的人们大概是最憋屈的了吧，到哪都被重点关注。</p><p>除夕那天，街上已经没有什么人在走动了，各个商铺也是十分默契地关上了大门，县城迎来近几年最冷清的一次除夕。</p><p>那天晚上居然下起了冰雹，已经十几年没有下过雨的除夕，竟然在今年下起了冰雹，家中的长辈都在嘀咕，这肯定是有大事要发生。</p><p>原本每天晚上的夜宵活动不得不停止，一年一度的兄弟聚餐也宣告失败。</p><p>现在回到了深圳，也只能一整天宅家里，虽然出了大太阳，但也只能抽出一两个小时在附近溜达溜达，去超市买点食物。</p><p>每天醒来看到深圳的病例增长数量，总觉得自己被关进了毒气房里。</p><p>不知道什么时候才能恢复正常，希望这种等级的警戒，只持续半个月就好了。</p><h2 id="一些意外"><a href="#一些意外" class="headerlink" title="一些意外"></a>一些意外</h2><p>有一些意外的事。</p><p>某天醒来的时候，瞥了一眼手机，突然看到弹出来一个新闻：科比坠机。</p><p>还以为是没清醒，但打开各大咨询软件后，消息铺天盖地袭来。</p><p>我对篮球圈不太感兴趣，但科比的大名依旧如雷贯耳。</p><p>「凌晨四点的洛杉矶」就这么带着他的小女儿陨落了。</p><p>你永远不知道，「明天」和「意外」哪个先来。</p><p>回到深圳后，听闻初中好友自杀的消息，心中更是沉重。</p><p>总觉得开年的这些事件，真是太过不可思议。</p><p>是不是游戏着这个宇宙的家伙，选错了支线。</p><h2 id="要开工了"><a href="#要开工了" class="headerlink" title="要开工了"></a>要开工了</h2><p>抗疫还在继续，工作也同样需要继续。</p><p>不开工，大家拿什么吃饭呢。</p><p>3 号开始就先在家里办公了，一个星期。</p><p>明天先看看怎么把 VPN 搞起来吧。</p><p>说不定真的是一个转折点，远程办公会逐渐成为一种趋势。</p><p>其实远程办公很适合深圳人，因为深圳人一周里百分之九十以上的可用时间都在公司里度过，如果平时晚上，至少周末，能远程办公支持，那很多人就能开始有自己的生活，自己的空间。</p><p>我是挺向往这样的工作 &amp; 生活的，这定是通往 life work balance 的一条康庄大道。</p><p>当然公司的一些高层大概是不会这么想的吧。</p><p>有些人尝到了疯狂加班的甜头，就收不了手了，但得利最多的是他们，不是我们。</p><p>大家都是利己主义者，没有理由为这些奉献过多的时间精力。</p><p>实话。</p><h2 id="想说说后面的计划"><a href="#想说说后面的计划" class="headerlink" title="想说说后面的计划"></a>想说说后面的计划</h2><p>工作中的计划，当然没法细说，还是按部就班来吧。</p><p>想办法从无尽的 Bug 中抽身出来，提升整体思考的能力，目前还是想往架构师方向去发展。</p><p>另外，如果今年还是每天 12 点后下班，没有周六，有时候连周日都被吃掉，那就赶紧走人吧。</p><p>工作之余，嗯…虽然余得很少，但还是能挤出时间的吧…</p><p>数学建模很有趣，目前已经在学习中，看的还是我们厦大的网课…</p><p>图形学，还是很想玩，AI 海报设计，阿里美团什么的似乎已经对 Banner 玩得很熟了，想看看有没有好的资料学一学，做个开源的玩玩。</p><p>抖音上虽然有很多土味内容，但这个平台还是很有意思的，感觉现在视频制作门槛降得很低了，idea 为王的时代，我也想有自己的一方天地。多年没有做剪辑的我心动了。</p><p>最近闲着的时候，看了日综「校园疯神榜」，觉得这些关于校园的企划真的很有趣。</p><p>「ああ，これこそ青春だというものだ！」</p><p>这才是青春啊！！</p><h2 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h2><p>风雨之后，希望迎来的是彩虹。</p><p>这里大概没几个人会看到吧，但还是要祝各位</p><p>「新年快乐」。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/02/QoJzkgOcKwYaBS3.jpg&quot; alt=&quot;一月合集-15_upload.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;2020 年的开头，太多想不到。&lt;/p&gt;
&lt;p&gt;这个年，过得很慢，很迷糊。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="思考" scheme="http://StoneAndFish.cn/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="小矫情" scheme="http://StoneAndFish.cn/tags/%E5%B0%8F%E7%9F%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>[石头 · 记] 无题</title>
    <link href="http://StoneAndFish.cn/2020/02/01/Thinking20200201/"/>
    <id>http://StoneAndFish.cn/2020/02/01/Thinking20200201/</id>
    <published>2020-01-31T19:19:22.000Z</published>
    <updated>2020-01-31T19:50:02.060Z</updated>
    
    <content type="html"><![CDATA[<p>昨天忽然听闻一个让我震惊的消息。</p><p>初中时很要好的玩伴跳桥自杀了。<br><a id="more"></a></p><h2 id="辗转难眠"><a href="#辗转难眠" class="headerlink" title="辗转难眠"></a>辗转难眠</h2><p>看到消息的时候是深夜一点左右吧，躺床后按照惯例先玩一玩手机。</p><p>忽然瞥到群里提及到一个很熟悉的名字，姑且称为 Y 君吧。</p><p>我想着，怎么突然说到他呢？语气很震惊的样子，便问了一句，他怎么了？</p><p>得到的回复是，自杀了。</p><p>我一时间还不敢相信，一番追问查探后，却得到了十有八九的确认信息。</p><p>是夜，辗转难眠。</p><p>初中时代，应该过去十三四年了吧，很多人和事都忘却了。</p><p>但听到这个消息后，回忆忽然就从大脑深处迸发出来，怎么也压不下去。</p><h2 id="与-Y-君，初中时代"><a href="#与-Y-君，初中时代" class="headerlink" title="与 Y 君，初中时代"></a>与 Y 君，初中时代</h2><p>说到初中，首先会想到一首歌。</p><p>「玫瑰花的葬礼」</p><p>当然，与 Y 君的主要回忆，是在这首歌发行之前的了。</p><p>应该是初一到初二中间这段时间吧？具体的时间总是难记住。</p><p>嗯…对了，有一个比较印象深刻的事件。当时汶川大地震，全国娱乐网站、游戏都停掉那天，我们正好和往常一样中午逃出学校去上网，应该去的是巷子深处的那家「雷龙网吧」。</p><p>那天中午我们各自玩起了单机游戏，我玩的是红色警戒。</p><p>是了，05 年的 5 月，正是初一下学期的末尾。</p><p>当时的二中，属实混乱、破烂。</p><p>不过我也不是什么好鸟，很快就学会混出校门的技巧，经常和狐朋狗友们出去上网。</p><p>同班同宿舍的 Y 君也是上网大军的一员。</p><p>Y 君是个挺直的人，敢说敢做，头脑也很灵活。他数学很好，或许是在学力上跟我有挺多共通点，所以我们当时很玩得来吧，也算是无话不谈的密友了。</p><p>记得我每个星期只有 60 块生活费，那时物价还低，平常经常吃泡面的话还能匀出一些钱，每天中午在网吧里奋战一个半小时。</p><p>后来不知道谁在去网吧必经之路上的赌场（用投币游戏机赌，赚的硬币可以换回 RMB）靠一种类似跑马的机器，嗯，就是那种选车的品牌（奥迪、宝马…）的机器稳定赢上网钱，于是我们也去尝试了一下。</p><p>结果发现，经常能用 5 块钱的硬币赢到 10 块、20 块。</p><p>这下，我们每天中午的路径就发生了变化：先去搏一搏，如果赢了钱，就去吃碗粉，然后上网。当然，有时候不赔不赚，就直接去上网了，如果亏掉了，那可能中午就无所事事或者老老实实回去了。</p><p>嗦粉，我们最喜欢是去到大高附近的那家「蓝波粉店」，汤粉特别好吃，店长秘制高汤很给力。</p><p>吃着粉，聊着各种各样的话题，吐槽着各种学校里发生的事件。</p><p>这家粉店现在还开着，前几天路过，感觉还是老样子。</p><p>现在想想，有些物是人非的伤感了。</p><p>明年回去，去那吃一次早餐吧，看看是否有记忆中的那味道。</p><p>后来门卫开始严格检查一些，想混出去就比较难了，也就没法每天都出去上网了，虽然偶尔也是能借到两张外宿证出去娱乐娱乐。</p><p>于是中午的娱乐活动开始变成留在教室里面玩游戏王、下象棋、看小说等等。</p><p>不过当时中午是不给留在教室里的，教学楼底下的门会锁上。我们都是下完最后一节课后，匆匆吃个饭就溜回教室，躲在靠门的最后一排，这样基本上就不会被人发现。</p><p>日常活动之一就是「游戏王」对拼了，不过我也只是一时兴起，没多少研究，于是总被他吊打。</p><p>另一个重点活动就是「下象棋」。象棋是我在家和老妈闲时娱乐时学会的，觉得很有意思，正好有人有道具，我们就借用来玩玩。对局几次后，便上瘾了，有挺长一段时间我们都懒得去上网，天天中午就在那下象棋。</p><p>说到看小说，当时市面上比较流行的是 MP4 了，MP3 就便宜了很多。</p><p>Y 君不知道从哪买了个 MP3，居然还能看小说，那个显示屏一次也就能看到 2、3 行，</p><p>他还是看得紧紧有味，即便是要一直点击「下一首」的按钮。</p><p>没过多久，按键坏掉了，他也没修，后来也不怎么看小说了。</p><p>初二后，分了班，分了宿舍，联系便少了些。</p><p>初中毕业后，我去了地高，他应该是在大高吧，基本就再也没有了联系。</p><h2 id="心情"><a href="#心情" class="headerlink" title="心情"></a>心情</h2><p>每次路过大高附近那家「蓝波粉店」的时候，都会想起我曾经有过这么一位好友。</p><p>有时候也会想，Y 君最近怎么样了，大学考去哪儿了，以后是不是在同学聚会上还能见面。</p><p>早晨醒来，看到兄弟们在群里确认，就是 Y 君后，我的心情便变得沉重起来。</p><p>往事历历在目，回想起来感觉就只是一两年前的事情。</p><p>前两天散步的时候，还路过了那个跳桥地点，还在那附近拍了日落的延时。</p><p>好友，没想到再次听到你的消息，竟是以这样的方式。</p><p>好友，你可能不知道，你的母亲随后也跳了下去。</p><p>好友，你本能在中科大顺利毕业，找个好工作，真正开始享受自己的人生。</p><p>好友，事件的全貌，个中委屈，或许只有你自己才知道了。</p><p>好友，希望你一路走好。</p><p>或许真的「人生不如意事十之八九，能与他人言之二三」。</p><p>但我真的希望，身边的各位好友，各位兄弟，有困难一定要说出来，有憋屈的事就在群里面发泄发泄，别一时冲动就放弃了自己。</p><p>毕竟，我们还有这么长的一段人生路要走啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天忽然听闻一个让我震惊的消息。&lt;/p&gt;
&lt;p&gt;初中时很要好的玩伴跳桥自杀了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="回忆" scheme="http://StoneAndFish.cn/tags/%E5%9B%9E%E5%BF%86/"/>
    
  </entry>
  
  <entry>
    <title>[石头 · 记] 非典型深漂的假日</title>
    <link href="http://StoneAndFish.cn/2019/10/07/20191007/"/>
    <id>http://StoneAndFish.cn/2019/10/07/20191007/</id>
    <published>2019-10-07T14:27:33.000Z</published>
    <updated>2019-10-07T15:53:09.899Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/10/07/UmNT2oq8CQIHGuh.png" alt="糖醋排骨.png"></p><p>思维总被打碎，生活也越来越琐碎。</p><p>作为一个非典型深漂，我的假日大概不外乎这几个关键词：</p><p>猫，摄影，解 BUG。<br><a id="more"></a></p><h2 id="周日与周六"><a href="#周日与周六" class="headerlink" title="周日与周六"></a>周日与周六</h2><p>周六是猫，因为领养那天是周六。</p><p><img src="https://i.loli.net/2019/10/07/auUig9STdQY18jb.png" alt="大盘猫.png"></p><p>我们的下一只猫应该不会叫周日，那样太单调递增了。</p><p>深漂的代码搬运工，周末大概率指的是周日吧。</p><p>常常累得一匹。</p><p>只想睡到中午，起床，煮两包汤达人分别代表早餐午餐，然后宅在家里玩玩电脑，看看投影，顺带戏耍戏耍周六。</p><p><img src="https://i.loli.net/2019/10/07/xIlHsaY4SWhEtJb.gif" alt="VID_20190828230551_gif.gif"></p><p>突然想到，如果下次领养一只肥黄，它的一个重量级备选名字就是：大炮。</p><h2 id="南山男在南山南"><a href="#南山男在南山南" class="headerlink" title="南山男在南山南"></a>南山男在南山南</h2><p>南山男在南山，真的有点难。</p><p>但上南山南，并不难。</p><p><img src="https://i.loli.net/2019/10/07/4p5EKM6dcNYZ2yv.jpg" alt="JanePhoto_1570293123923.jpg"></p><p>偶尔不宅，走运碰上不差的天气，恰巧欣赏到了南山南的日落美景。</p><p><img src="https://i.loli.net/2019/10/07/RVChsNgmiETxXn4.jpg" alt="南山日落-48.jpg"></p><p>时不时划过天际的飞机，恰到好处地点缀了这幅画面。</p><p><img src="https://i.loli.net/2019/10/07/uahsPXirnKOTBmN.jpg" alt="南山日落-47.jpg"></p><p><img src="https://i.loli.net/2019/10/07/lAwoEyFCb4VnQmj.jpg" alt="南山日落-53.jpg"></p><p>图像记录下来的只是美丽，眼睛看到的不仅仅是震撼。</p><p><img src="https://i.loli.net/2019/10/07/fvdMtqT3i4npQZx.gif" alt="VID_20190922182813.gif"></p><p>高处不胜寒。</p><p>吹着山顶的风，欣赏天地丹青，疲惫的身心多少能恢复一些元气。</p><h2 id="烟火要从上面看"><a href="#烟火要从上面看" class="headerlink" title="烟火要从上面看"></a>烟火要从上面看</h2><p>国庆假期当然不会从一号开始。</p><p>海边大厦的 33 楼还有群社会主义加班人，孜孜不倦。</p><p>但这天的夜晚有些不同以往。</p><p>人才公园里的座位上都是有头有脸的各界代表，路边站满了闻风而来的各界群众。</p><p>大厦里的人们也纷纷放下手中的代码，找好了最佳角度，等待。</p><p>「打上花火」</p><p><img src="https://i.loli.net/2019/10/07/TOXZtQ78scI1MzA.gif" alt="VID20191001201527_gif_1.gif"></p><p><img src="https://i.loli.net/2019/10/07/uCeaIiwGROJSgcm.gif" alt="VID20191001201527_git.gif"></p><p>升起的烟花，要从下面看？还是从侧面看？</p><p>哈，我们可以从上面看。</p><p><img src="https://i.loli.net/2019/10/07/3eE1SwDQoXn2TBz.jpg" alt="JanePhoto_1570292735790.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/10/07/UmNT2oq8CQIHGuh.png&quot; alt=&quot;糖醋排骨.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;思维总被打碎，生活也越来越琐碎。&lt;/p&gt;
&lt;p&gt;作为一个非典型深漂，我的假日大概不外乎这几个关键词：&lt;/p&gt;
&lt;p&gt;猫，摄影，解 BUG。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="猫" scheme="http://StoneAndFish.cn/tags/%E7%8C%AB/"/>
    
      <category term="思考" scheme="http://StoneAndFish.cn/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>[石头 · 记] 突然杂念</title>
    <link href="http://StoneAndFish.cn/2019/09/08/20190908/"/>
    <id>http://StoneAndFish.cn/2019/09/08/20190908/</id>
    <published>2019-09-08T12:46:47.000Z</published>
    <updated>2019-09-08T12:54:46.316Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/09/08/e7MFWhuQSEZDAo3.jpg" alt="微信图片_20190908183802.jpg"></p><p>转眼间就快一年了。<br><a id="more"></a></p><h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><p>其实几个月前 stoneandfish.xyz 这个域名就已经过期了，七牛云图床也早就需要备案才能使用了，整个 blog 就这样荒废… CSDN 上面好像也有人留言说博客进不来了囧…</p><p>自从换工作以后，忙的一匹，前几个月更是天天凌晨回家，完全没有什么闲心去写点什么东西，好不容易有个周日休息就只想躺着一整天什么也不思考。</p><p>所以拖到现在，才重新整理了一番，换了 SM.MS 图床（希望这个图床能长久些…不要被某部门给端了…），域名换成了 stoneandfish.cn，删掉了关于翻译的文章（毕竟已经发到 CSDN 上了），还有一些不必要的信息等等…</p><p>相当于重新开张了⑧~以后还是更新一些比较偏生活化的东西到这边，纯技术向的还是放在 CSDN 比较好，也比较能发挥价值。</p><h2 id="绿厂"><a href="#绿厂" class="headerlink" title="绿厂"></a>绿厂</h2><p>去年 11 月的末尾正式入职了绿厂，然后开始了无止尽的加班人生。只能说天道好轮回，入职之前的 11 个月我都是下午6点多准时下班溜回家的，入职之后就再也没有 10 点之前回家过了。</p><p>被分配到了搞 MTK 平台项目的组里，说实话一开始我是有点不太愿意的，毕竟以前看的比较深入的都是高通平台方面的内容，而且对 MTK 的底层代码印象比较差…</p><p>但是终究并不是我能去选择的，好嘛，老老实实进入项目节奏。正逢 MTK 首个 Camera HAL3 项目，所有人都不熟，很多地方走在走弯路，工作效率惨不忍睹，还好 MTK 的支持力度很大，直接派来十几位兄弟长期驻守在公司会议室，有问题直接提上 Case 现场 debug。</p><p>刚开始接手的是「HDR Feature」的移植维护。其实 Realme 那边的人已经初步移植上来，能够跑通流程了的，我们这边也就照搬过来，但是后续还有一堆细节问题要处理，搞了十几天才真的算是正常运转。</p><p>过了两星期，好家伙，组长突然让我扛起「性能分析」的大旗。What？这是什么鬼东西，没搞过啊？总之就这么迷糊地接下了这个大坑。时至今日 MTK 项目的性能问题还是我在负责主导分析和优化…要不是前两个月招了不少人，组里又分配个新人老哥帮我分摊一点性能问题，我特么得累死。F11 Pro 和 Reno Z 这两个项目真是搞得脑壳疼，还好最后都顺利发出去，也没有什么严重市场问题。</p><p><img src="https://i.loli.net/2019/09/08/VPaIvFsO4Cch5eo.jpg" alt="沙巴度假-110.jpg"></p><p>（show 一下自己用来 debug 的工程机…）</p><p>性能优化是非常需要架构层面的大局观的，可惜我主导了将近一年，很多时候还是只着眼于某几个细节，看来还是需要像以前一样，多去分析系统架构，虽然现在不像以前这么闲可以慢慢看，但也必须抽时间来抽象总结，否则就完全陷入到项目里面出不来了。</p><p>最近被拉去当 SE 了，没有最忙只有更忙。更别说下一个项目，新芯片新平台，新的流程架构，好家伙，还要把性能功耗问题归起来一起搞？！然后还要当某衍生项目的 SE，想想就是猛男落泪…</p><p><img src="https://i.loli.net/2019/09/08/ZR1nmYI9Dls3xAT.jpg" alt="靓仔落泪.jpg"></p><p>忙归忙，但是￥管够啊，环境也相对舒适，除了在深圳湾万象这里工作餐有点贵，其它都还好…这几个月 Linkedin 上面又有不少猎头发来信息，有字节跳动、腾讯、华为、大疆等等…现在基本上没什么兴趣了…这几家，去哪家不都是要疯狂加班，看开了大兄弟。</p><h2 id="周六"><a href="#周六" class="headerlink" title="周六"></a>周六</h2><p>终于如愿养猫了。</p><p><img src="https://i.loli.net/2019/09/08/iGOgvoWstRYIc5E.jpg" alt="周六-11.jpg"></p><p>七月去沙巴旅游回来后，就开始看领养信息。虽然急急忙忙，但是还是在那个周六领养到了这只白狸花土猫。</p><p>「周六」是新名字，它以前的主人取名兴兴，我觉着有点无聊。它是被原主人寄养到朋友家后，又抛弃了的，气死这位寄养老哥了。这老哥家里原来就 4 只猫，估计是扛不住了所以就找领养来了。</p><p>一领养回来就发现得了猫藓…好家伙，搞到现在一个半月才好得差不多。</p><p>戴了一个月头套，戴着头套的时候好像还挺乖的，虽然时不时跳蚊帐。现在把头套一摘又开始皮起来，哪里有洞钻哪里，气死我了，把它关在阳台一天以示惩罚。</p><p>真是只不省心的猫。</p><p>虽然有时候也会乖♂乖♂躺♂好，不会乱搞。</p><p><img src="https://i.loli.net/2019/09/08/UZhAS348m217NVB.jpg" alt="微信图片_20190908203915.jpg"></p><p>But 今天又发现它的一边眼睛有点睁不开，不知道是不是发炎了，观察两天看看⑧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/09/08/e7MFWhuQSEZDAo3.jpg&quot; alt=&quot;微信图片_20190908183802.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;转眼间就快一年了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://StoneAndFish.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="猫" scheme="http://StoneAndFish.cn/tags/%E7%8C%AB/"/>
    
      <category term="思考" scheme="http://StoneAndFish.cn/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>[石头 · 记] Upgrade</title>
    <link href="http://StoneAndFish.cn/2018/11/01/Upgrade2018/"/>
    <id>http://StoneAndFish.cn/2018/11/01/Upgrade2018/</id>
    <published>2018-11-01T14:02:20.000Z</published>
    <updated>2019-09-07T18:21:30.082Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/09/08/g2w5ITUOv8i1Mnq.png" alt="Tk20181028_题图.png"></p><p>变化来得比我预期的要早了许多。<br><a id="more"></a></p><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>前两天接到了新 Offer。</p><p>或许是起点太低，当接到了这份与传说中的「应届生白菜价」相近的 Offer 后，我就毫不犹豫地接下了。</p><p><img src="https://i.loli.net/2019/09/08/OCXeHJkI9hv5SDL.jpg" alt="Tk20181028_应届白菜价.jpg"></p><p>大概这「一年零三个月」的业务经验，只是对大学四年所偷的懒的补救（相当于带薪复读一年？hh）。</p><p>不过好歹是救回来了，如今的我，应该也能算是一个比较优秀的毕业生了。</p><p>2018 的「新年愿景」，已经完成了。</p><p><img src="https://i.loli.net/2019/09/08/BDH8Zk9dL26VcxK.png" alt="Tk20181028_新年愿景.jpg"></p><p>当然，这是好事。但早前制定的半年跳槽计划也在此时失去了继续下去的意义。</p><p>必须停止横冲直撞 —— Please calm down。认真思考下一个阶段的行动策略。</p><p>如今，一只脚已经跨入下一级台阶了。</p><p>而接下来的一到三个月，我需要做好的是在这个新台阶上「站稳脚跟」。</p><h1 id="平衡"><a href="#平衡" class="headerlink" title="平衡"></a>平衡</h1><p>进入新的环境，身边总会出现各种各样的波动。</p><p>最先能体会到的变化应该是「通勤路径」与「办公环境」了吧。</p><p>其实通勤时间并不会加长多少。从世界之窗到华侨城创意园只要二十多分钟，而去到后海站 H 出口也只会多出几分钟。</p><p>而办公环境，当然新公司应该会「更舒适」些，嘛，至少去面试时给我的印象是这样。以及日常餐饮环境大概是有了一个质的飞跃吧，天知道华侨城创意园这边的工作餐有多惨不忍睹。</p><p>随后就需要花一段时间来体会新的「工作强度」、「工作内容」，以及建立新的「人际关系」了。</p><p>工作强度这东西，不好说。加班嘛，<strong>如果加班能得到相应的回报</strong>（当然主要指的是 Money 和福利），那加就加呗。Emmm….只希望不要有「无意义加班」的情况。当然如果有，而且短期内难以避免，那就想办法让这段时间变得有意义吧。</p><p>至于会不会秃嘛……</p><p><img src="https://i.loli.net/2019/09/08/jcC9VuWosvS7d8q.jpg" alt="Tk20181028_秃了.jpg"></p><p>不管工作强度怎样，尽量<strong>保持每周至少两次跑步</strong>，两次健身呗。</p><p>工作内容可能会有许多变化。原本都是在做框架部分的事情，接入第三方算法什么的，结果现在给了个「驱动工程师」的头衔……不知道是不是要强行拉去做驱动那部分了。嘛，反正都是底层，<strong>干就完事儿了</strong>。</p><p>新的人际关系的话，主要就是 HR 以及一些业务上有联系的同事了吧，毕竟不是校招进来，大概也就没什么同届生一起培训、建立交集了。而且我个人在业余时间也比较喜欢自己行动，自由度比较高，不是很有兴趣在业务之外和更多人扯上关系。</p><p>接下来，大概还需要进行「入职培训」吧，了解公司大概情况，基本制度之类的。</p><p>呃…可能还得搞搞团建？</p><p>最关心的还是进行日常业务时<strong>能用哪些工具</strong>（比如 ipad 等），然后就是上班打卡、加班、请假、调休这类规则，还有还有，各种<strong>奖金制度、晋升规则</strong>肯定也要熟记在心啦。嗯…入职前找时间把需要注意的点都列出来，做好准备。</p><p>需要一系列策略来适应环境，掌握好自身的平衡。</p><p>能够站稳之后，就该进一步考虑如何「更上一层楼」了。</p><h1 id="突破"><a href="#突破" class="headerlink" title="突破"></a>突破</h1><p>这才是真正站到了预期的起点之上。</p><p>技术面之前，其实我也没时间做准备。所幸还是和现在差不多的业务范围，之前在 CSDN 博客上发的一系列 Camera 业务逻辑分析的文章让我能够从容地应对各种问题 —— <strong>感觉就像在和面试官聊天一样</strong>。</p><p><img src="https://i.loli.net/2019/09/08/KChV16nwQjRpafx.png" alt="Tk20181028_Blog截图.png"></p><p>果然对于我这种比较普通，而且还比较懒的人，只有挤时间写一些技术文章才能快速成长。阅读量的提升，以及与别人讨论技术问题，都能有效驱使我反复研究、学习，以沉淀这些业务知识。</p><p>而在整理简历的时候，我发现最难过的一关还是「项目经历」。</p><p>已经工作一年了，竟然还是卡在了项目经历上，真叫人尴尬。并不是说没做什么事，恰恰相反，由于人手不足，我培训两个月后就已经深入到项目中了。然而做的事很<strong>散乱，并且重复</strong>：时不时维护这个项目，时不时维护那个项目，然后来了新的第三方算法又要去预研一下方便后续接入。</p><p>思考了一整天，最终只挤出了两个还算值得一提的经历…其实懂行的人一看就知道，没多少亮点，都是正常业务范围，只不过对于毕业一年的本科生来说这些经历还算比较丰富罢了。</p><p><img src="https://i.loli.net/2019/09/08/2k8T7VvSmAXfc5D.png" alt="Tk20181028_项目经历.png"></p><p>所以接下来我很需要在项目经历上寻求一个突破。甭管什么高通、MTK 平台项目，尽管来吧！先给自己一些目标：一年之内要具备能够<strong>独立设计一个完整的第三方算法集成框架</strong>的能力；要对平台 HAL 层中的 Pipeline 部分有一个大体的认识；还要完成好两个以上由我主导或者独立完成的中大型项目任务。</p><p>项目经历只是明面上的一点。实际上，还有另一个突破点需要关注，那便是程序设计师的基本功 —— <strong>算法</strong>。当然，主要是更偏向工程的算法，就目前职业来说，或许是诸如 3A 这些算法吧。之前算法基础一直没能好好地补救，所以我这两个月又开始回头看书学习，刷一些编程题目了。</p><p>总之嘛，先努力成为「高工」，然后成为一名有足够分量的「架构师」。在此途中，还要掌握算法工程师的能力。</p><p>说实话，如果时机到了，机会来了，<strong>我更希望能够逐渐转向算法那一端</strong>。</p><p>要把握好大方向的战略，不断突破，一步一步接近自己的理想生活。</p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>其实今年<strong>四五月份开始</strong>，就陆陆续续有机会找上门来。</p><p>不过我都感觉时机未到，所以打算到了 12 月份再整理简历出去闯荡一波。</p><p>然而近期手头上的事情完成的差不多了，其它任务的周期又要延续到明年二三月份，实在太拖了。于是当猎头找上门来的时候，我就决定先去尝试一下。</p><p>原本只是想试试水，体验体验社招有多残酷，赚些面试经验以应对之后的求职之路。</p><p>没想到这事儿就这么成了……</p><p>接了 Offer 后，还有一些团队联系了我，居然还有微软…不过以我现在的能力，估计还<strong>没法从容面对微软级别的技术面试</strong>吧，所以只能跟负责人客套一番，然后留下一句 “Let’s keep in touch” 就溜了。但是能有这样的机会，我内心还是非常非常激动的，毕竟是国际级别的技术大厂…</p><p>接下来至少一年，得沉下心来继续提升了。</p><p>希望再出山的时候，面对国际大厂的面试时，能有六成以上的把握。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/09/08/g2w5ITUOv8i1Mnq.png&quot; alt=&quot;Tk20181028_题图.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;变化来得比我预期的要早了许多。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://StoneAndFish.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="思考" scheme="http://StoneAndFish.cn/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="总结" scheme="http://StoneAndFish.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>[到此一游] 再临京城</title>
    <link href="http://StoneAndFish.cn/2018/10/12/TravelBeijing2018/"/>
    <id>http://StoneAndFish.cn/2018/10/12/TravelBeijing2018/</id>
    <published>2018-10-12T14:12:20.000Z</published>
    <updated>2019-12-22T13:47:25.628Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/09/08/SefX1opUNZ5kTL7.png" alt="北京游记_题图.png"></p><p>时间：2018.10.01 ~ 2018.10.05</p><p>地点：深圳 —— 北京</p><p>人物：石 &amp; 鱼</p><p>花费：（大概）人均<code>￥2400</code></p><p>（多图预警）<br><a id="more"></a></p><h2 id="猫步走京城"><a href="#猫步走京城" class="headerlink" title="猫步走京城"></a>猫步走京城</h2><p>已是第四次进京。</p><p>这次出游的主题毫无疑问，自是「寻猫」。</p><p><img src="https://i.loli.net/2019/09/08/5qKZXlWUNatDMSG.jpg" alt="北京游记_猫步走京城.jpg"></p><h3 id="进京"><a href="#进京" class="headerlink" title="进京"></a>进京</h3><p><img src="https://i.loli.net/2019/09/08/kyZuXRlKih8I5eF.gif" alt="北京游记_火车上.gif"></p><p>一号从广州站坐上火车。在硬卧上瘫倒 21 小时后，终于在二号的下午到达了北京西站。刚下火车，又要搭地铁。兜兜转转，一个小时后总算是在住处安置下来。</p><p>稍作休息后，便出门往「人大」奔去，与友人碰面，共进晚餐。</p><p>出门之时发现小区里整齐地摆着几个大碗，碗内竟装有猫粮 —— 莫非…这是个猫咪聚集地？于是我们四处观察，只发现了一只眼神中充满杀气的猫猫。</p><p><img src="https://i.loli.net/2019/09/08/TUa4KhkF7qLHJrt.png" alt="北京游记_凶猫.png"></p><p>嘛，对于这趟寻猫之旅来说，也算是开门大吉了。</p><p>酒足饭饱后，匆匆别过友人，便奔向「北大」。虽然天色已晚，但我们还是想碰碰运气，看看能否遇到常驻北大的猫咪们。在另一位北大友人的带领下，我们轻易地进入了校园。</p><p>国庆期间，夜晚的校园真是冷冷清清啊。从中关村一路走来就已经感受到了，那股不同寻常的寂静气氛。但这样正好，如果人太多的话，猫儿与我们都会非常困扰的。</p><p>可惜的是，绕了一大圈，只发现了长毛黑猫一只，蜷缩在暗处。似亲人又非亲人，鱼对其上下起手一番后，我们便离去了。</p><p>毕竟是十月份北京的夜，还真是有点冷啊。</p><p>回到小区，住处楼下竟待着几只大猫。意外收获！</p><p>但今天已经太晚，小撸怡情后便回去休息了。</p><h3 id="进宫"><a href="#进宫" class="headerlink" title="进宫"></a>进宫</h3><p>第二天，按照预定的计划，我们「早早地起床」奔向故宫。</p><p>嗯…虽然 8 点就醒了，但还是赖了床，拖拖拉拉了好一会。若非定的是故宫上午的门票，我们怕是要中午才会慢悠悠地出门了。</p><p>果然是国庆，到王府井站下车时就感受到了人山人海的气息。似乎地铁无法停在天安门站，人们纷纷选择在前一站下车，然后沿着大路一路向西。</p><p>看到东长安街的人行道上已经是黑压压的一片，竟然过个马路都要排上数公里的长队，我们赶紧停下步伐，寻找更快捷的路径。</p><p><img src="https://i.loli.net/2019/09/08/FQDajtYEfspC6kw.jpg" alt="北京游记_停下.jpg"></p><p>终于，我们找到了突破口：先进入胡同，然后走向「劳动人民文化宫」，自其东门而入，西门而出，便能直捣紫禁城之「午门」。</p><p>于是在正午之前，顺利进入了故宫。</p><p><img src="https://i.loli.net/2019/09/08/I4Ujdrk9Qec6EMb.png" alt="北京游记_进宫.png"></p><p>在预想之中，故宫里「百余只御猫」，我们起码也能偶遇十来只，能撸上三四只吧？</p><p>然而现实总是残酷。人太多，人太「杂」。</p><p>在「珍宝馆养性殿」附近，看到了懒洋洋地躺在路边的一只猫，我们正想慢慢接近，没成想旁边突然冲来一个大手大脚的大妈，把它吓跑了。讨厌，这样的人真讨厌。</p><p>在此之后，直至逛到西华门 —— 我们大概已经逛遍了可能遇见猫的所在。然而，一无所获。走了两个多小时吧，身心俱疲，只能随处拍拍，自娱自乐。</p><p><img src="https://i.loli.net/2019/09/08/CtSXLGpjh4iwnMT.jpg" alt="北京游记_随便拍.jpeg"></p><p>最终我们决定再碰碰运气，往「后门」方向出去，途中到「延禧宫」附近看看。</p><p>于是在「延禧宫」中，终于看到了故宫里的第二只猫。</p><p><img src="https://i.loli.net/2019/09/08/6aAJ24Doi8ZvEcI.jpg" alt="北京游记_故宫小黑猫.jpg"></p><p>用了「黑卡6」的 200mm 焦段，才拍到了这一景象。已经尽力了。</p><p>故宫之旅大概是失望而归吧。</p><p>晚上回到小区，立马开始寻找昨晚遇见的那些猫儿们。没用多久，便找到了那两只最亲人的猫，一只黑白，一只橘。</p><p><img src="https://i.loli.net/2019/09/08/QJ8AGtbZk9g3Col.jpg" alt="北京游记_小区两只.jpg"></p><p>白猫「喜欢被摸摸头」。</p><p><img src="https://i.loli.net/2019/12/22/hblXvRY3Uif5EC2.gif" alt="北京游记_小区白猫动图 _2_.gif"></p><p>肥橘则是「全身上下皆可撸，但除了肚子」。</p><p><img src="https://i.loli.net/2019/09/08/WM6mL2sBChQAUDZ.gif" alt="北京游记_小区橘猫动图.gif"></p><p>撸这肥橘正爽，白猫却忽然过来争宠，真是只小骚猫~</p><p><img src="https://i.loli.net/2019/09/08/NkjDt2CyrQhvf6P.gif" alt="北京游记_白猫争宠动图.gif"></p><p>我正拍着视频，一位「热心的社区大妈」前来搭话。交谈中，了解到附近这几只猫都是常驻小区的流浪猫，并且它们都已经被带去绝育过。确实我们也发现，附近自行车堆里有几个猫窝，附近也有盛放猫粮和水的碗，想来必是这些热心的小区群众组织起来，给这些小可爱提供了相对舒适的环境。</p><p><img src="https://i.loli.net/2019/09/08/gC7eNk3fW81wZqn.jpg" alt="北京游记_小区猫合辑.jpeg"></p><p>可能因为我们两太矮小，又操着外地口音，大妈认定我们是常住的租客，于是她告诉我们，如果想要把猫领回家，跟她打声招呼就可以了。要不是离家太远，我还真想领个一两只回去。</p><p>嗨呀，真希望以后住的小区也多是这样的热心大爷大妈。</p><h3 id="观复"><a href="#观复" class="headerlink" title="观复"></a>观复</h3><p>4 号，我们一早就起床开始收拾东西了。因为要退房了，换到「机场附近的旅馆」住，毕竟明早要赶早班飞机。</p><p>不得不说，北京的机场快线的配置还是不错的。虽然一趟要<code>￥25</code>，不过二十分钟就能到达目的地也是值得了…</p><p>在旅馆住下后，发现经常有飞机飞过房子上空，而且还很低，轰隆隆的……每当飞机飞过，房内电视的信号、Wifi 信号，以及手机信号都会中断一会儿。</p><p><img src="https://i.loli.net/2019/09/08/6si9tDBTbQPCpG4.gif" alt="北京游记_飞机动图.gif"></p><p>稍作休息，我们便出门搭乘公交直奔「观复博物馆」。</p><p>有北京的交通卡，坐公交真是很方便快捷（当然是不堵车的情况下）而且很便宜，似乎默认「打五折」呢。</p><p>很快我们就到达了目的地。</p><p><img src="https://i.loli.net/2019/09/08/JMru3LcyVPHSFof.jpg" alt="北京游记_观复博物院.jpg"></p><p>门票是每人<code>￥100</code>，似乎有些证件可以和不到一米三的小孩子一样，打半价。半价票的额外福利就是，门票是「观复猫主题的纪念版」。然而我们买的是全价，门票的主题只能选择馆内藏品的版本…</p><p>OK，进入园内，鱼立马开始寻找各个「猫馆长」，与它们互动起来。</p><p>而我则拖着两部相机，随时准备捕捉猫咪灵动的瞬间。</p><p><img src="https://i.loli.net/2019/09/08/wohbxfKTv2RHzsW.jpg" alt="北京游记_观复猫合辑.jpeg"></p><p>其实吧，我们觉得这里更像是个「高级版的猫咖啡」。</p><p>猫儿们有更广阔的活动空间，更自然的环境，但依旧是被很多人围观、狂撸（一停下来就会被几十双手摸来摸去……），还常常被「熊孩子」骚扰、追逐。</p><p>好在这里会有工作人员维持秩序，提醒那些「熊孩子的家长」看管好孩子，并且在熊孩子要对猫儿下手的时候「及时制止」。总的来说，猫猫们的生活应该是很舒适的。</p><p><img src="https://i.loli.net/2019/09/08/GWhu2lg61QSzPRc.gif" alt="北京游记_观复猫动图.gif"></p><p>在观复撸了三个多小时猫，我们便离开了。前往「望京附近」解决晚餐。</p><p>在「望京SOHO」楼下看到一群人正在进行迷之广场运动…</p><p><img src="https://i.loli.net/2019/09/08/RTv9bncMBE5DYP4.gif" alt="北京游记_望京广场动图.gif"></p><p>回到旅馆已经是精疲力尽，赶紧躺尸，等待第二天的回程。</p><p>这次北京之旅，到这里就算是结束了。</p><p>嘛，怎么说呢，总体上也算是达到了目的。「故宫里没撸到猫」有些怨念，但「意外收获的小区亲人猫」可算在一定程度上弥补了这一遗憾。观复之行已经符合预期，也收集到了很多素材，以后慢慢放上 ins 吧hh~</p><p>不过几年内应该不会再安排去北京玩的计划了，毕竟还有「上海南京台湾日本的猫儿们」在等着我们呢：）</p><h2 id="吃饱喝足"><a href="#吃饱喝足" class="headerlink" title="吃饱喝足"></a>吃饱喝足</h2><p>在北京这几天，每天会去吃一顿大餐。</p><h3 id="局气"><a href="#局气" class="headerlink" title="局气"></a>局气</h3><p>初到的那天，身处「人大」的友人带我们去吃了学校附近的网红北京菜餐馆，「局气」。</p><p>毕竟是网红餐厅，还是要点一些打卡菜式的。</p><p>一眼看还以为是「膨胀版皮卡丘」的神秘土豆泥，还得沾着盘子里的麻酱吃。</p><p>似乎是飞燕造型的某种豆腐，口感很像「日本豆腐」，但比日本豆腐口感要稍好。</p><p>烤鸭就不用多说了，「北京烤鸭」的存在就像厦门那儿的姜母鸭一样。鸭皮烤得很脆，其中的油脂大部分已经排出，跟着鸭肉沾上一些「鸭酱」或者「白糖」，一口闷下去也是很爽的。只不过多吃几片，还是会感觉到油腻……</p><p>还有一些其它的甜品、小菜，算是比较平常吧，大多对其味道没有很深刻的印象。</p><p><img src="https://i.loli.net/2019/09/08/MnIcwCt3qLBSE1P.png" alt="北京游记_局气合辑.png"></p><p>对了，这里面还有个「水果饭」，用的米像是紫米，但是吃起来的口感很糯米…值得一提的是，这道菜呈上餐桌后，还会来一发「点火仪式」，整个饭团被火焰笼罩…这莫非是学的火焰牛排做法？</p><p><img src="https://i.loli.net/2019/12/22/MdbZKDwgJuAXr5p.gif" alt="北京游记_局气火焰饭 _2_.gif"></p><p>最后我们三个人共吃去了大概<code>￥260+</code>吧，感觉还算是值得的。综合店内环境和服务来说，给打个四星吧~</p><h3 id="小吊梨汤"><a href="#小吊梨汤" class="headerlink" title="小吊梨汤"></a>小吊梨汤</h3><p>第二天原本的计划是「基辅罗斯餐厅」，但那地方离住处太远，走了一天身心俱疲就懒得去了。在回住处的路上找了一家计划中备选的「小吊梨汤」。</p><p><img src="https://i.loli.net/2019/09/08/2ZqgjspVoKJRfWU.gif" alt="北京游记_小吊梨汤动图.gif"></p><p>小杯子真的很袖珍，倒满了梨汤也是一口就闷完。</p><p>小吊梨汤看起来有点像茶，但喝起来的口感和味道似乎比较偏向广式甜品，比如「冰糖银耳雪梨」。不过也不完全是，它没有甜品那么甜，口感又比较稠一些，而且暖的梨汤喝起来比较舒服。整体给我的感觉还是很不错的，适合天凉的时候点上一壶，与三两好友闲聊慢饮。</p><p>不过我们可不是来喝下午茶的，既然是晚饭，那就还得点一些主食辅菜。</p><p><img src="https://i.loli.net/2019/09/08/Xmqdhga8kGOY1A6.jpg" alt="北京游记_小吊梨汤合辑.jpeg"></p><p>「小豆凉糕」是我比较中意的一道饭后甜点（或者也能算是个主食？），是北方糕点特有的口感，有种沙沙的感觉。这与广式甜品中的「马蹄糕」那种 Q 弹的口感完全不一样。</p><p>「茴香碎牛肉」里的牛肉是真的很碎…感觉都没怎么吃到肉，其中大部分都是炸过的菌类。但炸物与茴香的香味混合在一起，显得这道菜格外出众，而实际上吃起来也是很不错的，只不过对我来说有些油腻了。</p><p>「麻酱面皮」这个菜算是踩坑了，面皮的口感不错，但是麻酱和辣油的比例极不协调，辣油完全把麻酱的味道覆盖住了。</p><p>最终我们两人吃了<code>￥169</code>。现在回头看看，虽然点到了难吃的面皮，但是其它菜都深得我们之心，北京的三次大餐中最好吃的就是这家「小吊梨汤」了。四点五星，打四点五星啦~</p><h3 id="聚宝源"><a href="#聚宝源" class="headerlink" title="聚宝源"></a>聚宝源</h3><p>北京涮锅当然还是要回味一下的。于是第三天我们在望京附近找到了「聚宝源」的分店。</p><p>这个连锁店很有名气，最初的那家店是在「牛街」那边，据说每天一开店都已经要开始排队等桌了。</p><p>不过我们去的望京分店还好，好像是五点半左右到的那，还不用排队，不过店里的位子也快坐满了。</p><p>一口铜锅，是似乎就是「老北京涮锅」的一大特色。</p><p><img src="https://i.loli.net/2019/09/08/YuwP9xGEJDoRkT6.gif" alt="北京游记_聚宝源铜锅动图.gif"></p><p>比较尴尬的是，下肉时经常会「不小心把肉贴到铜锅表面」，然后肉就会黏在上面，很难弄下来，最终会变成黑炭……</p><p><img src="https://i.loli.net/2019/09/08/VAWr6UZnv9PxLtR.gif" alt="北京游记_聚宝源下肉动图.gif"></p><p>我们点了一份肥牛、一份羊肉，青菜和冻豆腐，还有豆皮。这些都是司空见惯了，不过食材看起来还是比较新鲜的，味道嘛，当然是正常咯。不过不得不说，牛肉和羊肉配上「麻酱」，是真的好吃！</p><p><img src="https://i.loli.net/2019/09/08/8X42tiCVAhQZjNY.gif" alt="北京游记_聚宝源麻酱动图.gif"></p><p>看到菜单里还有经典的饭店菜式「金银馒头」，饥肠辘辘的我们马上就点了一份。「金馒头」沾些炼奶，一口咬下去，嗨呀~那口感，那滋味，是小时候的味道。</p><p>那个像洒满了芝麻的包子一样的「烧饼」味道也不错，居然还能单点一个，只要两元…</p><p><img src="https://i.loli.net/2019/09/08/rV5onuUWhbmsgAw.png" alt="北京游记_聚宝源合辑.png"></p><p>秋风带来的寒意被这一顿涮锅一扫而空。最终两个人吃了<code>￥183</code>，馒头、豆腐、豆皮和青菜都还有得剩，有些小浪费，罪过罪过。嗯，给它打个四点二星好了~</p><p>吃饱喝足，就该回去上班了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/09/08/SefX1opUNZ5kTL7.png&quot; alt=&quot;北京游记_题图.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;时间：2018.10.01 ~ 2018.10.05&lt;/p&gt;
&lt;p&gt;地点：深圳 —— 北京&lt;/p&gt;
&lt;p&gt;人物：石 &amp;amp; 鱼&lt;/p&gt;
&lt;p&gt;花费：（大概）人均&lt;code&gt;￥2400&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;（多图预警）&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://StoneAndFish.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="度假" scheme="http://StoneAndFish.cn/tags/%E5%BA%A6%E5%81%87/"/>
    
      <category term="游记" scheme="http://StoneAndFish.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
      <category term="寻猫" scheme="http://StoneAndFish.cn/tags/%E5%AF%BB%E7%8C%AB/"/>
    
  </entry>
  
  <entry>
    <title>[剁手] 初体验 —— ipad pro + apple pencil</title>
    <link href="http://StoneAndFish.cn/2018/09/17/BuyIpadPro/"/>
    <id>http://StoneAndFish.cn/2018/09/17/BuyIpadPro/</id>
    <published>2018-09-17T13:39:06.000Z</published>
    <updated>2019-09-07T18:49:37.729Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间一直都在思考，是时候升级一波手头上的移动电子设备了。<br><a id="more"></a></p><p>去年国庆刚换上了「红米 Note4X」，大概还能再战一两年，等 5G 再换吧。</p><p>于是手机更新计划，Out！</p><p>自从工作以来，很久没有用到笔记本电脑了。刚入大学时候上了船，买了「神舟精盾」，前两年换了个固态硬盘，感觉还能再战几年…不过它真是太重了，对于现在的我来说，根本就不想背着它出门。</p><p>那么考虑换一台轻薄本？找了很久，发现「HP Spectre x360」真不错：颜值、性能都在线，轻薄么…1.2kg 的重量应该海星⑧，可以 360 度翻转很炫嘛，还能完美兼容微软 Surface Pro 的那支笔！可以说非常合意了呢，于是我还去顺电上手体验了几次，完全符合预期。可惜国行顶配没有 16G 内存的版本，只能找美行代购，有点麻烦，打算先观望。</p><p><img src="https://i.loli.net/2019/09/08/5Jq7j4PH3XfWT2s.png" alt="HP幽灵示意图.png"></p><p>笔记本更新计划，Pre-start！</p><p>过了一两个月，看到网上放风说苹果秋季发布会可能要发个「ipad pro 全面屏版」。</p><p><img src="https://i.loli.net/2019/09/08/F2zvAtW1oyELT45.png" alt="全面屏ipad渲染图.png"></p><p>好家伙，提起了我的兴趣。ipad 比起笔记本轻了很多，便于携带，再加上有一只笔，可以很方便做笔记、读书读论文什么的…以及娱乐性 Max…嗯，赶紧去住处附近的苹果官方店先体验现在的 ipad 和 pencil……</p><p>于是被这惊人的交互体验圈粉了。虽然说笔的握持感以及书写的感觉，比起在微软体验店试过的 Surface Pro 的笔差了些，但是已经完全能够满足我的需求，而且响应速度并不弱于 SP。软件生态就不用多说了，以及试用的时候有个制作动画的 APP 真是让我感觉相见恨晚……总之吧，初步体验非常棒，想等秋季发布会出个全面屏版，处理器应该也能升级到 A11 以上，再去香港入一套。</p><p>好的，笔记本更新计划，Close！</p><p>ipad 购置计划，Start！</p><p>哔哔：「说到底还不是因为穷，有钱的话我全都要……」</p><hr><p><strong>[2018.9.13]</strong></p><p>原本满心期待 Apple 秋季发布会能有「全面屏的 ipad pro」。</p><p>早上一醒来赶紧翻新闻找发布会回顾，发现根本没有关于 ipad 的任何消息…</p><p><img src="https://i.loli.net/2019/09/08/dYkS4NJ1wcgnjU9.png" alt="apple官网首页图.png"></p><p>好吧， 发布的三台手机，一个手表，都不是我的菜。话说，这手机「我也买不起啊」！一台 Max 就能买之前想更新的笔记本的美行顶配版，可能还有富余，可以再买个 Switch（？？？我在想啥呢？？？）。</p><p>看来短期内是不会出了，只能先买现在的「ipad pro 10.5 + apple pencil」来用了。本来是打算周末去香港买一套的，毕竟比内地官网便宜了 <code>1k+</code>，为此下午还把通行证续签了，「一年多次往返」续签一次要<code>￥80</code>呢…</p><p>结果晚上回家，看了看京东，嗯？「ipad pro 10.5 深空灰 256GB + apple pencil」套装一共<code>￥6199</code>。Wtf，现在去香港买这一套也得 <code>6k+</code>，算上路费怎么也得 <code>6k1+</code>，这里居然就贵了一百来块？</p><p>我赶紧上逼乎查一下，京东上这个自营 Apple 店的 ipad 是不是真货……</p><p>好像除了一些「运气不好」碰上问题产品和沙比客服的朋友，没有什么其它问题。Well，翻了几十分钟评论，查了各种「京东上 ipad 为甚么比官网便宜」，终于下定决心剁手。</p><p><img src="https://i.loli.net/2019/09/08/8uLRHfJV6pdxcSg.png" alt="ipad订单信息.png"></p><p>嗯…白条分期要手续费的，反正手头不紧，就直接打了个不分期的白条（因为白条有 -￥2 优惠hhh）…</p><hr><p><strong>[2018.9.14]</strong></p><p>京东自营的物流还是够快，今晚就到货了。</p><p>还等什么，赶紧拆包装验货啊！</p><p><img src="https://i.loli.net/2019/09/08/XOnQz2klwfV6d8J.jpg" alt="ipad到手.jpg"></p><p>不得不说，Apple 的包装看着很舒服，大概我就喜欢这种「黑白 + 简朴」的风格吧…</p><p>于是花了一晚上摆弄…先检查了硬件各方面，没发现什么明显问题，然后配置了 Apple ID，验了序列号，激活时间也没问题…Well，Well，Well~</p><p><img src="https://i.loli.net/2019/09/08/TUAgMpRe9Gl3dSx.png" alt="查询激活时间.png"></p><p>然后安装各种常用应用，什么 QQ 啊、微信啊、逼乎啊、PS 啊……当然还有一些游戏啦。今晚的后半段时间都贡献给了「Ultra Sharp」这款游戏，真的有点小毒…</p><p>（此处盗一下<a href="https://sspai.com/post/45316" target="_blank" rel="noopener">少数派</a>的图…）</p><p><img src="https://i.loli.net/2019/09/08/GEOev2rno4hYFfi.gif" alt="Ultra Sharp.gif"></p><p>当然这些切割动作，我都是用「Apple pencil」来完成的，跟用手乱划完全不是一个等级的体验！刷刷刷的，提起笔仿佛自己是一个「Pencil Man」…</p><p>各种应用都去体验了一番，我越发地感觉，如果脱离了这支笔，pro 版和普通版其实就没多大区别了。</p><p>目前最中意的应用就是自带的「备忘录」和微软家的「OneNote」，这两个应用对手写笔的支持度可以说是最为典范的了。以后就用它们当「草稿和日记」了hhh，不过笔记的话还是整理好后放到「印象笔记」里吧，毕竟开了会员呢…</p><p><img src="https://i.loli.net/2019/09/08/dySHawf7EikJGYA.jpg" alt="OneNote.jpeg"></p><p>先把玩把玩几天吧~</p><hr><p><strong>[2018.9.16]</strong></p><p>今天台风「山竹」驾临，一整天只能待在家里…啃泡面度日。好在昨晚到 Ole 超市去买了点梅花肉，今天的蛋白质摄入量应该够了的…</p><p><img src="https://i.loli.net/2019/09/08/T2r4p3kdK1NMQLc.jpg" alt="晚餐.jpeg"></p><p>深圳各种惨状，网上已经传播了很多了。想起前两年在厦大的时候经历过的台风「莫兰蒂」，现在的状况似乎好了许多，只要老老实实待在家啃屯粮，玩玩电脑玩玩手机就 OK 了。当然那年的台风是以强台风级别直接硬肛厦门，跟现在的擦边过体验当然是不太一样的。</p><p>记得那天晚上台风登陆，第二天醒来舍友突然告诉我宿舍楼下那一排大铁门都被吹烂了…还停水停电。然而今天台风最强的那个时间段，也就是来过几阵强风，吹得我这栋楼摇摇摆摆而已~</p><p>OK，既然待在家里一天，当然只能继续把玩新入手的 ipad 啦。</p><p>中午大概 11 点「正式起床」后，就开始「电脑 + ipad」的模式开始一天的娱乐生活（说好的学习计划呢？？……嗯，往后稍稍吧您~）。于是开启了「梦幻西游手游」（最近和兄弟们开始回忆起了初中时代的娱乐…），刷任务、抓鬼，大概用到晚上 9 点吧，还剩 17% 的电，看来续航上 10+ 个小时是稳稳的，平常带去公司用的话完全 OJBK。而且我发现，就算还有许多应用没有专门针对 pencil 的特殊用途，但是直接用它来完成通常的点击操作，也比用手指舒服很多（当然手势动作还是得用手啦）。</p><p>接下来就等待我的「套套」到货了，不戴个套的话，感觉拉着它出门不太安全呀hh~话说本来今天已经到了的，不过这天气也没办法派件…</p><hr><p><strong>[2018.9.17]</strong></p><p>早上其实不用去上班的，但是公司方面一直没有消息，于是拖拖拉拉到 10 点出了门，想着实在不行用掉一小时调休也 OK 啦。幸运的是，出门前套子就派送到了，于是我便背上 pad 出门上班去……</p><p>一个很简朴的套子。看起来不怎么防摔啦，不过手感还不错，整体也很轻，带上套子的 ipad 几乎感觉不到有增重~总之正合吾意，价格<code>￥65</code>也算是比较合适了。</p><p><img src="https://i.loli.net/2019/09/08/k83EF1O9Rbjd6yr.jpg" alt="ipad保护套.jpg"></p><p>台风过后的景象很是熟悉了，满地的残枝落叶，时不时看到几颗拦腰折断的大树，一些建筑物附近堆满了砸碎的玻璃……华侨城这一片，走过某些地方就好像在丛林穿越一样hh。好在今天已经没有风雨，甚至还出了太阳，上班的路途并不艰难。</p><p>背着 pad 走了四十来分钟，感觉比起平常并没有增加多少负担，那么整体的「便携性」满意度 95 分吧，剩下的 5 分还是要期待一下它能够再轻一半的体重，像个手机一样就好了hhhhh~</p><hr><p>好吧，到这里为止，娱乐场景和办公场景基本上都已经体验到了。总的来说，「ipad pro + apple pencil」这个组合甚合我意，不论在「便携性」、「续航力」、「交互体验」，以及「娱乐与轻办公能力」都可以给上我主观的高分（&gt;= 95），反正我觉得这钱嘛，花得值了。</p><p>等下一代面世了，考虑更新一波…嗯…看看钱包，希望它还是不要更新得太快吧~</p><p><strong>[2018.9.20]</strong></p><p><a href="https://9to5mac.com/2018/09/18/ios-12-1-new-ipads-coming-this-year/" target="_blank" rel="noopener">Bad News</a>……</p><p><img src="https://i.loli.net/2019/09/08/KMvmJIOTtl8iex1.png" alt="BadNews.png"></p><p>看来尝鲜是尝不到了…等明年看看各方深度测评，去官方店体验一下，再看看需不需要换新吧…</p><p>其实我觉得现在这个屏幕尺寸也挺好的了，如果没有极大性能、体验的提升，估计也不会太快考虑…</p><p>当然如果鱼想要把那台旧的「ipad air2」换掉的话，我全力兹瓷！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间一直都在思考，是时候升级一波手头上的移动电子设备了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://StoneAndFish.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="电子设备" scheme="http://StoneAndFish.cn/tags/%E7%94%B5%E5%AD%90%E8%AE%BE%E5%A4%87/"/>
    
      <category term="奢侈败家" scheme="http://StoneAndFish.cn/tags/%E5%A5%A2%E4%BE%88%E8%B4%A5%E5%AE%B6/"/>
    
  </entry>
  
  <entry>
    <title>[多读好书]《Effective C++》回顾</title>
    <link href="http://StoneAndFish.cn/2018/09/13/EffectiveC-1st/"/>
    <id>http://StoneAndFish.cn/2018/09/13/EffectiveC-1st/</id>
    <published>2018-09-13T12:01:49.000Z</published>
    <updated>2019-09-08T08:10:18.813Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近两月公司项目少，主要精力都放在 HAL1 到 HAL3 的业务迁移学习中。花了蛮多时间看代码，也试着写了 Open Camera 的流程分析文档，发在了<a href="https://blog.csdn.net/qq_16775897" target="_blank" rel="noopener">我的 CSDN 博客</a>里。</p><p>当然整天只能看看看看看代码，是真的很容易觉得枯燥的。即便是对 Google 和 QCom 的这些比较赏心悦目的代码风格来说，连续看两三个小时也是会开始心不在焉的。于是我搬出了大四时候买的《Effective C++》，开始（在看腻了代码的时候）慢慢啃了起来。<br><a id="more"></a></p><p>刚买这本书的时候，我也是啃过一部分的，但是只是很小一部分，大概只是看到了第二章。那时候学习效率不高，自己的代码实践经验也少之又少，难以体会作者所描述的细节，看书的时候感觉无法提炼出核心内容，仿佛每一个字都是重点一般。</p><p>到了现在，工作一年有余，有了一些实践经验，看过、分析了不少出自 Google、QCom 工程师之手的优秀代码，再来看看书中的内容，果然理解起来顺畅了许多！</p><p>目前第一遍的学习已经接近尾声，学习过程中的各种笔记都记在了纸质的本子上，懒得一一搬到电脑中了…现在一直在尝试将笔记做成思维导图这种类型的样子，感觉这样在阅读时更能够驱动自己把握好细节，然后提取出核心思想。慢慢改进了两三个月，感觉自己的读书效率，听培训、课程时的笔记效率都有非常大的提升。</p><p><img src="https://i.loli.net/2019/09/08/hDe3mRoG4VgB8qF.jpg" alt="EFC__笔记样例.jpg"></p><p>这一趟阅读下来收获颇丰，但这其中我也发现，还有相当一部分内容依旧难以理解，其原因大致如下：</p><ul><li>一是自身的实践经验还是有所欠缺，覆盖面还不够广；</li><li>二是我对 C++ 的理解还不够深刻，对其知识点的掌握程度还不够高（特别是对 C++11、C++14 等的新增特性知之甚少，也不常使用）。</li></ul><p>所以接下来我需要花一些时间回顾这段时间的阅读内容，看看哪些条目我已经有了比较清晰的理解，还有哪些需要继续深入学习。一方面是要进行总结，尽可能吸收知识，另一方面则是要为以后的第二遍更针对性的阅读指出方向。</p><p><strong>NOTE：个人认为，《Effective C++》是一本工具书，它需要与具体工程紧密结合，而如果脱离工程、实践去阅读它，则会非常浪费时间！在实践的过程中进行阅读、应用，或者在具有一定量的实践经验时再来阅读，方能体现其真正的价值，学到精华之所在。</strong></p><h1 id="温故而知新"><a href="#温故而知新" class="headerlink" title="温故而知新"></a>温故而知新</h1><h2 id="第一章-「让自己习惯-C-」"><a href="#第一章-「让自己习惯-C-」" class="headerlink" title="第一章 「让自己习惯 C++」"></a>第一章 「让自己习惯 C++」</h2><p>本章内容为条款 1~4，作者认为这几个条款是「总有那么一些东西比其它的更基础些」的那一部分，先来回顾回顾它们的标题：</p><ol><li><p><strong>视 C++ 为一个语言联邦。</strong></p><blockquote><p>View C++ as a federation of languages.</p></blockquote></li><li><p><strong>尽量以「const / enum / inline」替换「#define」。</strong></p><blockquote><p>Prefer consts, enums, and inlines to #define.</p></blockquote></li><li><p><strong>尽可能使用「const」。</strong></p><blockquote><p>Use const whenever possible.</p></blockquote></li><li><p><strong>确定对象被使用前已被初始化。</strong></p><blockquote><p>Make sure that objects are initialized before they’re used.</p></blockquote></li></ol><p>C++ 是基于 C 语言而扩展出来的，庞大而混杂 —— 它现在已经是一个<strong>「多重泛型编程语言」</strong>，它同时支持「过程形式」、「面向对象形式」、「函数形式」、「泛型形式」，以及「元编程形式」。这些能力与弹性让 C++ 像一个装满了各式各样的工具的箱子一样，任何问题都能通过使用其中的一部分工具来高效地解决，虽然看起来笨重了点。</p><p>而前人从无数的编程实践中总结出了一些编码守则，这些守则或能使我们更高效地编写代码，或能使我们的代码效率提高数个层级，更甚者两者兼具。但这些守则在 C++ 世界中不是放之四海而皆准的，我们需要在适当的部位运用恰当的工具，于是作者认为，我们需要将 C++ 视为一个<strong>「语言联邦」</strong>，这其中包括四大部分：「C」、「面向对象的 C++」、「STL」，以及「C++ 模板」。</p><p>高效守则需要根据不同的联邦而采用不同的方法。</p><p>相比起 C，C++ 中扩展了 <code>const</code>、<code>inline</code> 等等有意思的关键字。在纯 C 中，我们经常能看到大量的宏定义 <code>#define</code> 语句，用它来定义一些常量有时候确实能让代码更清晰，但用来定义一些函数就常常让人看得脑壳疼。更难受的是，使用它的时候需要非常极其小心翼翼，少一组括号可能就会导致代码在某些神秘的情况下出现 Bug，并且难以追踪调试。而在 C++ 中我们可以用 <code>const</code> 来表明常量，它使我们能够在编译期就发现关于常量的误用问题。<code>inline</code> 则可以用来定义函数，这些函数编译时也会进行相应的展开，与宏定义的效果是一样的，而它还能够提供封装性。</p><p><code>const</code> 关键字有很多用途，当我们需要各种意义上的「不可改变的常量」时，它就能发挥作用。值得注意的是，它不仅在定义变量时能派上用场，在定义函数时也有它的身影。</p><p>在日常撸代码时，我就经常忘记给某些变量进行初始化赋值，于是运行程序时它们获得了一个伪随机值，导致程序流程都乱了套。看来这是程序员们共同的经历，而这一历史直到今天也在不断重演…以至于作者要将它作为「最基本的」几个条款之一，不得不说，<strong>确保初始化真的很很很重要！</strong></p><p>第一章的内容中，应该说并没有什么疑难点。如果说需要进一步学习的话，或许应该关注第二条，好好理解一下各个替换宏的关键字的使用时机吧。</p><h2 id="第二章-「构造、析构、赋值运算」"><a href="#第二章-「构造、析构、赋值运算」" class="headerlink" title="第二章 「构造、析构、赋值运算」"></a>第二章 「构造、析构、赋值运算」</h2><p>本章详细解释了条款 5~12，主要关乎一个类的几个重点组成成分，即构造函数、析构函数、拷贝构造函数和赋值运算符。先回顾回顾它们的标题：</p><ol><li><p><strong>了解 C++ 默默编写并调用了哪些函数。</strong></p><blockquote><p>Know what function C++ silently writes and calls.</p></blockquote></li><li><p><strong>若不想使用编译器自动生成的函数，就应该明确拒绝。</strong></p><blockquote><p>Explicitly disallow the use of compiler-generated functions you do not want.</p></blockquote></li><li><p><strong>为多态基类声明「virtual 析构函数」。</strong></p><blockquote><p>Declare destructors virtual in polymorphic base classes.</p></blockquote></li><li><p><strong>别让异常逃离析构函数。</strong></p><blockquote><p>Prevent exceptions from leaving destructors.</p></blockquote></li><li><p><strong>绝不在构造和析构过程中调用「virtual 函数」。</strong></p><blockquote><p>Never call virtual functions during construction or desturction.</p></blockquote></li><li><p><strong>令「operator=」返回一个「<em>reference to \</em>this*」。</strong></p><blockquote><p>Have assignment operators return a reference to *this.</p></blockquote></li><li><p><strong>在「operator=」中处理「自我赋值」。</strong></p><blockquote><p>Handle assignment to self in operator=.</p></blockquote></li><li><p><strong>复制对象时勿忘其每一个成分。</strong></p><blockquote><p>Copy all parts of an object.</p></blockquote></li></ol><p>当我们编写了一个「空类」，C++ 编译器有可能（当我们的代码中存在相应逻辑）会自动地为它创建默认的「构造函数」、「析构函数」、「拷贝构造函数」和「operator=」。这些默认函数都是 <code>public</code> 且 <code>inline</code> 的。</p><p>有时候这些被偷偷创建出来的函数会扰乱我们的代码逻辑，比如说我们设计的类是「独一无二的」，那就不允许它进行拷贝构造，但默认拷贝构造的存在让逻辑变得混乱。编码时我们就需要考虑到这一层，从而判断是否需要明确拒绝生成默认函数。明确拒绝生成的方法可以是将相应函数声明为 <code>private</code> 且不予实现，也可以是利用 <code>Uncopyable</code> 这样的特殊基类。</p><p>在这些默认函数中，有一个需要特殊注意的就是「析构函数」：</p><ul><li>如果我们设计的是一个具有多态性质的类，或者我们的类中有任意一个 <code>virtual</code> 函数，我们都应该将析构函数声明为 <code>virtual</code>，否则可能会在使用指针、引用时出现诡异的「局部销毁」问题。</li><li>析构函数绝不要抛出异常，这样会导致程序异常中断或者产生不明确的行为。我们可以提供一个普通函数来执行那些可能会抛出异常的操作（从而给调用者一个率先处理异常的机会），而析构中也会调用该函数（当调用者忽略了它）来保证逻辑完整，但在析构中出现的异常，我们要将其吞没或者直接结束程序。</li></ul><p>而「构造函数 / 拷贝构造函数」以及「析构函数」都需要注意的一点，就是不要在它们的内部调用 virtual 函数（如果期望调用到子类的实现的话）。这一点其实很好理解，构造时先构造的父类，彼时子类还未生成，怎能调用子类的实现呢？而析构时则是先销毁了子类，当然也就不能再调用子类的实现了。</p><p>「operator=」就是赋值操作符，关于它也有一些需要注意的点：</p><ul><li>让它的返回值是一个对 <code>this</code> 指针的引用，这样才能确保 <code>x = y = z</code> 这样的语句是正确的。同样的道理也适用于「+」，「-」等其它操作符。</li><li>要考虑到「自我赋值」的情况（「别名」的存在导致这种情况并不少见），确保这一行为的安全性（主要保证其「异常安全性」）。相关的处理技术有「证同测试」、「精心设计的语句顺序」以及「Copy-and-Swap」。</li></ul><p>拷贝构造与赋值运算其实非常类似，都是关于「复制」这一逻辑。它们两通常有着高度一致的逻辑，我们可以将逻辑一致的部分转移到一个新的函数中，但不要让它们两之间存在调用关系。同时在「复制」的时候，我们必须要注意别忘了将类中的「每一个」成分都复制过去，在实践时经常会有「往类中添加成员变量」这种情况，这时候我们就需要确保这些成员的更新在「成员初值列」以及「复制操作」中体现出来。</p><p>总的来说，第二章的内容也是相当地基础，在日常的编码实践和代码阅读中就能很好地体会到这些守则的妙处。要说以后还需要继续深入理解的部分，应该是关于析构与异常的处理，这部分的情况可能在数据库、网络会话之类的场景经常出现，不过我目前都没有怎么接触过。</p><h2 id="第三章-「资源管理」"><a href="#第三章-「资源管理」" class="headerlink" title="第三章 「资源管理」"></a>第三章 「资源管理」</h2><p>到了第三章，我感觉就开始进入了一个进阶部分。资源管理在实际工程中非常重要，资源的分配与回收是 C++ 中的一个大问题，因为我们常常会采用「动态分配内存」的方式来获取资源，如果不及时回收资源，则会造成内存泄露之类的问题。作者总结出了条款 13~17 用以最大限度地避免资源相关问题的出现，先来复习一下，它们分别是什么：</p><ol><li><p><strong>以对象管理资源。</strong></p><blockquote><p>Use objects to manage resource.</p></blockquote></li><li><p><strong>在资源管理类中小心「copy 行为」。</strong></p><blockquote><p>Think carefully about copying behavior in resource-managing classes.</p></blockquote></li><li><p><strong>在资源管理类中提供对原始资源的访问。</strong></p><blockquote><p>Provider access to raw resources in resource-managing classes.</p></blockquote></li><li><p><strong>成对使用「new」和「delete」时要采取相同形式。</strong></p><blockquote><p>Use the same form in corresponding uses of new and delete.</p></blockquote></li><li><p><strong>以独立语句将「new 出来的」对象置入只能指针内。</strong></p><blockquote><p>Store newed objects in smart pointers in standalone statements.</p></blockquote></li></ol><p>在开发应用程序时，我们肯定会编写一大堆函数。而在函数中通过 <code>malloc</code> 或者 <code>new</code> 申请出一块内存，这个场景对于 C++ 开发者来说，真是再熟悉不过了。然而，申请出来的内存要在何时何地释放？初学者常常忽略这个问题，甚至一些经验丰富的开发者有时也会被这个问题困扰。我们通常会在函数的末尾对相关内存进行回收，让其保持与函数相应的生命周期，但经常会出现的问题是「在函数内增减分支、逻辑时，出现新的函数结束点，但此处没有进行资源回收」。</p><p>为了防止资源泄露，前人设计了一众「RAII（Resource Acquisition Is Initialization）类」作为资源管理类。这种对象在构造函数中获得资源，并且在析构函数中进行资源释放。而对象的生命周期和函数保持一致，这就使得资源回收得到一定的保证。C++ 中常用的 RAII 对象有 <code>shared_ptr</code> 以及 <code>auto_ptr</code>，前者通常比较好用，因为它的拷贝行为比较直观（后者的拷贝动作会导致被复制物指向 <code>null</code>）。</p><p>说到 RAII 类对象的拷贝问题，作者也提出了一些需要注意的事项：</p><ul><li>拷贝 RAII 对象必须一并拷贝其资源，所以资源的拷贝行为决定了 RAII 对象的拷贝行为。</li><li>常见的复制行为有：「抑制拷贝」、「采用引用计数法」。也有一些其它技术，但未提及。</li></ul><p>理想状况下，API 不应该对原始资源有访问需求。但是现实往往是残酷的，不是每个 API 设计者都奉行这一理念，所以许多 APIs 还是会要求访问原始资源。于是乎每个 RAII 类都需要提供一个「取得其管理的原始资源」的方法，一般是给出一个 <code>get()</code> 函数获取原始资源指针，在 Android 底层使用强指针类 <code>sp</code> 时经常用到这一方法。需要注意的是，访问原始资源可能会经过显示或隐式的转换，一般来说提供显式转换比较安全，但是提供隐式转换对客户来说就比较方便。</p><p>众所周知，<code>new</code> 与 <code>delete</code> 成对使用，而 <code>malloc</code> 与 <code>free</code> 成对使用。但作者提醒我们，还需要注意的是，「<code>new[]</code> 与 <code>delete[]</code> 成对」，「<code>new</code> 与 <code>delete</code> 成对」，如果 <code>[]</code> 这个符号用混了，可能会导致不明确行为或者资源泄露。</p><p>接下来考虑一个情况：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func(share_ptr(<span class="keyword">new</span> A), f());</span><br></pre></td></tr></table></figure><p>在 C++ 中，执行函数 <code>func</code> 时可能出现的一个顺序：</p><ol><li><code>new A</code></li><li><code>f()</code></li><li><code>share_ptr()</code></li></ol><p>注意第 2 步骤，若其内部会抛出异常，就会导致第 3 步不执行，此情况下资源 A 就会泄露。</p><p>所以我们应该用一个独立语句将 <code>new</code> 出来的对象存储到 RAII 类对象中，就像下面这样：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;A&gt; pa(<span class="keyword">new</span> A);</span><br><span class="line">func(pa, f());</span><br></pre></td></tr></table></figure><p>从而保证避免那些难以察觉的资源泄露情况。</p><p>本章中介绍的诸多内容，在阅读 Android 底层源码时我就已经有所体会，但还没有多少机会亲自设计、实践。一趟回顾下来，发现理解不够深入的是条款 14，在下一轮阅读中需要特别关注。</p><h2 id="第四章-「设计与声明」"><a href="#第四章-「设计与声明」" class="headerlink" title="第四章 「设计与声明」"></a>第四章 「设计与声明」</h2><p>第四章开始进入更复杂的接口设计部分，这一部分中作者总结出了几个关于优良接口设计的关键点，当然在实战中还有更多需要注意的点，但作者提出的这些也能够让我们大大提高编码效率以及正确性。第 18~25 条款标题如下：</p><ol><li><p><strong>让接口容易被正确使用，不易被误用。</strong></p><blockquote><p>Make interfaces easy to use correctly and hard to user incorrectly.</p></blockquote></li><li><p><strong>设计「class」如同设计「type」。</strong></p><blockquote><p>Treat class design as type design.</p></blockquote></li><li><p><strong>宁以「pass-by-reference-to-const」替换「pass-by-value」。</strong></p><blockquote><p>Prefer pass-by-reference-to-const to pass-by-value.</p></blockquote></li><li><p><strong>必须返回对象时，别妄想返回其「reference」。</strong></p><blockquote><p>Don’t try to return a reference when you must return an object.</p></blockquote></li><li><p><strong>将成员变量声明为「private」。</strong></p><blockquote><p>Declare data members private.</p></blockquote></li><li><p><strong>宁以「non-member 且 non-friend 函数」替换「member 函数」。</strong></p><blockquote><p>Prefer non-member non-friend functions to member functions.</p></blockquote></li><li><p><strong>若所有参数皆需要类型转换，请为此采用「non-member 函数」。</strong></p><blockquote><p>Declare non-member functions when type conversions should apply to all parameters.</p></blockquote></li><li><p><strong>考虑写出一个不抛出异常的「swap 函数」。</strong></p><blockquote><p>Consider support for a non-throwing swap.</p></blockquote></li></ol><p>一个好的接口，它很容易能被正确使用，并且不易被误用。这是接口设计的最基本思想，我们的设计接口工作总是要围绕着它展开。这一思想包括两方面：</p><ul><li>「促进正确使用」的方法，包括接口一致性，以及与内置类型的行为进行兼容。</li><li>「阻止错误用法」则包括建立新类型、限制类型上的操作、束缚对象的值，以及消除客户的资源管理责任。</li></ul><p>设计一个 <code>class</code> 要像设计 <code>type</code> 一样，而设计 <code>type</code> 时，我们通常需要进行以下思考：</p><ul><li>新的 <code>type</code> 应该如何被创建？又如何被销毁？</li><li>对象的初始化与赋值之间有何区别？</li><li>被「pass-by-value」时，会发生什么？</li><li>新 <code>type</code> 的「合法值」是什么？</li><li>新 <code>type</code> 需要配合某个「继承图系」吗？</li><li>什么样的标准函数需要被驳回？</li><li>需要哪些转换？</li><li>对于新 <code>type</code> 来说，怎样的操作符以及函数是合理的？</li><li>「谁」应该取用新 <code>type</code> 的成员？</li><li>什么是「未声明接口」？</li><li>这一新 <code>type</code> 有多么一般化？</li><li>注意注意注意！你真的真的需要这么一个新的 <code>type</code> 吗？？</li></ul><p>在函数传参时，我们需要尽量以「pass-by-reference-to-const」替换「pass-by-value」。这是因为前者比较高效，还能够避免「切割问题」（入参为父类，若传入子类，可能只有父类被构造）。注意了，这一条款不是所有情况下都适用的，比如说对于「内置类型」、「STL 迭代器」以及「函数对象」来说，「pass-by-value」才是恰当的选择。</p><p>说到将成员变量声明为 <code>private</code>，这一守则很是熟悉了。这么做可以赋予客户访问数据的一致性，能够细微划分访问控制，允诺约束条件获得保证，并且给 <code>class</code> 实现者提供充分的弹性。这里面需要注意的一点是，C++ 中还有一个 <code>protected</code> 关键字，但它并不比 <code>private</code> 更具封装性.从「封装」的角度来看，只存在两种权限，即 <code>private</code> 及其它。</p><p><code>std::swap()</code> 函数是个神器，我们在使用「Copy-and-Swap 技术」的时候常常用到它。但它对于我们的自定义类型可能效率不高，这时候我们就应该考虑提供一个自定义类型专用的 <code>swap</code> 函数了，并且这个函数不该抛出异常。我们可以通过对 <code>std::swap()</code> 这一模板函数进行「全特化」来实现我们的客制化需求，但是要注意的是不要往 <code>std</code> 命名空间中加入对它而言全新的东西 —— 我们可以在自己的命名空间进行全特化。</p><p>呼，这一章开始有些难度了，涉及到了我未曾接触的知识，或者从未体会过的守则。说明我的实践水平还是太低了。</p><p>个人没有理解好的条款是：</p><ul><li>必须返回对象时，别返回其「reference」。</li><li>若所有参数皆需类型转换，请为此采用「non-member 函数」。</li></ul><p>这两个条款下次要更深入地理解分析。</p><p>除此之外，条款 19、23 以及 25，感觉都还未吃透，需要再结合实际代码研究研究。</p><h2 id="第五章-「实现」"><a href="#第五章-「实现」" class="headerlink" title="第五章 「实现」"></a>第五章 「实现」</h2><p>上一章是关于「设计」的高效守则，而本章则是进一步到了「实现」的部分。具体实现我们所设计的类、函数时，也有不少需要特别关注的事项，作者将其中一些总结为以下的条款 26~31：</p><ol><li><p><strong>尽可能延后变量定义式出现的时间。</strong></p><blockquote><p>Postpone variable definitions as long as possible.</p></blockquote></li><li><p><strong>尽量少做转型动作。</strong></p><blockquote><p>Minimize casting.</p></blockquote></li><li><p><strong>避免返回「指向对象内部成分的 handle」。</strong></p><blockquote><p>Avoid returning “handles” to object internals.</p></blockquote></li><li><p><strong>为「异常安全」而努力是值得的。</strong></p><blockquote><p>Strive for exception-safe code.</p></blockquote></li><li><p><strong>透彻了解「inlining」的里里外外。</strong></p><blockquote><p>Understand the ins and outs of inlining.</p></blockquote></li><li><p><strong>将文件间的编译一寸关系降至最低。</strong></p><blockquote><p>Minimize compilation dependencies between files.</p></blockquote></li></ol><p>尽可能延后变量定义式出现的时间，直到能够给它初值实参为止。从而避免构造出不必要的对象，以及无意义的默认构造。这样做也能增加程序的清晰度并改善效率。这一守则其实一直都在使用，很好理解。不过文中有一个需要稍微注意的情况就是「循环赋值」，定义式的位置决定了会出现「1 次构造 + 1 次析构 + n 次赋值」，还是「n 次构造 + n 次赋值」，这需要根据实际情况分析效率，再选择最佳的位置。</p><p>转型动作在大型工程中几乎是必定会出现的。不过我目前使用的最多的还是 C-style 的转型…就是这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">float</span> b = (<span class="keyword">float</span>) a;</span><br></pre></td></tr></table></figure><p>这已经是「旧式转型」了，而「新式转型」有下面这四种：</p><ol><li><code>const_cast</code>：常量性转除。</li><li><code>dynamic_cast</code>：安全向下转型。</li><li><code>reinterpret_cast</code>：低级转型（与编译器有关）。</li><li><code>static_cast</code>：强迫隐式转换。</li></ol><p>需要注意的是，我们应该尽量避免任何转型的出现，特别是在「注重效率」的代码中尽量避免 <code>dynamic_cast</code>。如果转型动作是必要的，我们可以将其隐于某个函数背后，而客户可以调用这一函数并且不用自己手动转型。</p><p>由于「新式转型」比较容易辨识，所以我们的转型动作应尽量用它完成。</p><p>我们常常通过获取一个「handle（句柄、号码牌）」来保持对某个对象的使用权，或者说是调用途径。一般来说「handle」是一个引用、指针或者迭代器。但使用它时有可能会导致「降低封装性」，因为它可能是「代表对象内部数据」的。并且有这么一种情况，获取「handle」结束时，对象就被析构了（临时对象），此时就会出现「虚吊句柄」的问题。所以我们要尽量避免返回指向对象内部的「handle」，以增强封装性，降低「虚吊句柄」发生的可能性。</p><p>「inline 函数」不论怎么看，都像是个普通的函数。但是调用它们并不需要「调用函数」所产生的开销，这一点使得它远远优于利用宏来定义的函数。不过由于它也向宏一样在编译器展开代码，这导致目标代码可能会出现体积膨胀的情况，如果过于膨胀就有可能导致额外的「换页行为」，并且会降低「Cache 击中率」。所以我们需要在合适的情况、恰当的位置使用它。一般我们仅将其用于小型的、被频繁调用的函数。</p><p>对于诸如 Android 系统这样庞大的工程来说，将文件间的编译依存关系降至最低这一守则极为重要。平常完全重新编译一个模块都要花费二三十分钟，更别说整机编译的两三个小时，如果不把控好编译依存关系，一个小的文件改动要引发整个模块的重新编译，那将会极大地浪费时间。关于该守则，有一个一般化的构想是：相依于声明式，不要相依于定义式。基于此而出现的两个技术手段分别是「Handle class」与「Interface class」。以及对于程序库的头文件来说，它应以「完全且仅有声明式」的形式存在，这一点对于涉及模板的头文件也适用。</p><p>这一章依旧具有一定的难度，特别是：</p><ul><li>为「异常安全」而努力是值得的。这一条我目前还难以理解，因为鲜少接触相关实践案例。</li><li>将文件编译依存关系降至最低。虽然说从书面并且结合日常接触 Android 系统底层编译，让我有了一定的理解，但是我很少能改动或者新增一些头文件或者 <code>makefile</code>，所以理解还是不够深刻，实践时也不知道该从何下手。</li></ul><p>其它的条款基本上没什么问题，就是关于转型的部分，我还很少使用「新式转型」，这个还需要多动手练习练习。</p><h2 id="第六章-「继承与面向对象设计」"><a href="#第六章-「继承与面向对象设计」" class="headerlink" title="第六章 「继承与面向对象设计」"></a>第六章 「继承与面向对象设计」</h2><p>第六章的内容则主要是涉及到了 C++ 的核心，即「面向对象编程（OOP）」部分。作者总结了关于 C++ 的 OOP 中一些常见的疑问，并给出自己的解答，同时也好好地解释了一番 C++ 各种不同特性的真正意义。</p><p>回顾一下条款 32~40 的标题：</p><ol><li><p><strong>确定你的「public 继承」建模出「is-a 关系」。</strong></p><blockquote><p>Make sure public inheritance models “is-a”.</p></blockquote></li><li><p><strong>避免遮掩继承而来的名称。</strong></p><blockquote><p>Avoid hiding inherited names.</p></blockquote></li><li><p><strong>区分接口继承和实现继承。</strong></p><blockquote><p>Differentiate between inheritance of interface and inheritance of implementation.</p></blockquote></li><li><p><strong>考虑「virtual 函数」以外的其它选择。</strong></p><blockquote><p>Consider alternatives to virtual functions.</p></blockquote></li><li><p><strong>绝不重新定义继承而来的「non-virtual 函数」。</strong></p><blockquote><p>Never redefine an inherited non-virtual function.</p></blockquote></li><li><p><strong>绝不重新定义继承而来的缺省参数值。</strong></p><blockquote><p>Never redefine a function’s inherited default parameter value.</p></blockquote></li><li><p><strong>通过「复合」建模出「has-a 关系」或「根据某物实现出」。</strong></p><blockquote><p>Model “has-a” or “is-implemented-in-terms-of” through composition.</p></blockquote></li><li><p><strong>明智而审慎地使用「private 继承」。</strong></p><blockquote><p>Use private inheritance judiciously.</p></blockquote></li><li><p><strong>明智而审慎地使用「多重继承」。</strong></p><blockquote><p>Use multiple inheritance judiciously.</p></blockquote></li></ol><p>「public 继承」代表着什么？没错，是「is-a」关系，B 继承了 A，则「B 是一个 A」就应该成立，而适用于 A 的每一件事也都要适用于 B。<br>我们在设计继承关系时一定要考虑好这一点，因为某些常识性的东西可能会让我们混淆这一概念。比如说对于「鸟类」，我们通常认为「鸟会飞」，如果「鸟类」作为基类，则继承于此的所有类都应该有「飞」这一动作。但是问题来了，现实中「企鹅」也属于鸟类，但它「不会飞」！所以如果需要设计一个「企鹅类」，则它不应该继承于「鸟类」。</p><p>「变量遮掩」问题不止在继承关系中会出现。最早接触到这一问题应该是与「作用域」有关：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x; <span class="comment">// Global var</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x; <span class="comment">// Local var</span></span><br><span class="line">    x = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码很典型，<code>func</code> 函数中定义的局部变量 <code>x</code> 在「函数内部」覆盖住了全局变量 <code>x</code>，如果 <code>x = a</code> 这一语句原本是想对全局的 <code>x</code> 进行操作，那么这段代码就无法达到预期效果了。这说明了一点：我们使用变量时，是从局部开始，往全局方向进行查找的。</p><p>而在类继承关系中，子类的函数、变量名称与父类中相同，则会造成遮掩。此时我们可能就无法调用父类的 <code>public</code> 函数，这与预期不符。所以在设计与实现子类时一定要注意，不要对父类造成遮掩。如果已经造成遮掩，则需要采用「using 声明式」或「转交函数」来让其重见天日。</p><p>作者分析，<code>public</code> 继承概念是由两部分组成：「函数接口继承」与「函数实现继承」，它们是不一样的。</p><p>那么这两种继承是怎么回事？可以通过这几种函数大致了解其含义：</p><ul><li>父类中声明了的「纯虚函数」，仅仅具体指定了接口继承（父类不一定有实现），子类必须独立实现这一接口。</li><li>「虚函数」则指定了接口继承以及缺省的实现继承（父类的实现）。</li><li>「非虚函数」具体指定了接口继承，并且还强制性进行了实现继承。</li></ul><p>说到「非虚函数」的继承，我们应该要注意一点，即绝不能在子类重新定义它。因为有如下的情况：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    mf();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    mf();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    D x;</span><br><span class="line">    B* pB = &amp;x;</span><br><span class="line">    D* pD = &amp;x;</span><br><span class="line">    </span><br><span class="line">    pB-&gt;mf(); <span class="comment">// Call B::mf()</span></span><br><span class="line">    pD-&gt;mf(); <span class="comment">// Call D::mf()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，两个对 <code>mf()</code> 的调用对应到了不同的函数中。这不是我们预期的结果，至少在多态的情况下。</p><p>而对于「虚函数」，我们绝不能在子类重定义继承而来的缺省参数值。因为「虚函数」是「动态绑定」的，而缺省参数却是「静态绑定」的，这会导致什么情况呢？我在父类 A 中这样声明了虚函数 <code>darw(Color c = Color::red);</code>，然后再在子类 B 中声明 <code>darw(Color c = Color::green);</code>，当我们用一个 A 类指针指向一个 B 对象，再调用 <code>darw</code> 函数时，就会出现「调用了 B 类的具体实现，却使用了 A 类的默认参数」这种超出预期的效果。</p><p>「复合关系」与继承是完全不同的概念。「复合」又称为聚合、内嵌、分层、内含等，这是一种「has-a 关系」（在应用域），或者「根据某物实现出」（在实现域）。一个简单的例子可以解释这一关系：考虑需要通过 <code>std::list</code> 来实现一个 <code>Set</code> 类。我们不能通过继承 <code>std::list</code> 来实现，因为 <code>Set</code> 不是一个 <code>List</code>。此时我们就可以在 <code>Set</code> 内部设定一个 <code>std::list</code> 类型的成员，通过它来实现 <code>Set</code> 的种种操作，这就是「has-a 关系」。</p><p>使用「private 继承」时需要小心谨慎。与复合不同，它有着「对象尺寸最小化」的效果。一般来说它的级别比复合低，但是如果子类需要访问父类的 <code>protected</code> 成员，或者需要重定义继承而来的虚函数时，使用它也是合理的。</p><p>同样地，「多重继承」能力在使用时也是需要非常谨慎的。它可能会导致新的歧义，以及对「virtual 继承」的需要，而「virtual 继承」会增加大小、速度、初始化及赋值复杂度等的成本。最适合使用「virtual 继承」的情况则是该基类不带有任何数据时。虽然「多重继承」比较复杂且会带来不少麻烦，但它确实有其正当用途，比如「public 继承某接口类」的同时还要「private 继承某个协助实现的类」的情况。</p><p>这一章看得我脑子有点乱，「继承」是一个非常强大的特性，但是它经常给我带来代码阅读与理解上的困扰。</p><p>觉得比较难以理解消化的条款就是：</p><ul><li>考虑「virtual 函数」以外的选择。</li><li>明智而审慎地使用「private 继承」。</li><li>明智而审慎地使用「多重继承」。</li></ul><p>之后需要继续结合实践，深入研究体会。</p><h2 id="第七章-「模板与泛型编程」"><a href="#第七章-「模板与泛型编程」" class="headerlink" title="第七章 「模板与泛型编程」"></a>第七章 「模板与泛型编程」</h2><p>第七章进入了 C++ 模板的领域。一开始，模板的出现是为了让我们得以建立「类型安全」的容器，比如 <code>vector</code>、<code>list</code> 以及 <code>map</code>。后来人们渐渐发现模板具有非常强大的能力，甚至它本身就是一部完整的「图灵机」（可以被用来计算任何可计算的值）。模板的应用非常宽广，但作者总结出了一组支撑起所有模板编程的核心观念：</p><ol><li><p><strong>了解隐式接口和编译期多态。</strong></p><blockquote><p>Understand implicit interfaces and compile-time polymorphism.</p></blockquote></li><li><p><strong>了解「typename」的双重意义。</strong></p><blockquote><p>Understand the two meanings of typename.</p></blockquote></li><li><p><strong>学习处理「模板化基类」内的名称。</strong></p><blockquote><p>Know how to access names in templatized base classes.</p></blockquote></li><li><p><strong>将与参数无关的代码从模板中抽离。</strong></p><blockquote><p>Factor parameter-independent code out of templates.</p></blockquote></li><li><p><strong>运用成员函数模板接受所有兼容类型。</strong></p><blockquote><p>Use member function templates to accept “all compatible types”.</p></blockquote></li><li><p><strong>需要类型转换时请为模板定义非成员函数。</strong></p><blockquote><p>Define non-member functions inside templates when type conversion are desired.</p></blockquote></li><li><p><strong>请使用「traits classes」表现类型信息。</strong></p><blockquote><p>Use traits classes for information about types.</p></blockquote></li><li><p><strong>认识「template 元编程」。</strong></p><blockquote><p>Be aware of template metaprogramming.</p></blockquote></li></ol><p>关于隐式接口与编译期多态，可以通过对比「模板」与「类」来大致地理解：</p><ul><li>对于「模板」参数而言，接口是隐式的，它奠基于有效表达式。而多态则是通过「模板具现化」与「函数重载解析」发生于编译期。</li><li>对于「类」来说，接口是显式的，它以函数签名为中心。其多态是通过「虚函数」发生于运行期。</li></ul><p><code>typename</code> 具有双重意义。首先要知道的是，模板参数声明中的 <code>class</code> 与 <code>typename</code> 是一样的，可以随意互换。其次，对于嵌套从属类型名称，比如有这么个语句 <code>Base&lt;T&gt;::Nested temp;</code>，编译器并不知道这是一个类，所以我们需要修改语句为 <code>typename Base&lt;T&gt;Nested temp;</code>，这样才能通过编译。不过注意，在「成员初值列」与「基类列」中不能使用 <code>typename</code>。</p><p>将与模板参数无关的代码从模板中抽离，否则可能会产生我们所不愿看到的代码膨胀问题：</p><ul><li>对于「非类型模板参数」造成的膨胀往往可以消除。其方法是以函数参数或者类成员变量来替换这一模板参数。</li><li>对于「类型模板参数」造成的代码膨胀通常可以降低其影响。其方法是让带有完全相同二进制表述的具现类型来共享实现码。</li></ul><p>运用成员函数模板接受所有兼容的类型，一个关键示例是「泛化拷贝构造函数」：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPtr</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">template</span>&lt;U&gt;</span><br><span class="line">    SmartPtr(<span class="keyword">const</span> SmartPtr&lt;U&gt;&amp; other);</span><br><span class="line">    SmartPtr(<span class="keyword">const</span> SmartPtr&amp; other); <span class="comment">// Note</span></span><br><span class="line">    ......</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样就能实现对各种类型的兼容，但需要注意的是，我们声明这样的泛化成员函数时，我们还需要同时声明一个正常的相应函数。</p><p>「Traits」允许你在编译期间取得某些「类型相关信息」。它是一种技术，也是一个 C++ 程序员共同遵守的协议。将其与「重载技术」进行整合后，「Traits class」就有可能在编译期对类型执行 <code>if.else.</code> 测试。</p><p>最后作者提到了「模板元编程」技术，说实话，没怎么看懂……</p><p>阅读这一章搞得我脑壳疼，因为本身就太少实践模板技术，平常看代码时也没有深入分析模板的妙处，因为它简单的地方太容易理解，而难的地方又实在是很难……总之我是觉得，模板技术固然强大，但它大大降低了代码的可读性……</p><p>难以理解的条款太多了：</p><ul><li>学习处理「模板化基类」的名称。</li><li>需要类型转换时请为模板定义非成员函数。</li><li>请使用「Traits class」表现类型信息。</li><li>认识「模板元编程」。</li></ul><p>看来下一阶段要好好攻克模板技术了。</p><h2 id="第八章-「定制-new-和-delete」"><a href="#第八章-「定制-new-和-delete」" class="headerlink" title="第八章 「定制 new 和 delete」"></a>第八章 「定制 new 和 delete」</h2><p>第八章就不用说了，并没有看，因为目前完全没碰到过这些情况……</p><ol><li><p><strong>了解「new-handler」的行为。</strong></p><blockquote><p>Understand the behavior of the new-handler.</p></blockquote></li><li><p><strong>了解「new 与 delete」的合理替换时机。</strong></p><blockquote><p>Understand when it makes sense to replace new and delete.</p></blockquote></li><li><p><strong>编写「new 和 delete」时需固守常规。</strong></p><blockquote><p>Adhere to convention when writing new and delete.</p></blockquote></li><li><p><strong>写了「placement new」也要写「placement delete」。</strong></p><blockquote><p>Write placement delete if you write placement new.</p></blockquote></li></ol><h2 id="第九章-「杂项讨论」"><a href="#第九章-「杂项讨论」" class="headerlink" title="第九章 「杂项讨论」"></a>第九章 「杂项讨论」</h2><p>第九章也没有详细看，TR1 和 Boost 基本上没有接触，虽然作者表示用起来会很高效。毕竟现在都只是在做 Android 系统底层的开发，这两个东西也没法用啊…</p><ol><li><p><strong>不要轻忽编译器的警告。</strong></p><blockquote><p>Pay attention to compiler warnings.</p></blockquote></li><li><p><strong>让自己熟悉包括「TR1」在内的标准程序库。</strong></p><blockquote><p>Familiarize yourself with the standard library, including TR1.</p></blockquote></li><li><p><strong>让自己熟悉「Boost」。</strong></p><blockquote><p>Familiarize yourself with Boost.</p></blockquote></li></ol><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过回顾这些内容，我发现我对这本书的了解可能还不到六成。</p><p>抛开暂时不管的最后两章。其它章节中，只有前三章做到了每一条目都能好好理解掌握，之后的几章就开始逐渐遇到困难。特别是到了模板的部分，啃起来就像是在啃石头一样。</p><p>功力尚浅，功力尚浅啊！</p><p>果然工作这一年来，我写的代码还是太少了。虽说业务上都是在改 Android 底层的源码，或者在这上面加些代码，能亲自实践的面太窄，根本没有体会过一整套软件系统的构建过程。但是这些业务不触及的部分，我在业余时间也没有好好钻研，我个人的懒惰问题也是不容忽视的啊。</p><p>接下来一定要好好针对弱项补课，希望在下一次阅读这本书的时候，现在难理解的这些项都能被攻克。</p><h2 id="最后叨比几句"><a href="#最后叨比几句" class="headerlink" title="最后叨比几句"></a>最后叨比几句</h2><p>最近一直在想，为什么当时签约时发现到公司规定本届应届生一年半内不给涨工资，而且开价也不高，但我还是来了。</p><p>因为我 TM 没得选啊！能力太差，菜是原罪！</p><p>「当你抱怨你的待遇和环境不好时，先想想你为什么会在这里。」</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;近两月公司项目少，主要精力都放在 HAL1 到 HAL3 的业务迁移学习中。花了蛮多时间看代码，也试着写了 Open Camera 的流程分析文档，发在了&lt;a href=&quot;https://blog.csdn.net/qq_16775897&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的 CSDN 博客&lt;/a&gt;里。&lt;/p&gt;
&lt;p&gt;当然整天只能看看看看看代码，是真的很容易觉得枯燥的。即便是对 Google 和 QCom 的这些比较赏心悦目的代码风格来说，连续看两三个小时也是会开始心不在焉的。于是我搬出了大四时候买的《Effective C++》，开始（在看腻了代码的时候）慢慢啃了起来。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://StoneAndFish.cn/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="编程技术" scheme="http://StoneAndFish.cn/tags/%E7%BC%96%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    
      <category term="温故知新" scheme="http://StoneAndFish.cn/tags/%E6%B8%A9%E6%95%85%E7%9F%A5%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>[石头 · 记] 一小段人生总结</title>
    <link href="http://StoneAndFish.cn/2018/03/01/Stone-2017-Summarize/"/>
    <id>http://StoneAndFish.cn/2018/03/01/Stone-2017-Summarize/</id>
    <published>2018-02-28T16:37:39.000Z</published>
    <updated>2019-09-08T08:08:53.260Z</updated>
    
    <content type="html"><![CDATA[<p>2017 年对我来说，确是非凡的一年。<br>在这一年中，我既是学生，又是职场人。但说实话，我没有太多关于这种身份转变的感悟。<br>最值得一说的，大概就是我开始经济独立，不需要再向父母讨要生活费，而且上个月还给家里添置了一个洗烘一体机。<br>还有一件值得高兴的事，就是鱼保研了中大，异地恋的路程因此缩短了三个小时。<br>现在是 2018 年了。总觉得好久没有写总结了，所以这一次要写，我就想干脆写个大的。</p><a id="more"></a><h1 id="终结的学生时代"><a href="#终结的学生时代" class="headerlink" title="终结的学生时代"></a>终结的学生时代</h1><h2 id="早已逝去的小学生"><a href="#早已逝去的小学生" class="headerlink" title="早已逝去的小学生"></a>早已逝去的小学生</h2><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;“我的梦想”，这个题目是不是很熟悉？第一次遇见它，是在小学时期。当时的我，与许多同学一样，写下了 “成为一名科学家” 这样的模板化的梦想。当时的我，并不知道究竟何样的念想，才能称得上是一个人的梦想。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;无知，大概是能贯穿我整个小学时代的词语。那时被高年级的朋友带去黑网吧上网，被哄骗拿压岁钱出来请客，还以为自己好吊的。有时候半夜偷偷起床，到父母的裤兜里摸钱，然后还把钱都投到了玩具里，被发现被教训了好几次都改不掉……<br>现在想想，那样的我，竟没在这混乱的世道中被砍死，已是足够幸运的了。但他也确实消失了，那个坏掉的小学生，他早已逝去。</p><h2 id="奄奄一息的中学生"><a href="#奄奄一息的中学生" class="headerlink" title="奄奄一息的中学生"></a>奄奄一息的中学生</h2><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;初恋，似乎是在初一的时候。青涩懵懂，少男少女从未牵过手，也没有过独处的时光，只靠着朋友每天为他们传递着一封封的情书。我也曾知道很多种情书的折法啊，但她的名字早已不在记忆之中了。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;但终究不是一个世界的人，难以再靠近一步。分开是正确的结局。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;要说初中时代的最大收获，我定会毫不犹豫地说，是兄弟。我们 “大化十一少” 集结至今，想想也已经有了七八个年头了吧。其实也不太记得，为什么是我们十一个人聚集在了一起，为什么没有多几个人，又为什么没有少几个人。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;我第一次提起学习干劲，是在高中。那时的我，遇见了物理学。我为这诠释世界运转规律的学科所着迷，我第一次对我的梦想有所描绘，我想成为解开这神秘自然的秘密的贡献者之一，就像爱因斯坦描绘了空间的运作规律，麦克斯韦构造了电磁学的基础方程组。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;曾以为物理竞赛是一个很好的切入点，因此我为它贡献了整个高二的时光，学校里没有教竞赛的老师，我只能照着竞赛贴吧里各位前辈的推荐学习路线慢慢摸索，学了高等数学、大学物理，甚至专门学习了力学，而高中的功课再也没去做……我曾以为能看懂这些东西，就能称得上是 “厉害” 的人了。<br>其实，我终究不过是茫茫人海中那普通的一员。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;在最终的考试中，我被虐得体无完肤。我曾想将失败的主要原因归咎于没有好的竞赛环境，只靠自学和少量题目训练无法得到有效提升。其实不尽然，因为我根本不够努力，根本就太普通。没有天赋，也没有百倍于常人的努力，所谓的梦想，大概是一生也无法触及的幻想。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;这样一个普普通通的中学生，终究被现实击溃，奄奄一息。所幸的是身上的中二烙印让他没有就此散为云烟，而是化作一丝中二之魂一直伴我左右。</p><h2 id="重获新生的大学生"><a href="#重获新生的大学生" class="headerlink" title="重获新生的大学生"></a>重获新生的大学生</h2><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;考上厦大，于我来说，这其中的运气和实力之比约摸是一比一。当年加上了神秘的民族分（或者说是贫困县特有的加分？），我那尴尬的成绩才勉勉强强越过了厦大计算机类的分数线。恰逢当年厦大还没那么火爆，而信科学院也并不出名，于是我最终拿下了这个第一志愿。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;或许是这世界偷偷开了后门，诸多巧合的重叠，融合成了我走向新生活的契机。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;在进入大学校园之前，我就已决心作出改变。抛去了那些无谓的一步登天的幻想，也摒弃那些自甘堕落的思绪，从此 “均衡” 成了我秉持的信念 —— 我希望能作为一个快乐的普通人，恰到好处地生活下去。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;从入学开始就勤奋努力，学习到毕业，甚至继续研究生、博士生 —— 当然，这不是我所向往的大学生活。我认定我的第一年，就是要娱乐多过学习，所以我就这样度过了大一：逃课，打游戏，疯狂抄作业，在海韵三的宿舍里睡上两天两夜；面基，组小团体，补梗，疯狂 KTV，在厦门的海边畅谈人生直至天明。仗着早已学过的高数大物，这一学年的成绩还算在预期之中，只不过没料到的是，近代史挂了。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;第一年最大的收获，就是称为 “梗” 的小团体。能在大学这样的开放式环境里交到这十来个知心朋友，我读这大学已经值得了。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;然而接下来的际遇，很可能改变了我原有的人生轨迹 —— 第二年伊始，遇见了我的小学妹，我的鱼。一改以往的内向被动，这次我主动出击，经过多方打探，以及找准时机创造足够多的相处时间，终于在 2014 年的尾期捕获芳心，摆脱了单身狗的头衔。从此我仿佛改邪归正了一般，开始对课内的学习上心了。虽然在我的预期中，大学后三年确实要逐渐把重心转移到学习上，但没想到会转移得如此迅速。很快，我的成绩开始赶上来了 —— 虽然本来由于专业的关系，我那 70+ 分的平均分还能排到第三名，不过距离第二名我还差了十几分……第二学年，我的平均分超越了第二名，拿到了一些奖学金。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;这一年我开始和鱼一起出去旅游，还买了一台微单，打开了业余摄影的爱好。或许因为遇见鱼，我的内心开始逐渐充满阳光 —— 我是何等的幸运啊。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;第三年，在我的计划中，开始要为以后的工作进行一些准备了。于是开始混迹一些学术竞赛，联系老师给我分配一些实战任务（其实也就是外包任务）。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;其实大二下学期的时候我就已经开始准备以后的谋生技能了：我尝试过给影楼剪辑一些婚礼视频，赚到了两千多，但是好累好累；由院里的老师牵线搭桥，做了一个关于高性能 UDP 消息中转站的外包任务，赚了四千块，于是就买了我一直在用的 Sony a5100……当然这些都只是一些尝试，实践的经验还是有所欠缺，所以大三时我继续找老师做一些任务，不管是能拿钱的外包，还是只是帮忙在科研项目上做一些微小贡献。同时也参加了一些企业开展的软件设计竞赛，还有智能设计竞赛，虽然状况百出，最终都没什么很好的成绩，但做过的这些努力最终还是让我具有了一定的硬实力。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;大三结束，学年平均成绩终于突破 90+，成为了第一名。这一年的评奖评优，我和鱼同时拿到了五千奖学金，于是浪了好一阵子。可以说达到了我的学业巅峰了。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;最后一年，不出意料，我没有保研资格 —— 因为六级没过啦。虽然毕设导师一直极力帮助我，想给我争取到破格的资格，但这一届只有竞赛破格，像我这样没有拿到国家级一等奖的也就没办法了。很感谢张老师。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;拖延症发作，十月份才开始为投简历找工作做准备，而这时候互联网大厂的校招都已经处于尾声。匆忙赶上了网易和 YY 的最后一场，然而准备不充分而导致面试失败了。接下来就是厦门软件园的一些游戏公司，准备不足的劣势还是让我在各种二面三面中败下阵来。其实当时我内心还是很失落的，但只要和鱼待在一起，我就会感觉这些失落一扫而空。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;后来我开始总结失败经验，开始到 CSDN 写博客，把失败的题目总结出来，反省思考，没想到过了不久，在十一月的开头我收到了天珑的 offer。从此我便和保研的同学一样，过上了养猪般的生活。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;当然，我也是有为未来的工作做一些准备的 —— Effective C++，设计模式其实都在慢慢看慢慢学；毕业设计也有用心去搞，读了不少论文，作了许多总结，为最终的算法展示搭建一个对当时的我来说，已经足够完善的实验平台。最终我顺利毕业，背起行囊到深圳开始了打工生涯。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;这一年，和鱼的感情也越来越深，我常常觉得，我们的热恋期会一直延续到肉身逝去方止。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;回顾整个大学生涯，我感觉不到有何遗憾 —— 有鱼，有 “梗”，足矣。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;现在，我的梦想就是 “和鱼在一起，愉悦地生活（当然还要有几只喵）”。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;重获新生，区区四字，已足够描述我的这段人生。</p><h1 id="打工生涯的起点"><a href="#打工生涯的起点" class="headerlink" title="打工生涯的起点"></a>打工生涯的起点</h1><h2 id="菜鸟软件工程师"><a href="#菜鸟软件工程师" class="headerlink" title="菜鸟软件工程师"></a>菜鸟软件工程师</h2><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;入职快八个月了。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;刚开始的两个月都是无尽的培训，甚至还到工厂去当了半个月的包装工。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;后来分配到了影像框架组，专门维护 Android Camera 中的 Framework 和 Hal 部分，以及对接一些第三方算法，诸如美颜、人像虚化之类。说实话，在此之前，我从没去了解过关于 Android 内部架构的内容，于是买了老罗的 Android 源码分析的书，狂啃一个月恶补知识，同时也接一些小任务熟悉熟悉业务。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;公司重点发展 Camera，于是影像组升级，成了影像部，不过我还是在框架组里。组里只有五个人，实际上完全不够，由于框架部分的范围很广，而且不同平台（高通，MTK）区别又非常大，所以每个人关注的部分都不一样，现在大家都在做着不同的部分，而我则是各个部分的小任务都去蹭蹭……<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;也得益于人手不足，有许多新业务的开发任务就落在了我头上。虽然有些赶鸭子上架的感觉，但自从做了几个比较大的新业务逻辑后，我不仅提升了撸代码的能力，还在架构设计上有了一定的经验积累。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;但现在我渐渐觉得，现在很多时间都花在了解决 Bug 上面，每天的生活就是等测试报告 Bug，然后我们查 Log，解 Bug……说实话，很多时候 Bug 只是某些人或者自己以往编码时的笔误导致的，而这些失误往往会让我们花费大量的时间去寻找原因。效率极低，也学不到多少东西。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;我觉得必须要转型了，往 AI 方面去学习，而且要偏向算法一些。趁着现在年轻。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;于是我开始学习一些新东西，渐渐捡回数学功力，开始熟悉英语（也为此加入了腾讯云社区的翻译社）。一切都在为转型进行准备，而今年的业余时间，我会更专注于转型，争取能在明年年初有跳槽的能力，至少要在后年劳动合同到期之前具备找到更好下家的实力。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;这八个月也是异地恋的八个月。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;虽然黏在一起的时间少了很多，但我觉得现在这一时期保持一定的距离也不坏。整天在一起太久了，我发现我们的进步越来越缓慢，有时候太过沉溺于享受二人世界，可能会限制成长的脚步。我希望这两年的异地生活，能让我们快速成长，为迎接往后更细碎日常的生活作出充足的准备。<br>&#160;&#160;&#160;&#160;&nbsp;&nbsp;不多说了，努力！奋斗！</p><h1 id="新年愿景"><a href="#新年愿景" class="headerlink" title="新年愿景"></a>新年愿景</h1><ul><li>保持和鱼去旅游的优良传统。</li><li>好好理财，保持一定存款。</li><li>有待遇翻倍的能力。</li></ul><hr><p>拜个晚年。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017 年对我来说，确是非凡的一年。&lt;br&gt;在这一年中，我既是学生，又是职场人。但说实话，我没有太多关于这种身份转变的感悟。&lt;br&gt;最值得一说的，大概就是我开始经济独立，不需要再向父母讨要生活费，而且上个月还给家里添置了一个洗烘一体机。&lt;br&gt;还有一件值得高兴的事，就是鱼保研了中大，异地恋的路程因此缩短了三个小时。&lt;br&gt;现在是 2018 年了。总觉得好久没有写总结了，所以这一次要写，我就想干脆写个大的。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://StoneAndFish.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="http://StoneAndFish.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="小矫情" scheme="http://StoneAndFish.cn/tags/%E5%B0%8F%E7%9F%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>[鱼 · 记] 2017</title>
    <link href="http://StoneAndFish.cn/2018/02/27/Fish-2017-Summarize/"/>
    <id>http://StoneAndFish.cn/2018/02/27/Fish-2017-Summarize/</id>
    <published>2018-02-27T15:35:42.000Z</published>
    <updated>2019-09-08T08:05:22.013Z</updated>
    
    <content type="html"><![CDATA[<p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;就改改以往的按月份记录流水账的格式吧。感觉这一年可以算是我开始逐渐成人的一年，对，不是刚上大学那年，也不是十八岁那年。真晚熟。这一年的变与不变，这一年的各种见闻。</p><a id="more"></a><h2 id="变化"><a href="#变化" class="headerlink" title="变化"></a>变化</h2><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;身边的人发生了变化。从以往一直绑定在一起的两个人，开始面临异地。异地之后，突然多出了许多属于自己的时间，最开始时是很不知所措的，整日待在宿舍不活动，到后来逐渐才意识到需要振作与改变。开始自己锻炼和学习，自己重新掌控生活，依赖得太久需要慢慢站直。异地短暂的别离让人很期待每一次的相聚，我也正在渐渐熟悉着你的城市，或许也是我们未来的城市，但每次回到学校，路过我们一起走过的大街小巷时还是十分想念你的陪伴啊。</p><p>&#160;&#160;&#160;&#160;&nbsp;&nbsp;身份发生了变化。自从你开始工作，我也得以窥探到工作后的世界，反而觉得并没有之前想得那么令人恐慌，经济独立、能够过上自己的生活，还蛮好的嘛。每次我在家里做饭等你下班，或是我们一起外出买菜归来，各种生活化的情节，事无巨细都由我俩讨论分担，突然从校园恋爱进入现实，最开始时我竟还因掺和进柴米油盐而失落，矫情的人呀，然而人间烟火的温暖与真实让我意识到从前的愚笨无知：虽然事务繁杂，但都是自己有权去掌控去选择的，自由多迷人。或许是这之后吧，我开始留意起许多过去不屑在意关心的东西，从中发现不少美与丑恶，鞭挞着我成为一个更<strong>完整</strong>的人。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;然后，我变成了大四生。大三下的那场保研，每天忙着准备资料和应对课内，匆匆忙忙之中又为转折点作了重要决定。暑假的夏令营，很是开拓眼界了，对于我这个待在舒适圈太久已经安逸惯了的人，还是带来许多落差的，也是，直到那时候，我才开始懂得，什么叫”要对自己负责”，直至目前还在逐步践行中，逐步改变过去的习惯想法。有一点可惜，直到大四了才开始发现问题的症结。只能选择相信自己还有救。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;开始养生。被感冒鼻炎折磨多了，终于向多喝热水妥协，还买了个保温杯。也开始锻炼，但是keep之类似乎耗时长见效还小，新一年打算结合跑步。开始关注身体的各项变化，身体状态好一定是情绪良好、做事有效率的基础。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;技能点。掌握了一些新的技能点哈哈。比如上半年终于学会并爱上游泳，游泳时的内心平静和举重若轻，比跑步的上气不接下气优雅多了哈哈。比如做饭，本身就喜欢吃东西，所以想尝试自己做出好吃的，说起来我的爱吃和会吃属性还是被你激发的。比如开始戴隐形，摆脱了框架，虽然偶尔还会习惯性地托眼镜。</p><h2 id="见闻"><a href="#见闻" class="headerlink" title="见闻"></a>见闻</h2><p>&#160;&#160;&#160;&#160;&#160;&#160;夏令营。另一所学校，那几天在校园里骑车，空旷少人，抬头是夏季烂大街的蓝天，安安静静，心旷神怡，那一瞬觉得偏居一隅的求学也很令我向往了。除此之外，感觉大牛导师也很多。从零开始。以后还会经历很多从头开始，重新适应新一波人。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;开始研究墙外的世界。了解到很多不同的、被习以为常忽略的观点，都说在20岁左右的时候，就需要对世界有清晰的认识，既然人出不去，只好退而求其次，通过网络来了解了。看了越来越多讨论，除了体会到个人的渺小，也越发觉得事情无分对错，只有适不适合。新一年打算继续多读书，多认知这个世界。</p><h2 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h2><p>&#160;&#160;&#160;&#160;&#160;&#160;和你去汕头。感觉那儿吃的虽然不错，但似乎没能让我俩太惊艳，难道是期望值太高。不过潮汕牛肉火锅是确实很好吃哒~其它比较惊艳的是四处可见的猫猫~好像是我们去旅游那么多次，见得比较多猫猫的地方，在街上随意逛逛就看到店里有咪。总结来说，虽然都是在广东，但我俩都更偏爱广府的风味~</p><p>&#160;&#160;&#160;&#160;&#160;&#160;和你去深圳。初到深圳的一段时间，我总是觉得这里的食物比不上广州，总感觉深圳非常不走心，比起广州常常可见的老店，而深圳比较多的是全国各地吃的都有，于是我偏爱的广府就这样占比被冲淡了。就是到目前，我还是觉得深圳的食物比不上广州，只不过是深圳繁华的大型MALL更多，稍微平衡了一下而已。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;和你去香港。把我所爱，介绍于你。去了知名的喜剧之王打卡点，去坐了叮叮车和天星小轮，还有好多可打卡之处~以后我在广州啦，把户口迁过来之后就可以每周去一次~我是那么地偏爱那一门语言、偏爱它所衍生出的文化。可我再怎么偏爱，我也是局外人，在随着慢慢独立思考而不是一昧认可之后，许多事情我也无法苟同。或许因为没有真真切切体会过。不过爱的心不变，应该说只是变得更理性看待了。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;和舍友去台湾。小时候台湾偶像剧、台湾歌手纵横童年的时候，还是对台湾很有好感的，后来迷上粤语文化之后就逐渐淡忘了它。踏上这片土地，感受所有的不一样，城市规划、基础设施、随处可见的7-11，软软糯糯的台湾腔，然而台湾最美的风景还是人，这话是真的没毛病。虽然一路上，也有一些莫名其妙的经历，但总的来说民众素质还是较高的。去了潜水，体验很棒！如果天气再热点，如果自己呼吸能好好掌控，就更好辣~虽然在水底的时候，呼吸困难、冰冷发抖到期待着赶紧上去，但是现在想来可能是不愿意承认这次潜水不够成功吧哈哈。回来之后突然对台湾的政治起了兴趣，立flag找找资料来看。</p><p>&#160;&#160;&#160;&#160;&#160;&#160;旅行真好，一路上见识不同的人不同的生活，虽然有时也喜欢那份旅程结束回到家时的安心。看了个YouTube的up主，正好说的台湾旅行，不同于一般的7天/9天环岛路线，他们选择7天都待在花莲，认为这样能有更深度的体验。嗯，下次可以试试~~</p><h2 id="不变"><a href="#不变" class="headerlink" title="不变"></a>不变</h2><p>爱好依然不变。猫猫和广东歌。<br>今年失去了最亲近的猫猫，虽然迟早会发生，不是我走就是它走，本来还幻想过以后能把它接走的。<br>今年看了两场演唱会。泉州，和你去看张学友；广州，和家人去看林子祥。都是超级尽兴！不过，还是好想去红馆，好想和同道中人去！</p><h2 id="希望"><a href="#希望" class="headerlink" title="希望"></a>希望</h2><p>说好的今年不立flag呢。。还是不立了，在心里默默改。</p><p>那说一下愿景吧。</p><p>希望能成为更好的人。</p><p>20岁的年纪不要过养老退休的生活。</p><p>希望感情能永葆青春。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;nbsp;&amp;nbsp;就改改以往的按月份记录流水账的格式吧。感觉这一年可以算是我开始逐渐成人的一年，对，不是刚上大学那年，也不是十八岁那年。真晚熟。这一年的变与不变，这一年的各种见闻。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://StoneAndFish.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="总结" scheme="http://StoneAndFish.cn/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="小矫情" scheme="http://StoneAndFish.cn/tags/%E5%B0%8F%E7%9F%AB%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>[到此一游] 日式和风之御温泉</title>
    <link href="http://StoneAndFish.cn/2018/01/23/YuWenQuan2018/"/>
    <id>http://StoneAndFish.cn/2018/01/23/YuWenQuan2018/</id>
    <published>2018-01-22T16:13:52.000Z</published>
    <updated>2019-09-08T05:33:21.828Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/09/08/ADr6mn8zCWeVoj3.png" alt="题图.png"></p><p>时间：2018.01.13 ~ 2018.01.14<br>地点：深圳 —— 珠海御温泉<br>人物：石 &amp; 鱼<br>花费：人均 1200+ RMB<br>（多图预警）</p><a id="more"></a><h1 id="鱼-·-记"><a href="#鱼-·-记" class="headerlink" title="鱼 · 记"></a>鱼 · 记</h1><p>&#160; &#160; &#160; &#160;之前就一直听石说御温泉的体验很好，后来在微博上搜了相关的信息，感觉风评很不错~日式的风格看起来也很是吸引，当即讨论预定行程，然后就满心欢喜地期待着……<br>&#160; &#160; &#160; &#160;第一次从深圳坐船出发，还算平稳没有晕船，到珠海的九州港之后打算在周围消磨一下时间，再去坐御温泉的接驳车，结果就正好发现了一只黄白喵~更幸运的是它还很亲人~撸猫撸了个爽！<br>&#160; &#160; &#160; &#160;上车之后会有工作人员跟我们提前交代好一切，我们当时去得还是稍微早了点，酒店三点入住，一点退房，虽然大约两点左右就可办理入住，但是我们当时是十一点的车，十二点半左右就到达度假村了，所以还是要等待一会儿，不过其实也顺带消解了舟车劳顿的疲惫，可以早点开始泡温泉。<br><img src="https://i.loli.net/2019/09/08/xStDZ3QnGFkoWrz.png" alt="住房and浴衣.png"></p><h2 id="温泉"><a href="#温泉" class="headerlink" title="温泉"></a>温泉</h2><p>&#160; &#160; &#160; &#160;入住后换上浴衣就去泡汤了，前几个池子体验都很好~在泡汤的时候还会有服务员提供茶水，可以边泡边喝；场所里还到处都摆放着消毒过的新浴巾可供更换，这一点简直深得我心。泡过的几个池子里，印象比较深刻的一个是药池，刚开始坐进去的时候一股好大的药味，感觉自己下一秒都要被煮成中药喝下肚了。。后来泡着泡着肚子饿了，跑去休息区吃了点东西，又继续下池子了。但是之后不知道为何都是泡不了多久就受不了，觉得好烫，还有点晕晕的。。还好有游泳池，水温也算暖和，赶紧下去冷静一下，在水里活动开了之后，发现自己还是比较青睐游泳池。<br>&#160; &#160; &#160; &#160;玩了好一阵之后，又回到主池泡了一会回回温，就离开了，在房间稍作清洗整顿，又奔向晚上的大餐庙会了。</p><h2 id="晚餐"><a href="#晚餐" class="headerlink" title="晚餐"></a>晚餐</h2><p>&#160; &#160; &#160; &#160;由于我们去的比较晚，没有位子了，也懒得等位了，直接进去端着盘子边走边吃。<br>&#160; &#160; &#160; &#160;庙会里面的美食实在太丰富了，日式的天妇罗寿司刺身、粤式的糖水老火靓汤萝卜牛杂、西餐里的牛排鹰嘴豆炸薯条鱿鱼圈、东南亚的柠檬草鸡翅咖喱、各色西点还可以自己淋上果酱DIY图案、果汁咖啡冰沙花茶……数不尽~真遗憾自己只有一个胃。而且食物放置的地方看起来都保持得挺干净，路上偶尔会有一块区域摆放着几个桌台，可以停在那站着吃，用过的餐具可以摆放在那待工作人员收拾，可以说是很贴心了。<br><img src="https://i.loli.net/2019/09/08/ON579xZWnsI1CSP.png" alt="萝卜牛杂.png"><br><img src="https://i.loli.net/2019/09/08/LgDJne3tQSMb2ps.png" alt="虾趣.png"><br><img src="https://i.loli.net/2019/09/08/GIfKZReErHU3B4y.png" alt="炸物.png"></p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h2><p>&#160; &#160; &#160; &#160;我们吃饱了就跑去四处逛逛，凑上了一台赌桌，赌大小赌点数，筹码是进场的时候发的”衙票”，在那玩了好一会~然后到处拍拍照什么的，想回去继续吃东西的时候才发现快结束了，最遗憾的是没有喝到汤和没有吃到棉花糖！<br><img src="https://i.loli.net/2019/09/08/hTFQ5zHLmnwNCZE.png" alt="衙票.png"><br><img src="https://i.loli.net/2019/09/08/bD9rAuNdEf13Lsc.png" alt="游戏.png"><br><img src="https://i.loli.net/2019/09/08/R9n24OiBrcNkm6C.png" alt="虎头铡_1.png"></p><p>&#160; &#160; &#160; &#160;回房间收拾收拾就躺尸了，一整天玩下来累得一闭眼就睡着了，胃很充实身子也泡得暖暖的一天！<br><img src="https://i.loli.net/2019/09/08/JTIk48pjma3hoMQ.png" alt="各种吃_1.png"><br>&#160; &#160; &#160; &#160;第二天的自助早餐，味道不错~但还是很好奇西式的种类，以后一定要尝试一次！【来度假村的路上，工作人员说西式的早餐场地是露天的，可能会有点冷，我们就没选】<br>&#160; &#160; &#160; &#160;中午随便吃了些干粮，就踏上返程了。又是一番舟车劳顿，回到了熟悉的家，感觉真好。</p><hr><h1 id="石头-·-记"><a href="#石头-·-记" class="headerlink" title="石头 · 记"></a>石头 · 记</h1><h2 id="前篇"><a href="#前篇" class="headerlink" title="前篇"></a>前篇</h2><p>&#160; &#160; &#160; &#160;去年十一月份，部门旅游时跟着大佬们去了一趟御温泉，感到各方面的体验都是极佳的。那天晚上，我走在热闹的庙会小街上，用我那台老掉牙的大法微单记录着身旁发生的一切，那时候我就觉得，如果鱼在这里，肯定会很喜欢。<br><img src="https://i.loli.net/2019/09/08/lmijrHuMv8RVbct.png" alt="庙会街一瞥.png"></p><p>&#160; &#160; &#160; &#160;于是十二月中旬，看了看腰包，嚯嚯~还有点闲钱。立马就在官方微信上定下了一个月后的大床房。其实我们本想定的是“双人入格”的房间，能便宜 <code>400</code> 左右，但是这个房型实在是太难预订了，最近的有房的周末已经快到三月份了……</p><p>&#160; &#160; &#160; &#160;满怀期待了一个月，终于等到了出游的那一天。早上早早地起了床，蒸了几个饺子当早餐，然后就出发往蛇口港了。</p><p>&#160; &#160; &#160; &#160;坐船一个小时左右，就到了珠海九州港，下船后感觉有点晕晕的。出港后往旁边的停车场走去，老远就能看到御温泉的大巴车。由于离发车还有点时间，我们到马路对面去溜达了一下。随后我们就遇到了“警局喵”，很亲人，大概附近经常有人喂它吧。</p><p><img src="https://i.loli.net/2019/09/08/yJPNmdXCEzLH8f3.png" alt="警局喵.png"></p><p>&#160; &#160; &#160; &#160;大巴发车后，大概有 80 分钟才到度假区。在车上大家交了身份证（办理入住），选了第二天的早餐，以及回程的大巴时间。</p><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>&#160; &#160; &#160; &#160;一点左右的时候，我们终于到达了目的地。不过这时候按照规定还没法入住，我们就先等在大厅休息区，吃我们准备好的午餐。然后还发现有一些小孩子的玩意儿能玩，于是我们就抢占了小盆友的宝地，开始消磨时间……</p><p><img src="https://i.loli.net/2019/09/08/K31TPxQLlJMFEZf.png" alt="小玩意儿.png"></p><p>&#160; &#160; &#160; &#160;到了两点多，我们就去前台问是否能入住，果然房间已经清扫完毕，可以入住了，于是我们拿上房卡，就去房里休息休息了。稍作休息后，我们便换上酒店配有的日式浴衣往温泉进发了。</p><p>&#160; &#160; &#160; &#160;三点多的时候进了温泉，这时候人还不算很多。首先到第一层的大池“华兴池”去适应适应温度，刚开始感觉有点烫，但是过一会适应了以后，就会感到全身舒爽，大半天的舟车劳顿一扫而光。</p><p>&#160; &#160; &#160; &#160;随后我们还到一楼的各种名药池、名木池，以及二楼的各种奇怪的池去试了试（有蜜汤、姜汤、醋汤等等……）。但是有些池真是好烫，完全享受不来，于是泡了一会就溜了。中间休息的时候，我们到休息区去吃了不少自助水果、包点和饮料……要肥死了。</p><p>&#160; &#160; &#160; &#160;温泉区里还有个游泳池，泡热汤泡得有些头脑发涨，于是我们转移到游泳池去玩一玩。水温还算 OK，会放热水到池里，但是大部分池水还是比较凉的，在里面玩了可能有三四十分钟吧，然后就上岸了。上岸后感到贼冷，赶紧披上浴巾，冲向温泉……</p><p>&#160; &#160; &#160; &#160;从温泉出来，回房间修整了一会，我们就披着浴衣往庙会赶去了（已经快七点了……）。没有座位了，于是只能端着盘子，边走边吃，无法好好拍照……</p><p><img src="https://i.loli.net/2019/09/08/he8YfB3pXU7KaxQ.png" alt="贴纸纹身.png"></p><p>&#160; &#160; &#160; &#160;首先，拿一碟天妇罗炸虾当作前菜，外皮酥脆，咸淡适宜，一口闷下，体验极佳。我比较喜欢的是靠近玩乐街处的去骨牛肉和猪红牛杂，牛肉是比较西式的风味，搭配黑椒或者 BBQ 酱让人简直想一口十片！！牛杂则是比较经典的两广风味，让我想起在家时和兄弟们出去上网完毕后，一起去夜宵街食一碗牛杂粉的场景。想吃青菜就去港式菜品附近，有各种清炒蔬菜，这边还有美味的生滚及第粥、墨鱼咀和港式点心……</p><p><img src="https://i.loli.net/2019/09/08/4P5LKUglZsNhoce.png" alt="去骨牛肉.png"></p><p><img src="https://i.loli.net/2019/09/08/pVmHSnyWxqRAFE8.png" alt="煲.png"></p><p><img src="https://i.loli.net/2019/09/08/XNvtKG5qJ4lwsd8.png" alt="田螺.png"></p><p><img src="https://i.loli.net/2019/09/08/omlXPUYJwiLjrEW.png" alt="自搭茶.png"></p><p>&#160; &#160; &#160; &#160;实话说，庙会里的食物真是丰富多彩，我们从七点吃到了十点，但大概都还没吃到四分之一。由于没有座位，只能随随便便拍几张吃的了事……下次再来要好好摆盘拍一拍！！</p><p>&#160; &#160; &#160; &#160;吃到九分饱，我们就开始逛玩乐街，以消化消化肚子里的几斤食物。其实玩乐街里就是一些平常在广场上能看到的一些娱乐项目的变种，类似打气球、套娃娃、钓鱼……最好玩的还是押大小，小赌怡情，大赌发家！赌场附近混迹了二十来分钟，手上的票多出了十几张……</p><p><img src="https://i.loli.net/2019/09/08/alcNeLpQGdRxn1u.png" alt="大赌发家.png"></p><p>&#160; &#160; &#160; &#160;逛吃逛吃，然后到了十点，打锣收摊了，庙会街里的人也变得很少，于是我们开始疯狂装比拍照~</p><p><img src="https://i.loli.net/2019/09/08/C1YRFsfhwo7GBOr.png" alt="鱼_1.png"></p><p><img src="https://i.loli.net/2019/09/08/pBzUZwVPLJeEAHM.png" alt="石_1.png"></p><p>&#160; &#160; &#160; &#160;原本还有一张烟花券，可以去烟花场地领一盒烟花（就是一根一根拿在手上噼里啪啦的那种……），不过太累了，我们也就懒得去放了。回到房里洗洗漱漱，然后立马就摊死在床。</p><h2 id="后篇"><a href="#后篇" class="headerlink" title="后篇"></a>后篇</h2><p>&#160; &#160; &#160; &#160;第二天早上，吃了自助早餐，然后在附近随便逛逛，磨磨蹭蹭到中午。退房后，要到御瀛庄的门口去坐返程大巴。容易晕车的人，千万别坐红色的大巴，炒鸡臭，一上车我就晕了。晕了一路，好不容易到了港口，坐上船又是一阵摇摆，肚子里的东西疯狂翻滚！糟糕的返程体验，都怪红色大巴！！</p><p>&#160; &#160; &#160; &#160;不过总的来说吧，这次游玩的体验依旧很好，不管从硬件设施、服务质量，以及饮食方面来看，都能对得起人均 <code>1k2</code> 的价格，以后我们打算每年来一次！嚯嚯~</p><hr><h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><h2 id="关于订房"><a href="#关于订房" class="headerlink" title="关于订房"></a>关于订房</h2><ul><li>云来客栈大床套餐（包含无限次温泉，庙会自助晚餐，以及中/西式自助早餐），周末价格 <code>1850</code>，平日价 <code>1800</code>。</li><li>同样的附加配置，<strong>双人入格</strong>的房间比大床便宜 <code>400</code>，但是很难预订到周末的房（一般需要提前一两个月吧）。</li></ul><h2 id="关于交通"><a href="#关于交通" class="headerlink" title="关于交通"></a>关于交通</h2><ul><li>从深圳出发，可以<strong>从蛇口港坐船到九州港</strong>：<ul><li>可以到官网去预订船票，票价 <code>120</code>。</li><li>二号线坐到蛇口港站，出站后坐接驳车，大概 <code>3~4</code> 分钟就到港口。</li><li>蛇口港二楼也有很多取票机，憋挤在一楼排队取。</li><li>大概一小时就能到达九州港，然后度假村会有专门的大巴车接人。</li></ul></li><li>回程也坐船：<ul><li>度假村大巴送到九州港（注意，最好憋做<strong>红色的那个大巴</strong>，超级臭！）。</li><li>近期目的地是蛇口港的，需要到原大厅附近的一个像仓库一样的建筑去取票登船，可别走错了，注意看看入口附近的提示。</li></ul></li></ul><h2 id="自带物品"><a href="#自带物品" class="headerlink" title="自带物品"></a>自带物品</h2><ul><li><strong>套餐里面不包午餐的</strong>，所以需要自己带好两天的午餐，弄点干粮和饮料就好了（当然，钱多的可以直接吃那的餐厅，有点贵就是）。</li><li>温泉是<strong>男女共浴</strong>的，所以需要穿<strong>泳衣泳裤</strong>进入，可以自带，也可以用温泉那提供的免费的。</li><li>温泉区里有一个游泳池，喜欢游泳的还可以带上<strong>泳镜</strong>，不过泳池相对来说就冷了点。</li></ul><h2 id="关于住宿"><a href="#关于住宿" class="headerlink" title="关于住宿"></a>关于住宿</h2><ul><li>注意，云来客栈这<strong>规定是下午 3 点后入住，下午 1 点前退房</strong>，来早了得等。</li><li>我们是下午 1 点左右到的，服务员说可以先寄存包裹然后去泡温泉，但是我们还是想先入住再去泡，于是在大厅找了个位子吃午餐。</li><li>在摆放钢琴的附近，有一些小孩子的玩意儿，可以拿来消磨时间，我们俩呆在那玩到了 2 点多……</li><li>到了 <strong>2 点左右就可以去问问前台是不是已经能入住了</strong>，正常情况下应该是可以的。</li></ul><h2 id="关于温泉"><a href="#关于温泉" class="headerlink" title="关于温泉"></a>关于温泉</h2><ul><li>第一次去温泉区，需要录入指纹，之后就可以刷指纹进去了，在<strong>退房前可以随意进出</strong>。</li><li>建议不要待在池里太久，十多二十分钟就该起来休息休息了。</li><li>温泉区内有一个挺大的休息区，泡得累了可以去那吃点东西休息休息，有一些自助水果、面包果酱，还有无限饮料（汽水，以及雀巢咖啡机的各种）。</li><li>区内有两层（露天的），需要注意一下，住店客人存包有一个集中的区域，然后男的是在一楼，女的有一楼和二楼，所以<strong>情侣去的时候要注意一下，男生会从一楼进入温泉区，而女生可能会从二楼进入</strong>。</li><li>可以带手机进入，但是<strong>建议大家不要在里面拍照，很不文明</strong>（你在拍照的时候很容易拍到别人，特别是周末人多的时候）。考虑到这点，我们就没带手机。</li></ul><h2 id="关于饮食"><a href="#关于饮食" class="headerlink" title="关于饮食"></a>关于饮食</h2><ul><li>晚餐，庙会自助餐：<ul><li><strong>建议早点排队，6 点开始入场，去晚了就没位子，只能端着盘子边走边吃</strong>。</li><li>第一次入场，会有人在你手上贴一个<strong>贴纸</strong>，之后在庙会开发期间就可以凭此随意进出了。</li><li>进场后，服务员会给我们安排一个桌位，并在桌上放上一个<strong>占座牌</strong>，然后我们就可以毫无顾虑地逛庙会，搜刮美食了。</li><li>游戏区 8 点以后会开放，用<strong>入场时发的衙票</strong>可以加入游戏。</li></ul></li><li>早餐：<ul><li>入住时，会让你选择是<strong>中式早餐</strong>还是<strong>西式早餐</strong>。</li><li>我们选择了中式，刚进入时会看到三个窗口，都是现做的食物（<strong>肠粉，煎蛋，有机蔬菜</strong>），建议都去拿一份。</li><li>建议 8 点前去吃，接近 9 点时会人多。</li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/09/08/ADr6mn8zCWeVoj3.png&quot; alt=&quot;题图.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;时间：2018.01.13 ~ 2018.01.14&lt;br&gt;地点：深圳 —— 珠海御温泉&lt;br&gt;人物：石 &amp;amp; 鱼&lt;br&gt;花费：人均 1200+ RMB&lt;br&gt;（多图预警）&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://StoneAndFish.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="度假" scheme="http://StoneAndFish.cn/tags/%E5%BA%A6%E5%81%87/"/>
    
      <category term="游记" scheme="http://StoneAndFish.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
</feed>
